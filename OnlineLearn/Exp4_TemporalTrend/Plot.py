__author__ = 'Vince'
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import os
import sys
reload(sys)
sys.setdefaultencoding('utf-8')
import seaborn as sns

from scipy import *



SVM = [float(l.strip().split(': ')[1]) for l in open(sys.argv[1]).xreadlines() \
       if l.startswith('Zero-one')]
PA = [float(l.strip().split(': ')[1]) for l in open(sys.argv[2]).xreadlines() \
      if l.startswith('Zero-one')]
Perceptron = [float(l.strip().split(': ')[1]) for l in open(sys.argv[3]).xreadlines() \
              if l.startswith('Zero-one')]
SGD = [float(l.strip().split(': ')[1]) for l in open(sys.argv[4]).xreadlines() \
       if l.startswith('Zero-one')]
CW = [float(l.strip().split(': ')[1]) for l in open(sys.argv[5]).xreadlines() \
       if l.startswith('Zero-one')]
AROW = [float(l.strip().split(': ')[1]) for l in open(sys.argv[6]).xreadlines() \
       if l.startswith('Zero-one')]

SVMSamples = [int(l.strip().split()[-1]) for l in open(sys.argv[1]).xreadlines() \
              if l.startswith ('avg / total')]
# MDailyDrebinSamples = [int(l.strip().split()[-1]) for l in open('/media/some/Bihui/fyp/FullSelectedDrebinReport/DrebinMdaily10fixed.txt').xreadlines()\
#                   if l.startswith ('avg / total')]
PASamples = [int(l.strip().split()[-1]) for l in open(sys.argv[2]).xreadlines() \
             if l.startswith ('avg / total')]
PerceptronSamples = [int(l.strip().split()[-1]) for l in open(sys.argv[3]).xreadlines() \
                     if l.startswith ('avg / total')]
SGDSamples = [int(l.strip().split()[-1]) for l in open(sys.argv[4]).xreadlines() \
              if l.startswith ('avg / total')]
CWSamples = [int(l.strip().split()[-1]) for l in open(sys.argv[5]).xreadlines() \
              if l.startswith ('avg / total')]
AROWSamples = [int(l.strip().split()[-1]) for l in open(sys.argv[6]).xreadlines() \
              if l.startswith ('avg / total')]



SVMMC = [int (round (SVMSamples[i] * err)) for i, err in enumerate(SVM)]
PAMC = [int (round (PASamples[i] * err)) for i, err in enumerate(PA)]
PerceptronMC = [int (round (PerceptronSamples[i] * err)) for i, err in enumerate(Perceptron)]
SGDMC = [int (round (SGDSamples[i] * err)) for i, err in enumerate(SGD)]
CWMC = [int (round (CWSamples[i] * err)) for i, err in enumerate(CW)]
AROWMC = [int (round (AROWSamples[i] * err)) for i, err in enumerate(AROW)]


CumERSVM = [float(sum(SVMMC[:day + 1])) / sum(SVMSamples[:day + 1]) for day in xrange(len(SVMSamples))]
CumERPA = [float(sum(PAMC[:day + 1])) / sum(PASamples[:day + 1]) for day in xrange(len(PASamples))]
CumERPerceptron = [float(sum(PerceptronMC[:day + 1])) / sum(PerceptronSamples[:day + 1]) for day in xrange(len(PerceptronSamples))]
CumERSGD = [float(sum(SGDMC[:day + 1])) / sum(SGDSamples[:day + 1]) for day in xrange(len(SGDSamples))]
CumERCW = [float(sum(CWMC[:day + 1])) / sum(CWSamples[:day + 1]) for day in xrange(len(CWSamples))]
CumERAROW = [float(sum(AROWMC[:day + 1])) / sum(AROWSamples[:day + 1]) for day in xrange(len(AROWSamples))]




#######################################################################################################################
#                                                  plot
#######################################################################################################################





sns.set_style("whitegrid")
plt.minorticks_on()
plt.grid(b=True, which='major', color='grey', linestyle='-',alpha=0.2)
plt.grid(b=True, which='minor', color='grey', linestyle='--',alpha=0.2)
'''
ax1.xaxis.grid(b=True, which='major', color='grey', linestyle='-',alpha=0.2)
ax1.yaxis.grid(b=True, which='minor', color='grey', linestyle='--',alpha=0.2)
'''
plt.plot(CumERPerceptron, label='Perceptron', color='darkblue', marker ='o', markersize=1, markevery=15)
plt.plot(CumERSGD, label='SGD', color='darkgoldenrod', marker='^', markersize=1, markevery=15)
plt.plot(CumERSVM, label='SVM', color='black')
plt.plot(CumERPA, label='PA', color='firebrick', marker='o', markersize=1, markevery=15)
plt.plot(CumERCW, label='CW', color='red', marker='v', markersize=1, markevery=15)
plt.plot(CumERAROW, label='AROW', color='darkgreen', marker='^', markersize=1, markevery=15)

plt.xlabel('Samples',size=15)
plt.ylabel('Cumulative error rates',size=15)
#plt.title("(a)", verticalalignment='bottom')
plt.legend(prop={'size':10}, loc=2, frameon=True, ncol=2)



plt.tick_params(labelsize=10)

#plt.yticks(np.arange(0,0.5,0.05))




#plt.gcf().set_size_inches(cm2inch(18), cm2inch(6))


plt.tight_layout(pad=0, h_pad=0, w_pad=0)
#plt.show()
plt.savefig('OL_SVM.png',bbox_inches='tight', dpi=600)
print 'fig saved'
