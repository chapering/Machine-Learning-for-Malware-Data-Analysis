__author__ = 'Vince'
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import os
import sys
import seaborn as sns
import random

from itertools import cycle
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.preprocessing import Normalizer
from sklearn.linear_model import SGDClassifier
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import Perceptron
from sklearn.naive_bayes import MultinomialNB
from sklearn import metrics
from time import time
from sklearn.svm import LinearSVC
from sklearn.linear_model import SGDClassifier
from scipy.sparse import *
from scipy import *
import scipy.sparse as ssp
from sklearn.feature_selection import SelectKBest, chi2, f_classif
from Classification_StaticTrain import StaticTrain
from Classification_GrowingWindow import GrowingWindow

from scipy.sparse import vstack

def NewLineTokenizer (Str):
    return Str.split('\n')

def NewLineTokenizerNoContext (Str):
    StrList = Str.split('\n')
    for Index,Str in enumerate(StrList):
        if '~' in Str:
            StrList[Index] = Str.split('~')[1]
    return StrList

def GetNonZeroDims (NonZeroDims, TrainFVs):
    ColSums = TrainFVs.sum(axis = 0)
    # print type(ColSums)
    ColSums = ColSums.tolist()[0]
    for CIndex, Val in enumerate(ColSums):
        if Val:
            NonZeroDims.add (CIndex)
    return NonZeroDims


def GetFilesWithExtn (RootDir, Familyname, Extn):
    '''
    lllr to "find" command. List all the files from the RootDir with a given Extn
    :param RootDir: root to find files from
    :param Extn: extension to look for
    :return: sorted list of files with a given extension from the root dir and its child dirs
    '''

    #FilesToProcess = [os.path.join (RootDir, File) for File in os.listdir (RootDir) if File.endswith (Extn)]
    FilesToProcess = []
    for Root,Folders,Files in os.walk(RootDir):
        for F in Files:
            if F.endswith(Extn) and (Familyname in F):
                FilesToProcess.append(os.path.join(Root,F))

    FilesToProcess = list(set(FilesToProcess))
    FilesToProcess.sort()
    return FilesToProcess

def ClusterbyMonth(Fileslist):
    Monthlist = []
    templist = []
    month = '198001'
    Fileslist.sort()
    for f in Fileslist:
        #print '-'*100
        ##print month
        ##print f
        #print os.path.basename(str(f))
        if os.path.basename(str(f))[:6] == month:
            #print 'TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT'
            templist.append(str(f))
            #print templist
            #raw_input()
        else:
            month = os.path.basename(str(f))[:6]
            Monthlist.append(templist)
            templist = []
            templist.append(str(f))
            #print Monthlist
            #raw_input()
    for i, f in enumerate(Monthlist):
        if f == []:
            Monthlist.pop(i)
    return Monthlist 


####################################################################################
#             MIAN
####################################################################################
print sys.argv
MalDir = sys.argv[1]
BenDir = sys.argv[2]
FamilyName = sys.argv[3]
Extn = sys.argv[4]
WindowsSize = float(sys.argv[5])
GrowingWindowOption = int(sys.argv[6])


if 'datatxt' in Extn:
    Type = 'Drebin'
elif 'WL2' in Extn:
    Type = 'WLK'
elif '.txt' in Extn:
    Type = 'CSBD'
else: Type = 'OtherType'

MalList = GetFilesWithExtn(MalDir, FamilyName, Extn)
BenList = GetFilesWithExtn(BenDir, '', Extn)

print len(MalList)
print len(BenList)

MalSamples = ClusterbyMonth(MalList)
BenSamples = BenList[:len(MalList)]

print len(MalSamples)
print len(BenSamples)

#print MalSamples
#print BenSamples

DumpedFile1 = StaticTrain(MalSamples, BenSamples, FamilyName, Type, Extn, WindowsSize) 
DumpedFile2 = GrowingWindow(MalSamples, BenSamples, FamilyName, Type, Extn, WindowsSize, GrowingWindowOption) 

FullER = [float(l.strip().split(': ')[1]) for l in open (DumpedFile1).xreadlines() \
          if l.startswith('Zero-one')]
FullSamples = [int(l.strip().split()[-1]) for l in open(DumpedFile1).xreadlines() \
               if l.startswith ('avg / total')]
print FullER
print FullSamples
MyMC = [int(round(FullSamples[i] * err)) for i, err in enumerate(FullER)]
Full = [float(sum(MyMC[:day + 1])) / sum(FullSamples[:day + 1]) for day in xrange(len(FullSamples))]
#
#


FixedER = [float(l.strip().split(': ')[1]) for l in open (DumpedFile2).xreadlines() \
           if l.startswith('Zero-one')]
FixedSamples = [int(l.strip().split()[-1]) for l in open(DumpedFile2).xreadlines() \
                if l.startswith ('avg / total')]


print FixedER
print FixedSamples
MyMC = [int(round(FixedSamples[i] * err)) for i, err in enumerate(FixedER)]
Fixed = [float(sum(MyMC[:day + 1])) / sum(FixedSamples[:day + 1]) for day in xrange(len(FixedSamples))]
 
#######################################################################################################################
#                                                  plot
#######################################################################################################################
sns.set_style("whitegrid")
plt.minorticks_on()
plt.grid(b=True, which='major', color='grey', linestyle='-',alpha=0.2)
plt.grid(b=True, which='minor', color='grey', linestyle='--',alpha=0.2)
 
plt.plot(Fixed, label='New', color='black')
plt.plot(Full, label='Old', color='red', linestyle='--')
 
plt.tick_params(labelsize=10)
leg = plt.legend(prop={'size':10},loc='best',frameon=True, ncol=2)
leg.get_frame().set_edgecolor('black')
# plt.xlim(1,230)
# plt.ylim(0.2,0.5)
plt.xlabel('Samples',size=15)
plt.ylabel('Cumulative error rates',size=15)
#plt.xlim(0,230)

plt.gcf().set_size_inches(9, 3.5)
plt.tight_layout(pad=0, h_pad=0, w_pad=0)
#plt.show()
plt.savefig(FamilyName+'_'+Type+'_OldVSNew.png',bbox_inches='tight', dpi=600)
print 'fig saved'
