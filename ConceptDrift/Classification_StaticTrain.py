__author__ = 'Vince'
import sys
import os
from itertools import cycle
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.preprocessing import Normalizer
from sklearn.linear_model import SGDClassifier
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import Perceptron
from sklearn.naive_bayes import MultinomialNB
from sklearn import metrics
from time import time
from sklearn.svm import LinearSVC
from sklearn.linear_model import SGDClassifier
from scipy.sparse import *
from scipy import *
import scipy.sparse as ssp
from sklearn.feature_selection import SelectKBest, chi2, f_classif


from scipy.sparse import vstack

def NewLineTokenizer (Str):
    return Str.split('\n')

def NewLineTokenizerNoContext (Str):
    StrList = Str.split('\n')
    for Index,Str in enumerate(StrList):
        if '~' in Str:
            StrList[Index] = Str.split('~')[1]
    return StrList

def GetNonZeroDims (NonZeroDims, TrainFVs):
    ColSums = TrainFVs.sum(axis = 0)
    # print type(ColSums)
    ColSums = ColSums.tolist()[0]
    for CIndex, Val in enumerate(ColSums):
        if Val:
            NonZeroDims.add (CIndex)
    # print NonZeroDims
    return NonZeroDims


def StaticTrain(MalFeatures, GoodFeatures,FamilyName, ClfType, FeatDocDelim, Windowsize):
    LastDays = ['200812','200912','201012','201112','201212']
    LastDaysW = {d:None for d in LastDays}
    EveryMonthMal = {d[:6]:None for d in LastDays}

    ClfType = ClfType.lower()

    if ('wlk' == ClfType) or ('cwlk' == ClfType):
        Clf = LinearSVC(C = 0.1)
        #Clf = PassiveAggressiveClassifier(C = 0.01, warm_start=True,n_iter=10, n_jobs=1,loss='hinge')
    elif 'csbd' == ClfType:
        Clf = RandomForestClassifier(n_estimators = 100, max_features = "log2", max_depth = None)
    elif 'drebin' == ClfType:
        Clf = LinearSVC(C = 0.1)
    else :  Clf = LinearSVC()

    f = open(FamilyName+'_'+ClfType+'Classificaton_StaticTrain_Report.txt', 'w')
    NonZeroDims = set()

    print 'cmd args:'
    print 'Clf = ', Clf
    print 'FeatDocDelim = ', FeatDocDelim
    #print 'MalFolder', MalFolder
    #print 'GoodFolder', GoodFolder
    #raw_input()

    #Days = MalFeatures #may also use GoodFolder
    #print len(Days)
    
    Days2 = GoodFeatures
    
    Days2.sort()
    #print 'gonna process months:', Days
    # raw_input()
    #print MalFolder, GoodFolder, FeatDocDelim

    DoTrain = True


    #XTrain =(MalFeatures[:int(round(len(MalFeatures)/10))], GoodFeatures[:int(round(len(MalFeatures)/10))])
    #print len(MalFeatures[0])
    #print len(GoodFeatures)
    #raw_input()
    
    MalFiles = []
    '''
    for j, elem in enumerate(MalFeatures):
        MalFiles += MalFeatures[j]
        if len(MalFiles) >= 10: break
    '''
    for j, elem in enumerate(MalFeatures):
        MalFiles += MalFeatures[j]
    fixedwindow = int(len(MalFiles)*Windowsize)
    
    Days = MalFiles
    Days.sort()
    XTrain =(MalFiles[:fixedwindow], GoodFeatures[:fixedwindow])

    #LowerTrain = 0

    for i, D in enumerate(Days[fixedwindow:]):
        #if i>0: LowerTrain = len(MalFeatures[i-1])
        try:
            #XTest = (MalFeatures[j+i], GoodFeatures[LowerTrain:len(MalFeatures[j+i])+LowerTrain])
            XTest = (MalFiles[fixedwindow +i], GoodFeatures[fixedwindow +i])
            #print XTest
            #raw_input()
        except:
            print 'All days processed'


        #print >>f, 'handling train: %s and test: %s' % (XTrain, XTest)
        TrainMalSamples = XTrain[0]
        TrainGoodSamples = XTrain[1]
        TestMalSamples = []
        TestGoodSamples = []
        TestMalSamples.append(XTest[0])
        TestGoodSamples.append(XTest[1])


        TrainSamples = TrainMalSamples + TrainGoodSamples
        TestSamples = TestMalSamples + TestGoodSamples

        TrainMalLabels = np.ones(len(TrainMalSamples))
        TestMalLabels = np.ones(len(TestMalSamples))
        TrainGoodLabels = np.empty(len(TrainGoodSamples)); TrainGoodLabels.fill(-1)
        TestGoodLabels = np.empty(len(TestGoodSamples)); TestGoodLabels.fill(-1)

        TrainLabels = np.hstack((TrainMalLabels, TrainGoodLabels))
        TestLabels = np.hstack((TestMalLabels, TestGoodLabels))
        del TrainMalLabels, TrainGoodLabels, TestMalLabels, TestGoodLabels
        print '# TrainLabels', len(TrainLabels)
        print '# TestLabels', len(TestLabels)

        #if ClfType == 'wlk': MyTokenizer = NewLineTokenizerNoContext
        MyTokenizer = NewLineTokenizer
        print 'performing CVectorizer'
        CVectorizer = CountVectorizer(input = u'filename',
                                      lowercase = True,
                                      token_pattern = None,
                                      tokenizer = MyTokenizer,
                                      # binary = True,
                                      dtype=np.float64)
        print 'performing TfidfTransformer and Normalizer'
        TFIDFTransformer = TfidfTransformer()
        normalizer = Normalizer()
        print 'creating Train and Test FVs'
        TrainFVs = CVectorizer.fit_transform(TrainSamples)
        TestFVs = CVectorizer.transform(TestSamples)
        NonZeroDims = GetNonZeroDims (NonZeroDims, TrainFVs)
        print >>f, 'NonZeroDims', len(NonZeroDims)

        print 'normalizing Train and Test FVs'
        # TrainFVs = normalizer.fit_transform(TrainFVs)
        # TestFVs = normalizer.transform(TestFVs)
        TrainFVs = TFIDFTransformer.fit_transform(TrainFVs)
        TestFVs = TFIDFTransformer.transform(TestFVs)

        if DoTrain:
            T0 = time()
            print 'fitting classifier with train samples shape:', TrainFVs.shape
            BestModel = Clf.fit(TrainFVs, TrainLabels) # re-train on current training set (daily)
            print 'print batch fitted'
            print 'training time', time() - T0
            print 'testing classifier with train samples shape:', TestFVs.shape
            DoTrain = False

        T0 = time()
        PredictedLabels = BestModel.predict(TestFVs)
        Accuracy = np.mean(PredictedLabels == TestLabels)
        print >>f, "Test Set Accuracy = ", Accuracy
        print >>f, 'testing time', time() - T0
        print >>f, (metrics.classification_report(TestLabels,
                    PredictedLabels, target_names=['Goodware', 'Malware']))

        print >>f, "Accuracy classification score:", metrics.accuracy_score(TestLabels, PredictedLabels)
        print >>f, "Hamming loss:", metrics.hamming_loss(TestLabels, PredictedLabels)
        print >>f, "Average hinge loss:", metrics.hinge_loss(TestLabels, PredictedLabels)
        print >>f, "Log loss:", metrics.log_loss(TestLabels, PredictedLabels)
        print >>f, "F1 Score:", metrics.f1_score(TestLabels, PredictedLabels)
        print >>f, "Zero-one classification loss:", metrics.zero_one_loss(TestLabels, PredictedLabels)
        # raw_input()
    f.close()
    return os.path.abspath(FamilyName+'_'+ClfType+'_Classificaton_StaticTrain_Report.txt')


