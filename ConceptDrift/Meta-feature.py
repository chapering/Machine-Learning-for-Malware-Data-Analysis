import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.feature_extraction import DictVectorizer
import os
import sys
import logging
from scipy.spatial.distance import cosine
from   sklearn.metrics.pairwise import linear_kernel
from math import log
import matplotlib
matplotlib.use('Agg')
import math
import matplotlib.pyplot as plt
from numpy import ma
from matplotlib import colors, ticker, cm
from matplotlib.mlab import bivariate_normal
#logging level
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger('sys.stdout')



def GetFilesWithExtn (RootDir, Familyname, Extn):
    '''
    lllr to "find" command. List all the files from the RootDir with a given Extn
    :param RootDir: root to find files from
    :param Extn: extension to look for
    :return: sorted list of files with a given extension from the root dir and its child dirs
    '''

    FilesToProcess = [os.path.join (RootDir, File) for File in os.listdir (RootDir) if File.endswith (Extn)]
    for Root,Folders,Files in os.walk(RootDir):
        for F in Files:
            if F.endswith(Extn) and (Familyname in F):
                FilesToProcess.append(os.path.join(Root,F))

    FilesToProcess = list(set(FilesToProcess))
    FilesToProcess.sort()
    return FilesToProcess


def NewLineTokenizer (Str):
    return Str.split('\n')

def GetNonZeroDims (FV):
    NonZeroDims = 0
    for Val in FV:
        if Val:
            NonZeroDims += 1
    return NonZeroDims

def GetTrackingFeature(samples, wholeset):
    FeatureFrequency = {}
    currentfeatures = []
    sumset = set()
    for fea in wholeset:
        FeatureFrequency[fea] = 0
    for sample in samples:
        currentdeatures = []
        sumset = set()
        for line in open(os.path.abspath(sample)):
            sumset.add(line[:-1].lower())
        for key in FeatureFrequency.keys():
            if key in sumset:
                FeatureFrequency[key] += 1
    #print FeatureFrequency
    
    return sorted(FeatureFrequency.items(), key = lambda d:d[1], reverse = True)[0][0]


def Classification(MalwareCorpus,
                   Familyname,
                   Extn):

    # step 1: split all samples to training set and test set (3:1)

    MalSamples = GetFilesWithExtn(MalwareCorpus, Familyname, Extn)
    MalSamples.sort()

    logger.info ("All Samples loaded")
    print '# mal samples:', len(MalSamples)

    #step 2 - feature extracting
    TFIDFTransformer = TfidfTransformer()


    NewCVectorizer = CountVectorizer(input=u'filename',
                                                  lowercase=True,
                                                  token_pattern=None,
                                                  tokenizer=NewLineTokenizer,
                                                  stop_words = ['{','}'],
                                                  #binary=True,
                                                  dtype=np.float64)

    #NewCVectorizer = DictVectorizer(sort = False)


    #print 'performing count vectorizing'
    FV = NewCVectorizer.fit_transform(MalSamples)
    print len(NewCVectorizer.get_feature_names())
    TrackingFeature = GetTrackingFeature(MalSamples, NewCVectorizer.get_feature_names())
    print  TrackingFeature 
    raw_input()



    i = NewCVectorizer.vocabulary_.get(TrackingFeature)
    print i

    print TFIDFTransformer.idf_
    print 'train term-doc matrix: ', FV.shape
    print FV.toarray()


    TermFrequency = []
    UniqueNum = []
    for j in range(len(MalSamples)):
        #print FV.toarray()[j][i]
        TermFrequency.append(FV.toarray()[j][i]/sum(FV.toarray()[j]))
        #print FV.toarray()[j][i]/sum(FV.toarray()[j])
        #UniqueNum.append(round(GetNonZeroDims(FV.toarray()[i]) * FV.toarray()[i][np.argmax(FV.toarray()[i])] / log(1/Min_df)))
        #UniqueNum.append(sum(FV.toarray()[j]))
        UniqueNum.append(GetNonZeroDims(FV.toarray()[j])) 
    print len(TermFrequency)
    print len(UniqueNum)
    plot(TermFrequency, len(MalSamples), Familyname, 'TermFrequency', Extn)
    plot(UniqueNum, len(MalSamples),Familyname, 'UniqueNumber', Extn)

def plot(SimMatrix,size, Familyname, type, Extn):

    print len(SimMatrix)
    cs = plt.scatter(np.linspace(1, size, size),SimMatrix,facecolor='black')
    plt.xlim(0,size)
    if 'pkg_adicfg_ret_.json.ADG.DirWLWODup' in Extn:
        plt.savefig(Familyname+'_'+type+'_CWLK.png',bbox_inches='tight', dpi=600)
    elif 'data' in Extn:
        plt.savefig(Familyname+'_'+type+'_Drebin.png',bbox_inches='tight', dpi=600)
    elif 'Feature' in Extn:
        plt.savefig(Familyname+'_'+type+'_CSBD.png',bbox_inches='tight', dpi=600)
    else :    plt.savefig(Familyname+'_'+type+'.png',bbox_inches='tight', dpi=600)
    plt.clf()
    print 'fig saved'

def main(MalwareDirName,
         Familyname,
         Extn='Features'):

    Classification(MalwareDirName,
                   Familyname,
                   Extn)

if __name__ == "__main__":

     main(MalwareDirName=sys.argv[1],
          Familyname=sys.argv[2],
          Extn=sys.argv[3])



