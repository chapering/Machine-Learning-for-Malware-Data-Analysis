package com.omniture;

import java.io.PrintStream;
import java.util.Calendar;
import java.util.Date;
import java.util.Hashtable;
import java.util.Random;
import java.util.TimeZone;
import java.util.Vector;

public class AppMeasurementBase
  extends AppMeasurement_Variables
{
  protected int _1_referrer = 0;
  public String imageDimensions;
  public int maxRequestThreads = 1;
  public int maxRequestsPerThread = 50;
  public boolean offline = false;
  protected Vector requestList = null;
  protected int requestThreadID = 0;
  protected Hashtable requestThreads = null;
  public boolean sendFromServer = false;
  protected String target = "";
  public boolean usePlugins = false;
  protected String version = "JAVA-1.1.2";
  
  public AppMeasurementBase()
  {
    this.ssl = false;
    this.linkLeaveQueryString = false;
    this.debugTracking = false;
    this.charSet = "UTF-8";
    this.sendFromServer = true;
  }
  
  public static String escape(String paramString)
  {
    Object localObject;
    if (paramString == null) {
      localObject = null;
    }
    for (;;)
    {
      return localObject;
      try
      {
        String str2 = new String(paramString.getBytes("UTF-8"), "ISO-8859-1");
        paramString = "";
        int i = 0;
        for (;;)
        {
          localObject = paramString;
          for (;;)
          {
            char c;
            try
            {
              if (i >= str2.length()) {
                break;
              }
              c = str2.charAt(i);
              if (c >= 'a')
              {
                if (c > 'z')
                {
                  break label169;
                  if (".-*_".indexOf(c) <= -1) {}
                }
                else
                {
                  paramString = paramString + c;
                  break label196;
                }
                String str1 = Integer.toString(c, 16).toUpperCase();
                localObject = str1;
                if (str1.length() == 1) {
                  localObject = '0' + str1;
                }
                paramString = paramString + '%' + (String)localObject;
              }
            }
            catch (Exception paramString)
            {
              return null;
            }
            label169:
            if ((c < 'A') || (c > 'Z')) {
              if (c >= '0') {
                if (c <= '9') {}
              }
            }
          }
          label196:
          i += 1;
        }
        return null;
      }
      catch (Exception paramString) {}
    }
  }
  
  public static String unescape(String paramString)
  {
    if (paramString == null) {
      localObject = null;
    }
    do
    {
      return localObject;
      localObject = paramString;
    } while (paramString.indexOf('%') < 0);
    int i = 0;
    Object localObject = "";
    try
    {
      while (i < paramString.length())
      {
        char c2 = paramString.charAt(i);
        if (c2 == '%')
        {
          String str = paramString.substring(i + 1, i + 3);
          localObject = (String)localObject + (char)Integer.parseInt(str, 16);
          i += 3;
        }
        else
        {
          localObject = new StringBuffer().append((String)localObject);
          char c1 = c2;
          if (c2 == '+') {
            c1 = ' ';
          }
          localObject = c1;
          i += 1;
        }
      }
      paramString = new String(((String)localObject).getBytes("ISO-8859-1"), "UTF-8");
      return paramString;
    }
    catch (Exception paramString) {}
    return null;
  }
  
  protected void _doPlugins() {}
  
  protected boolean _doRequest(String paramString, Hashtable paramHashtable)
  {
    return true;
  }
  
  protected boolean _hasDoPlugins()
  {
    return false;
  }
  
  protected boolean _hasDoRequest()
  {
    return false;
  }
  
  public void clearVars()
  {
    int i = 0;
    if (i < this.accountVarList.length)
    {
      String str2 = this.accountVarList[i];
      if (str2.length() > 4) {}
      for (String str1 = str2.substring(0, 4);; str1 = "")
      {
        if ((str2.equals("channel")) || (str2.equals("events")) || (str2.equals("purchaseID")) || (str2.equals("transactionID")) || (str2.equals("products")) || (str2.equals("state")) || (str2.equals("zip")) || (str2.equals("campaign")) || (str1.equals("prop")) || (str1.equals("eVar")) || (str1.equals("hier"))) {
          setAccountVar(str2, null);
        }
        i += 1;
        break;
      }
    }
  }
  
  public void forceOffline()
  {
    this.offline = true;
    if (this.requestList != null) {
      synchronized (this.requestList)
      {
        this.requestList.notifyAll();
        return;
      }
    }
  }
  
  public void forceOnline()
  {
    this.offline = false;
    if (this.requestList != null) {
      synchronized (this.requestList)
      {
        this.requestList.notifyAll();
        return;
      }
    }
  }
  
  protected Calendar getCalendar()
  {
    return Calendar.getInstance();
  }
  
  protected String getDefaultAcceptLanguage()
  {
    return "";
  }
  
  protected String getDefaultPageURL()
  {
    return "";
  }
  
  protected String getDefaultReferrer()
  {
    return "";
  }
  
  protected String getDefaultUserAgent()
  {
    return "";
  }
  
  protected String getDefaultVisitorID()
  {
    return "";
  }
  
  protected String getQueryString()
  {
    Object localObject5 = "";
    Object localObject2 = null;
    Object localObject1 = null;
    if (isSet(this.linkType))
    {
      localObject2 = this.linkTrackVars;
      localObject1 = this.linkTrackEvents;
    }
    Object localObject3 = localObject2;
    if (isSet((String)localObject2)) {
      localObject3 = "," + (String)localObject2 + "," + joinArray(",", this.requiredVarList) + ",";
    }
    Object localObject4 = localObject1;
    if (isSet((String)localObject1)) {
      localObject4 = "," + (String)localObject1 + ",";
    }
    int i = 0;
    if (i < this.accountVarList.length)
    {
      String str3 = this.accountVarList[i];
      String str2 = getAccountVar(str3);
      Object localObject6;
      String str1;
      label179:
      Object localObject7;
      if (str3.length() > 4)
      {
        localObject6 = str3.substring(0, 4);
        str1 = str3.substring(4);
        localObject7 = localObject5;
        if (isSet(str2))
        {
          localObject1 = "," + str3 + ",";
          if ((!isSet((String)localObject3)) || (((String)localObject3).indexOf((String)localObject1) != -1)) {
            break label261;
          }
          localObject7 = localObject5;
        }
      }
      label261:
      label278:
      do
      {
        i += 1;
        localObject5 = localObject7;
        break;
        localObject6 = null;
        str1 = null;
        break label179;
        if (!str3.equals("timestamp")) {
          break label361;
        }
        localObject1 = "ts";
        localObject2 = str2;
        localObject7 = localObject5;
      } while (!isSet((String)localObject2));
      localObject5 = new StringBuffer().append((String)localObject5).append("&").append(escape((String)localObject1)).append("=");
      if ((((String)localObject1).length() <= 3) || (((String)localObject1).substring(0, 3) != "pev")) {}
      for (localObject1 = escape((String)localObject2);; localObject1 = localObject2)
      {
        localObject7 = (String)localObject1;
        break;
        label361:
        if (str3.equals("dynamicVariablePrefix"))
        {
          localObject1 = "D";
          localObject2 = str2;
          break label278;
        }
        if (str3.equals("visitorID"))
        {
          localObject1 = "vid";
          localObject2 = str2;
          break label278;
        }
        if (str3.equals("pageURL"))
        {
          localObject1 = "g";
          localObject2 = str2;
          break label278;
        }
        if (str3.equals("referrer"))
        {
          localObject1 = "r";
          localObject2 = str2;
          break label278;
        }
        if (str3.equals("charSet"))
        {
          localObject1 = "ce";
          localObject2 = str2;
          break label278;
        }
        if (str3.equals("visitorNamespace"))
        {
          localObject1 = "ns";
          localObject2 = str2;
          break label278;
        }
        if (str3.equals("currencyCode"))
        {
          localObject1 = "cc";
          localObject2 = str2;
          break label278;
        }
        if (str3.equals("channel"))
        {
          localObject1 = "ch";
          localObject2 = str2;
          break label278;
        }
        if (str3.equals("transactionID"))
        {
          localObject1 = "xact";
          localObject2 = str2;
          break label278;
        }
        if (str3.equals("campaign"))
        {
          localObject1 = "v0";
          localObject2 = str2;
          break label278;
        }
        if (str3.equals("resolution"))
        {
          localObject1 = "s";
          localObject2 = str2;
          break label278;
        }
        if (str3.equals("events"))
        {
          localObject1 = str3;
          localObject2 = str2;
          if (!isSet((String)localObject4)) {
            break label278;
          }
          localObject6 = splitString(",", str2);
          localObject1 = "";
          int j = 0;
          if (j < localObject6.length)
          {
            localObject2 = localObject1;
            if (((String)localObject4).indexOf("," + localObject6[j] + ",") != -1)
            {
              localObject2 = new StringBuffer().append((String)localObject1);
              if (!isSet((String)localObject1)) {
                break label726;
              }
            }
            label726:
            for (localObject1 = ",";; localObject1 = "")
            {
              localObject2 = (String)localObject1 + localObject6[j];
              j += 1;
              localObject1 = localObject2;
              break;
            }
          }
          localObject2 = localObject1;
          localObject1 = str3;
          break label278;
        }
        localObject1 = str3;
        localObject2 = str2;
        if (!isNumber(str1)) {
          break label278;
        }
        if (((String)localObject6).equals("prop"))
        {
          localObject1 = "c" + str1;
          localObject2 = str2;
          break label278;
        }
        if (((String)localObject6).equals("eVar"))
        {
          localObject1 = "v" + str1;
          localObject2 = str2;
          break label278;
        }
        if (((String)localObject6).equals("list"))
        {
          localObject1 = "l" + str1;
          localObject2 = str2;
          break label278;
        }
        localObject1 = str3;
        localObject2 = str2;
        if (!((String)localObject6).equals("hier")) {
          break label278;
        }
        localObject6 = "h" + str1;
        localObject1 = localObject6;
        localObject2 = str2;
        if (str2.length() <= 255) {
          break label278;
        }
        localObject2 = str2.substring(0, 255);
        localObject1 = localObject6;
        break label278;
      }
    }
    return localObject5;
  }
  
  public double getTime()
  {
    return getCalendar().getTime().getTime();
  }
  
  protected void handleLinkTracking()
  {
    Object localObject = this.linkType;
    String str2 = this.linkURL;
    String str3 = this.linkName;
    if ((isSet((String)localObject)) && ((isSet(str2)) || (isSet(str3))))
    {
      String str1 = ((String)localObject).toLowerCase();
      localObject = str1;
      if (!str1.equals("d"))
      {
        localObject = str1;
        if (!str1.equals("e")) {
          localObject = "o";
        }
      }
      str1 = str2;
      if (isSet(str2))
      {
        str1 = str2;
        if (!this.linkLeaveQueryString)
        {
          int i = str2.indexOf("?");
          str1 = str2;
          if (i != -1) {
            str1 = str2.substring(0, i);
          }
        }
      }
      this.pe = ("lnk_" + escape((String)localObject));
      this.pev1 = escape(str1);
      this.pev2 = escape(str3);
    }
  }
  
  protected void handleRequestList()
  {
    Object localObject5 = "";
    double d2 = 0.0D;
    for (;;)
    {
      int j = 0;
      int k = 0;
      synchronized (this.requestList)
      {
        do
        {
          boolean bool = this.requestList.isEmpty();
          if (!bool) {
            break;
          }
          try
          {
            i = this.requestThreads.size();
            if (i > 1) {
              return;
            }
            this.requestList.wait(1000L);
          }
          catch (Exception localException2)
          {
            int i;
            String str1;
            double d1;
            for (;;) {}
          }
        } while (!this.requestList.isEmpty());
        return;
      }
      str1 = (String)this.requestList.elementAt(0);
      this.requestList.removeElementAt(0);
      if (this.trackOffline)
      {
        d1 = d2;
        if (this.offline) {}
      }
      else if ((this.trackOffline) && (d2 > 0.0D) && (this.offlineThrottleDelay > 0))
      {
        d1 = getTime() - d2;
        if (d1 >= this.offlineThrottleDelay) {}
      }
      try
      {
        Thread.currentThread();
        Thread.sleep((this.offlineThrottleDelay - d1));
        ??? = null;
        if (_hasDoRequest())
        {
          String[] arrayOfString = splitString("\t", str1);
          i = k;
          if (arrayOfString.length > 0)
          {
            i = k;
            if (arrayOfString[0].length() > 0)
            {
              String str2 = arrayOfString[0];
              i = 1;
              while (i < arrayOfString.length)
              {
                String str3 = arrayOfString[i];
                ??? = ???;
                if (str3 != null)
                {
                  ??? = ???;
                  if (str3 != "")
                  {
                    ??? = ???;
                    if (i < arrayOfString.length - 1)
                    {
                      String str4 = arrayOfString[(i + 1)];
                      ??? = ???;
                      if (str4 != null)
                      {
                        ??? = ???;
                        if (str4 != "")
                        {
                          ??? = ???;
                          if (??? == null) {
                            ??? = new Hashtable();
                          }
                          ((Hashtable)???).put(str3, str4);
                        }
                      }
                    }
                  }
                }
                i += 2;
                ??? = ???;
              }
              i = k;
              if (_doRequest(str2, (Hashtable)???)) {
                i = 1;
              }
            }
          }
          label369:
          d1 = d2;
          j = i;
          if (i != 0)
          {
            if (this.requestList.size() <= 0) {
              break label545;
            }
            d1 = getTime();
            j = i;
          }
          label399:
          if (j != 0) {
            break label554;
          }
          d2 = d1;
          if (!this.trackOffline) {
            continue;
          }
          synchronized (this.requestList)
          {
            this.requestList.insertElementAt(str1, 0);
            ??? = localObject5;
            if (!this.requestList.isEmpty())
            {
              ??? = localObject5;
              if (this.requestList.elementAt(this.requestList.size() - 1) != localObject5)
              {
                ??? = (String)this.requestList.elementAt(this.requestList.size() - 1);
                offlineRequestListWrite();
              }
            }
          }
        }
        try
        {
          this.requestList.wait(500L);
          localObject5 = ???;
          d2 = d1;
          continue;
          localObject2 = finally;
          throw localObject2;
          i = k;
          if (!requestRequest(str1)) {
            break label369;
          }
          i = 1;
          break label369;
          label545:
          d1 = 0.0D;
          j = i;
          break label399;
          label554:
          offlineRequestListDelete();
          d2 = d1;
        }
        catch (Exception localException3)
        {
          for (;;) {}
        }
      }
      catch (Exception localException1)
      {
        for (;;) {}
      }
    }
  }
  
  protected void handleTechnology() {}
  
  public boolean isNumber(int paramInt)
  {
    return true;
  }
  
  protected boolean isNumber(String paramString)
  {
    try
    {
      Integer.parseInt(paramString);
      return true;
    }
    catch (Exception paramString) {}
    return false;
  }
  
  public boolean isSet(double paramDouble)
  {
    return paramDouble != 0.0D;
  }
  
  public boolean isSet(float paramFloat)
  {
    return paramFloat != 0.0D;
  }
  
  public boolean isSet(int paramInt)
  {
    return paramInt != 0;
  }
  
  public boolean isSet(Object paramObject)
  {
    return paramObject != null;
  }
  
  public boolean isSet(String paramString)
  {
    if (paramString == null) {}
    while (paramString.length() == 0) {
      return false;
    }
    return true;
  }
  
  public boolean isSet(boolean paramBoolean)
  {
    return paramBoolean;
  }
  
  public String joinArray(String paramString, String[] paramArrayOfString)
  {
    String str1 = "";
    int j = 1;
    int i = 0;
    while (i < paramArrayOfString.length)
    {
      String str2 = str1;
      if (j == 0) {
        str2 = str1 + paramString;
      }
      str1 = str2 + paramArrayOfString[i];
      j = 0;
      i += 1;
    }
    return str1;
  }
  
  public void logDebug(String paramString)
  {
    System.out.println(paramString);
  }
  
  protected String makeRequest(String paramString1, String paramString2)
  {
    Object localObject2 = this.trackingServer;
    String str = this.dc;
    Object localObject1 = this.visitorNamespace;
    if (!isSet((String)localObject2))
    {
      localObject2 = localObject1;
      if (!isSet((String)localObject1))
      {
        localObject2 = this.account;
        int i = ((String)localObject2).indexOf(",");
        localObject1 = localObject2;
        if (i != -1) {
          localObject1 = ((String)localObject2).substring(0, i);
        }
        localObject2 = replace(replace((String)localObject1, "_", "-"), ".", "-");
      }
      if (isSet(str))
      {
        localObject1 = str.toLowerCase();
        if ((((String)localObject1).equals("dc2")) || (((String)localObject1).equals("122")))
        {
          localObject1 = "122";
          localObject1 = (String)localObject2 + "." + (String)localObject1 + ".2o7.net";
          label173:
          if (!isSet(this.ssl)) {
            break label444;
          }
          localObject2 = "https://";
          label189:
          localObject2 = new StringBuffer().append((String)localObject2).append((String)localObject1).append("/b/ss/").append(this.account).append("/");
          if (!this.mobile) {
            break label452;
          }
          localObject1 = "5.";
          label239:
          localObject2 = ((StringBuffer)localObject2).append((String)localObject1);
          if (!this.sendFromServer) {
            break label459;
          }
          localObject1 = "0";
          label260:
          localObject2 = ((StringBuffer)localObject2).append((String)localObject1).append("/").append(this.version);
          if (!isSet(this.target)) {
            break label467;
          }
        }
      }
    }
    label444:
    label452:
    label459:
    label467:
    for (localObject1 = "-" + this.target;; localObject1 = "")
    {
      paramString2 = (String)localObject1 + "/" + paramString1 + "?AQB=1&ndh=1&" + paramString2 + "&AQE=1";
      if (this.sendFromServer) {
        break label474;
      }
      return "<img src=\"" + paramString2 + "\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" />";
      localObject1 = "112";
      break;
      localObject1 = "112";
      break;
      localObject1 = localObject2;
      if (!isSet(this.ssl)) {
        break label173;
      }
      localObject1 = localObject2;
      if (!isSet(this.trackingServerSecure)) {
        break label173;
      }
      localObject1 = this.trackingServerSecure;
      break label173;
      localObject2 = "http://";
      break label189;
      localObject1 = "";
      break label239;
      localObject1 = "1";
      break label260;
    }
    label474:
    paramString1 = paramString2;
    if (isSet(this.userAgent)) {
      paramString1 = paramString2 + "\tUser-Agent\t" + replace(replace(replace(this.userAgent, "\t", " "), "\n", " "), "\r", " ");
    }
    paramString2 = paramString1;
    if (isSet(this.acceptLanguage)) {
      paramString2 = paramString1 + "\tAccept-Language\t" + replace(replace(replace(this.acceptLanguage, "\t", " "), "\n", " "), "\r", " ");
    }
    sendRequest(paramString2);
    return "";
  }
  
  protected void modulesUpdate() {}
  
  protected void offlineRequestListDelete() {}
  
  protected void offlineRequestListRead() {}
  
  protected void offlineRequestListWrite() {}
  
  public String replace(String paramString1, String paramString2, String paramString3)
  {
    String str = paramString1;
    if (isSet(paramString1))
    {
      str = paramString1;
      if (paramString1.indexOf(paramString2) >= 0) {
        str = joinArray(paramString3, splitString(paramString2, paramString1));
      }
    }
    return str;
  }
  
  protected boolean requestRequest(String paramString)
  {
    logDebug(paramString);
    return true;
  }
  
  protected void requestThreadStart()
  {
    int i = this.requestThreadID;
    if (!isSet(this.maxRequestThreads)) {
      this.maxRequestThreads = 1;
    }
    if (this.requestThreads == null) {
      this.requestThreads = new Hashtable();
    }
    int j = (int)Math.ceil(this.requestList.size() / this.maxRequestsPerThread);
    synchronized (this.requestThreads)
    {
      if ((this.requestThreads.size() < j + 1) && (this.requestThreads.size() < this.maxRequestThreads))
      {
        if (this.requestThreads.size() <= 0) {
          this.requestThreadID = 0;
        }
        AppMeasurementBase.1 local1 = new AppMeasurementBase.1(this, this, i);
        this.requestThreads.put(new Integer(this.requestThreadID), local1);
        local1.start();
        this.requestThreadID += 1;
      }
    }
  }
  
  protected void sendRequest(String paramString)
  {
    if (this.requestList == null)
    {
      this.requestList = new Vector();
      offlineRequestListRead();
    }
    requestThreadStart();
    String[] arrayOfString;
    synchronized (this.requestList)
    {
      if (isSet(this.trackOffline))
      {
        if (!isSet(this.offlineLimit)) {
          this.offlineLimit = 10;
        }
        if (this.requestList.size() >= this.offlineLimit) {
          this.requestList.removeElementAt(0);
        }
      }
      this.requestList.addElement(paramString);
      this.requestList.notifyAll();
      if (!isSet(this.debugTracking)) {
        return;
      }
      arrayOfString = splitString("\t", paramString);
      if ((arrayOfString.length <= 0) || (arrayOfString[0].length() <= 0)) {
        return;
      }
      ??? = arrayOfString[0];
      paramString = "AppMeasurement Debug: " + (String)???;
      ??? = splitString("&", splitString("\t", ???)[0]);
      i = 0;
      if (i < ???.length)
      {
        paramString = paramString + "\n\t" + unescape(???[i]);
        i += 1;
      }
    }
    int i = 1;
    while (i < arrayOfString.length)
    {
      String str1 = arrayOfString[i];
      ??? = paramString;
      if (str1 != null)
      {
        ??? = paramString;
        if (str1 != "")
        {
          ??? = paramString;
          if (i < arrayOfString.length - 1)
          {
            String str2 = arrayOfString[(i + 1)];
            ??? = paramString;
            if (str2 != null)
            {
              ??? = paramString;
              if (str2 != "") {
                ??? = paramString + "\n\t" + str1 + ": " + str2;
              }
            }
          }
        }
      }
      i += 2;
      paramString = (String)???;
    }
    logDebug(paramString);
  }
  
  protected void setDefaults()
  {
    if (!isSet(this.userAgent)) {
      this.userAgent = getDefaultUserAgent();
    }
    if (!isSet(this.acceptLanguage)) {
      this.acceptLanguage = getDefaultAcceptLanguage();
    }
    if (!isSet(this.visitorID)) {
      this.visitorID = getDefaultVisitorID();
    }
    if (!isSet(this.pageURL)) {
      this.pageURL = getDefaultPageURL();
    }
    if ((isSet(this.pageURL)) && (this.pageURL.toLowerCase().indexOf("https://") >= 0)) {
      this.ssl = true;
    }
    if ((!isSet(this.referrer)) && (!isSet(this._1_referrer)))
    {
      this.referrer = getDefaultReferrer();
      this._1_referrer = 1;
    }
  }
  
  public String[] splitString(String paramString1, String paramString2)
  {
    int j = 0;
    int i = 1;
    for (;;)
    {
      j = paramString2.indexOf(paramString1, j);
      if (j < 0) {
        break;
      }
      i += 1;
      j += paramString1.length();
    }
    String[] arrayOfString = new String[i];
    if (i == 1)
    {
      arrayOfString[0] = paramString2;
      return arrayOfString;
    }
    i = 0;
    for (;;)
    {
      j = paramString2.indexOf(paramString1);
      if (j < 0) {
        break;
      }
      arrayOfString[i] = paramString2.substring(0, j);
      paramString2 = paramString2.substring(paramString1.length() + j);
      i += 1;
    }
    arrayOfString[i] = paramString2;
    return arrayOfString;
  }
  
  public String track()
  {
    return track(null);
  }
  
  public String track(Hashtable paramHashtable)
  {
    String str1 = "";
    Hashtable localHashtable = null;
    Object localObject = getCalendar();
    String str2 = "s" + (int)Math.floor(new Random().nextDouble() * 1.0E8D);
    localObject = "" + ((Calendar)localObject).get(5) + "/" + ((Calendar)localObject).get(2) + "/" + ((Calendar)localObject).get(1) + " " + ((Calendar)localObject).get(11) + ":" + ((Calendar)localObject).get(12) + ":" + ((Calendar)localObject).get(13) + " " + (((Calendar)localObject).get(7) - 1) + " " + ((Calendar)localObject).getTimeZone().getRawOffset() / 60000 * -1;
    localObject = "t=" + escape((String)localObject);
    if (paramHashtable != null)
    {
      localHashtable = new Hashtable();
      variableOverridesBuild(localHashtable);
      variableOverridesApply(paramHashtable);
    }
    if ((this.usePlugins) && (_hasDoPlugins())) {
      _doPlugins();
    }
    if (isSet(this.account))
    {
      if ((isSet(this.trackOffline)) && (!isSet(this.timestamp))) {
        this.timestamp = ((int)Math.floor(getTime() / 1000.0D));
      }
      setDefaults();
      handleLinkTracking();
      handleTechnology();
      str1 = makeRequest(str2, (String)localObject + getQueryString());
    }
    if (paramHashtable != null) {
      variableOverridesApply(localHashtable);
    }
    this.referrer = null;
    this.pe = null;
    this.pev1 = null;
    this.pev2 = null;
    this.pev3 = null;
    this.linkURL = null;
    this.linkName = null;
    this.linkType = null;
    return str1;
  }
  
  public String trackLink(String paramString1, String paramString2, String paramString3)
  {
    return trackLink(paramString1, paramString2, paramString3, null);
  }
  
  public String trackLink(String paramString1, String paramString2, String paramString3, Hashtable paramHashtable)
  {
    this.linkURL = paramString1;
    this.linkType = paramString2;
    this.linkName = paramString3;
    return track(paramHashtable);
  }
  
  protected void variableOverridesApply(Hashtable paramHashtable)
  {
    int i = 0;
    String str1;
    String str2;
    String str3;
    while (i < this.accountVarList.length)
    {
      str1 = this.accountVarList[i];
      str2 = (String)paramHashtable.get(str1);
      str3 = "!" + str1;
      if ((isSet(str2)) || (isSet(paramHashtable.get(str3)))) {
        setAccountVar(str1, str2);
      }
      i += 1;
    }
    i = 0;
    while (i < this.accountConfigList.length)
    {
      str1 = this.accountConfigList[i];
      str2 = (String)paramHashtable.get(str1);
      str3 = "!" + str1;
      if ((isSet(str2)) || (isSet(paramHashtable.get(str3)))) {
        setAccountVar(str1, str2);
      }
      i += 1;
    }
  }
  
  protected void variableOverridesBuild(Hashtable paramHashtable)
  {
    int i = 0;
    String str1;
    String str2;
    if (i < this.accountVarList.length)
    {
      str1 = this.accountVarList[i];
      str2 = getAccountVar(str1);
      if (!isSet((String)paramHashtable.get(str1)))
      {
        if (!isSet(str2)) {
          break label64;
        }
        paramHashtable.put(str1, str2);
      }
      for (;;)
      {
        i += 1;
        break;
        label64:
        paramHashtable.put("!" + str1, "1");
      }
    }
    i = 0;
    if (i < this.accountConfigList.length)
    {
      str1 = this.accountConfigList[i];
      str2 = getAccountVar(str1);
      if (!isSet((String)paramHashtable.get(str1)))
      {
        if (!isSet(str2)) {
          break label159;
        }
        paramHashtable.put(str1, str2);
      }
      for (;;)
      {
        i += 1;
        break;
        label159:
        paramHashtable.put("!" + str1, "1");
      }
    }
  }
}
