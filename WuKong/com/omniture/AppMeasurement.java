package com.omniture;

import android.app.Application;
import android.content.ContextWrapper;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.os.Build;
import android.os.Build.VERSION;
import android.telephony.TelephonyManager;
import android.util.DisplayMetrics;
import android.util.Log;
import java.io.File;
import java.util.Hashtable;
import java.util.Locale;

public class AppMeasurement
  extends AppMeasurementBaseSE
{
  protected Application application = null;
  public DoPlugins doPlugins = null;
  public DoRequest doRequest = null;
  
  public AppMeasurement()
  {
    this.target = "AN";
  }
  
  public AppMeasurement(Application paramApplication)
  {
    this();
    this.application = paramApplication;
    if ((this.application != null) && (this.offlineFilename == null)) {
      this.offlineFilename = new File(this.application.getCacheDir(), "AppMeasurement.offline").getPath();
    }
  }
  
  protected void _doPlugins()
  {
    if (this.doPlugins != null) {
      this.doPlugins.doPlugins(this);
    }
  }
  
  protected boolean _doRequest(String paramString, Hashtable paramHashtable)
  {
    if (this.doRequest != null) {
      return this.doRequest.doRequest(this, paramString, paramHashtable);
    }
    return true;
  }
  
  protected boolean _hasDoPlugins()
  {
    return this.doPlugins != null;
  }
  
  protected boolean _hasDoRequest()
  {
    return this.doRequest != null;
  }
  
  protected String getApplicationID()
  {
    try
    {
      Object localObject2 = this.application.getPackageManager();
      ApplicationInfo localApplicationInfo = ((PackageManager)localObject2).getApplicationInfo(this.application.getPackageName(), 0);
      Object localObject1 = ((PackageManager)localObject2).getPackageInfo(this.application.getPackageName(), 0);
      localObject2 = (String)((PackageManager)localObject2).getApplicationLabel(localApplicationInfo);
      localObject1 = ((PackageInfo)localObject1).versionName;
      if (isSet((String)localObject2))
      {
        localObject2 = new StringBuffer().append((String)localObject2);
        if (isSet((String)localObject1)) {}
        for (localObject1 = "/" + (String)localObject1;; localObject1 = "") {
          return (String)localObject1;
        }
      }
      return null;
    }
    catch (Exception localException) {}
  }
  
  protected String getDefaultAcceptLanguage()
  {
    try
    {
      Object localObject = this.application.getResources().getConfiguration().locale;
      localObject = ((Locale)localObject).getLanguage() + '-' + ((Locale)localObject).getCountry().toLowerCase();
      return localObject;
    }
    catch (Exception localException) {}
    return null;
  }
  
  protected String getDefaultUserAgent()
  {
    String str1 = getDefaultAcceptLanguage();
    String str2 = getApplicationID();
    StringBuffer localStringBuffer = new StringBuffer().append("Mozilla/5.0 (Linux; U; Android ").append(Build.VERSION.RELEASE).append("; ");
    if (isSet(str1))
    {
      localStringBuffer = localStringBuffer.append(str1).append("; ").append(Build.MODEL).append(" Build/").append(Build.ID).append(")");
      if (!isSet(str2)) {
        break label118;
      }
    }
    label118:
    for (str1 = " " + str2;; str1 = "")
    {
      return str1;
      str1 = "en_US";
      break;
    }
  }
  
  protected String getDefaultVisitorID()
  {
    try
    {
      String str = ((TelephonyManager)this.application.getSystemService("phone")).getSubscriberId();
      return str;
    }
    catch (Exception localException) {}
    return null;
  }
  
  protected void handleTechnology()
  {
    try
    {
      DisplayMetrics localDisplayMetrics = this.application.getResources().getDisplayMetrics();
      this.resolution = (localDisplayMetrics.widthPixels + "x" + localDisplayMetrics.heightPixels);
      return;
    }
    catch (Exception localException) {}
  }
  
  public void logDebug(String paramString)
  {
    Log.d("AppMeasurement", paramString);
  }
  
  public static abstract interface DoPlugins
  {
    public abstract void doPlugins(AppMeasurement paramAppMeasurement);
  }
  
  public static abstract interface DoRequest
  {
    public abstract boolean doRequest(AppMeasurement paramAppMeasurement, String paramString, Hashtable paramHashtable);
  }
}
