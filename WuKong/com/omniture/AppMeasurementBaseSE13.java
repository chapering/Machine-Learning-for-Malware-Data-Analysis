package com.omniture;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.InputStream;
import java.lang.reflect.Method;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Vector;

public class AppMeasurementBaseSE13
  extends AppMeasurementBase
{
  Method java15_HttpURLConnection_setConnectTimeout = null;
  Method java15_HttpURLConnection_setReadTimeout = null;
  
  public AppMeasurementBaseSE13()
  {
    try
    {
      this.java15_HttpURLConnection_setConnectTimeout = Class.forName("HttpURLConnection").getMethod("setConnectTimeout", new Class[] { Integer.TYPE });
    }
    catch (Exception localException1)
    {
      for (;;)
      {
        try
        {
          this.java15_HttpURLConnection_setReadTimeout = Class.forName("HttpURLConnection").getMethod("setReadTimeout", new Class[] { Integer.TYPE });
          return;
        }
        catch (Exception localException2)
        {
          this.java15_HttpURLConnection_setReadTimeout = null;
        }
        localException1 = localException1;
        this.java15_HttpURLConnection_setConnectTimeout = null;
      }
    }
  }
  
  protected void finalize()
    throws Throwable
  {
    synchronized (this.requestList)
    {
      this.requestList.notifyAll();
      super.finalize();
      return;
    }
  }
  
  protected Calendar getCalendar()
  {
    return new GregorianCalendar();
  }
  
  protected void offlineRequestListDelete()
  {
    if (this.offlineFilename != null) {}
    try
    {
      localFile = new File(this.offlineFilename);
      if ((localFile == null) || (!localFile.exists())) {}
    }
    catch (Exception localException1)
    {
      for (;;)
      {
        try
        {
          File localFile;
          localFile.delete();
          return;
        }
        catch (Exception localException2) {}
        localException1 = localException1;
        Object localObject = null;
      }
    }
  }
  
  protected void offlineRequestListRead()
  {
    if (this.offlineFilename != null) {}
    try
    {
      File localFile = new File(this.offlineFilename);
      if ((localFile != null) && (localFile.exists())) {
        try
        {
          BufferedReader localBufferedReader = new BufferedReader(new FileReader(localFile));
          for (;;)
          {
            String str = localBufferedReader.readLine();
            if (str != null) {
              synchronized (this.requestList)
              {
                this.requestList.add(str);
              }
            }
          }
          localBufferedReader.close();
          localObject1.delete();
          return;
        }
        catch (Exception localException1) {}
      }
      return;
    }
    catch (Exception localException2)
    {
      for (;;)
      {
        Object localObject2 = null;
      }
    }
  }
  
  protected void offlineRequestListWrite()
  {
    if (this.offlineFilename != null) {}
    try
    {
      Object localObject1 = new File(this.offlineFilename);
      if (localObject1 != null) {}
      try
      {
        localObject1 = new BufferedWriter(new FileWriter((File)localObject1));
        int i = 0;
        while (i < this.requestList.size())
        {
          String str = (String)this.requestList.get(i);
          ((BufferedWriter)localObject1).write(str, 0, str.length());
          ((BufferedWriter)localObject1).newLine();
          i += 1;
        }
        ((BufferedWriter)localObject1).close();
        return;
      }
      catch (Exception localException1) {}
    }
    catch (Exception localException2)
    {
      for (;;)
      {
        Object localObject2 = null;
      }
    }
  }
  
  protected HttpURLConnection requestConnect(String paramString)
  {
    try
    {
      paramString = (HttpURLConnection)new URL(paramString).openConnection();
      return paramString;
    }
    catch (Exception paramString) {}
    return null;
  }
  
  protected boolean requestRequest(String paramString)
  {
    HttpURLConnection localHttpURLConnection = null;
    bool1 = false;
    bool3 = false;
    String[] arrayOfString = splitString("\t", paramString);
    boolean bool2 = bool1;
    String str1;
    if (arrayOfString.length > 0)
    {
      bool2 = bool1;
      if (arrayOfString[0].length() > 0)
      {
        str1 = arrayOfString[0];
        paramString = localHttpURLConnection;
      }
    }
    try
    {
      localHttpURLConnection = requestConnect(str1);
      paramString = localHttpURLConnection;
      bool1 = bool3;
      if (localHttpURLConnection == null) {
        break label239;
      }
      paramString = localHttpURLConnection;
      if (this.java15_HttpURLConnection_setConnectTimeout != null)
      {
        paramString = localHttpURLConnection;
        this.java15_HttpURLConnection_setConnectTimeout.invoke(localHttpURLConnection, new Object[] { new Integer(5000) });
      }
      paramString = localHttpURLConnection;
      if (this.java15_HttpURLConnection_setReadTimeout == null) {
        break label270;
      }
      paramString = localHttpURLConnection;
      this.java15_HttpURLConnection_setReadTimeout.invoke(localHttpURLConnection, new Object[] { new Integer(5000) });
    }
    catch (Exception localException)
    {
      for (;;)
      {
        String str2;
        label239:
        bool1 = bool3;
        continue;
        int i = 1;
        continue;
        i += 2;
      }
    }
    paramString = localHttpURLConnection;
    if (i < arrayOfString.length)
    {
      str1 = arrayOfString[i];
      if ((str1 != null) && (str1 != ""))
      {
        paramString = localHttpURLConnection;
        if (i < arrayOfString.length - 1)
        {
          str2 = arrayOfString[(i + 1)];
          if ((str2 != null) && (str2 != ""))
          {
            paramString = localHttpURLConnection;
            localHttpURLConnection.setRequestProperty(str1, str2);
          }
        }
      }
    }
    else
    {
      paramString = localHttpURLConnection;
      localHttpURLConnection.getResponseCode();
      bool1 = true;
      paramString = localHttpURLConnection;
      bool2 = bool1;
      if (paramString != null) {}
      try
      {
        paramString.getInputStream().close();
        bool2 = bool1;
        return bool2;
      }
      catch (Exception paramString)
      {
        return bool1;
      }
    }
  }
}
