package com.adobe.reader;

import android.content.res.Resources;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.text.Editable;
import android.text.Selection;
import android.text.Spannable;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import java.util.Date;

public class PARStickyNoteCommentUIHandlerAndroid
  implements PopupNoteViewInterface
{
  private String mContent = null;
  private ARViewer mContext = null;
  private int mCurrentStickyNotePageNum;
  private int mCurrentStickyNotePointX;
  private int mCurrentStickyNotePointY;
  private long mJNIObj;
  private int mNumReplies = 0;
  private PageView mPageView = null;
  private PopupNoteView mPopupNoteView = null;
  private ARReplyNoteEntryAdapter mReplyListAdapter = null;
  private ListView mReplyListView = null;
  private boolean tapAllowedOnBackground = false;
  
  public PARStickyNoteCommentUIHandlerAndroid(long paramLong, ARViewer paramARViewer)
  {
    this.mJNIObj = create(paramLong);
    this.mContext = paramARViewer;
    this.mPageView = this.mContext.getPageView();
  }
  
  private native void addStickyNoteFromContextMenu(long paramLong, int paramInt1, int paramInt2, int paramInt3);
  
  private native void closePressedOnPopup(long paramLong1, long paramLong2);
  
  private native long create(long paramLong);
  
  private native void createStickyNote(long paramLong, String paramString1, String paramString2, int paramInt1, int paramInt2, int paramInt3);
  
  private native CommentParams getStickyNoteParams(long paramLong, int paramInt1, int paramInt2, int paramInt3);
  
  private native void updateStickyNote(long paramLong1, long paramLong2, String paramString);
  
  public void CancelPressedOnPopup()
  {
    ARUtils.hideKeyboard((EditText)this.mPopupNoteView.getPopupNoteWidgetView().findViewById(2131493033));
    this.mPopupNoteView.resetPopupNoteWidgetPosition();
    ARCommentManager.COMMENTMODE localCOMMENTMODE = getMode();
    if (localCOMMENTMODE == ARCommentManager.COMMENTMODE.ADD_COMMENT_MODE) {
      cancelStickyNoteWorkflow();
    }
    while (localCOMMENTMODE != ARCommentManager.COMMENTMODE.EDIT_COMMENT_MODE) {
      return;
    }
    this.tapAllowedOnBackground = true;
    setMode(ARCommentManager.COMMENTMODE.VIEW_COMMENT_MODE);
    this.mPopupNoteView.setPopupNoteWidgetUIControls(false);
  }
  
  public void ClosePressedOnPopup()
  {
    Object localObject = this.mPageView.getDocViewManager();
    if (localObject != null)
    {
      localObject = ((ARDocViewManager)localObject).getCommentManager();
      closePressedOnPopup(this.mJNIObj, ((ARCommentManager)localObject).getCurrentEditComment());
    }
  }
  
  public void DeletePressedOnPopup()
  {
    hidePopupWidget();
    ARCommentManager localARCommentManager = this.mPageView.getDocViewManager().getCommentManager();
    if (localARCommentManager != null) {
      localARCommentManager.deleteCommentWrapper();
    }
  }
  
  public void DonePressedOnPopup()
  {
    EditText localEditText = (EditText)this.mPopupNoteView.getPopupNoteWidgetView().findViewById(2131493033);
    String str = localEditText.getText().toString();
    ARCommentManager localARCommentManager = this.mPageView.getDocViewManager().getCommentManager();
    switch (getMode())
    {
    }
    for (;;)
    {
      ARUtils.hideKeyboard(localEditText);
      hidePopupWidget();
      this.mPageView.getDocViewManager().getCommentManager().resetActiveTool();
      return;
      createStickyNoteWrapper(str);
      continue;
      if (localARCommentManager.getCurrentEditComment() != 0L) {
        updateStickyNote(this.mJNIObj, localARCommentManager.getCurrentEditComment(), str);
      }
    }
  }
  
  public void EditPressedOnPopup()
  {
    this.tapAllowedOnBackground = false;
    setMode(ARCommentManager.COMMENTMODE.EDIT_COMMENT_MODE);
    Object localObject = ((TextView)this.mPopupNoteView.getPopupNoteWidgetView().findViewById(2131492943)).getText().toString();
    this.mPopupNoteView.setPopupNoteWidgetUIControls(false, (String)localObject);
    EditText localEditText = (EditText)this.mPopupNoteView.getPopupNoteWidgetView().findViewById(2131493033);
    localEditText.setText((CharSequence)localObject);
    localObject = localEditText.getText();
    Selection.setSelection((Spannable)localObject, ((Editable)localObject).length());
    ARUtils.showKeyboard(localEditText);
  }
  
  void addReply(String paramString1, String paramString2, String paramString3)
  {
    this.mNumReplies += 1;
    this.mReplyListAdapter.add(new ARReplyNote(paramString1, paramString2, paramString3));
  }
  
  void addStickyNoteFromContextMenu(int paramInt1, int paramInt2, int paramInt3)
  {
    addStickyNoteFromContextMenu(this.mJNIObj, paramInt1, paramInt2, paramInt3);
  }
  
  public void addStickyNoteWorkflow()
  {
    EditText localEditText = (EditText)this.mPopupNoteView.getPopupNoteWidgetView().findViewById(2131493033);
    localEditText.requestFocus();
    ARUtils.showKeyboard(localEditText);
  }
  
  public void cancelStickyNoteWorkflow()
  {
    hidePopupWidget();
    this.mPageView.getDocViewManager().getCommentManager().resetActiveTool();
  }
  
  public boolean clearUI()
  {
    if ((this.mPopupNoteView != null) && (this.mPopupNoteView.isPopupVisible()) && (getMode() != ARCommentManager.COMMENTMODE.INVALID_MODE))
    {
      ARUtils.hideKeyboard((EditText)this.mPopupNoteView.getPopupNoteWidgetView().findViewById(2131493033));
      hidePopupWidget();
      return true;
    }
    return false;
  }
  
  public void continueCreation()
  {
    String str = this.mPageView.getDocViewManager().getCommentManager().getAuthorNameFromPreferences();
    createStickyNote(this.mJNIObj, this.mContent, str, this.mCurrentStickyNotePointX, this.mCurrentStickyNotePointY, this.mCurrentStickyNotePageNum);
    this.mContent = null;
  }
  
  public void createStickyNoteWrapper(String paramString)
  {
    this.mContent = paramString;
    if (this.mPageView.getDocViewManager().getCommentManager().verifyAuthorName(0)) {
      continueCreation();
    }
  }
  
  public Rect getGhostImageSize()
  {
    int i = this.mContext.getResources().getDrawable(2130837687).getIntrinsicHeight();
    return new Rect(0, 0, this.mContext.getResources().getDrawable(2130837687).getIntrinsicWidth(), i);
  }
  
  public ARCommentManager.COMMENTMODE getMode()
  {
    return this.mPageView.getDocViewManager().getCommentManager().getMode();
  }
  
  public int getNumReplies()
  {
    return this.mNumReplies;
  }
  
  public CommentParams getStickyNoteParams(int paramInt1, int paramInt2, int paramInt3)
  {
    return getStickyNoteParams(this.mJNIObj, paramInt1, paramInt2, paramInt3);
  }
  
  public ImageView getViewForMoveResize(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5)
  {
    if (this.mContext != null)
    {
      ImageView localImageView = new ImageView(this.mContext);
      localImageView.setBackgroundResource(2130837687);
      return localImageView;
    }
    return null;
  }
  
  public void hidePopupWidget()
  {
    this.mContext.popBackButtonHandler();
    if (this.mPopupNoteView.isPopupVisible())
    {
      setMode(ARCommentManager.COMMENTMODE.INVALID_MODE);
      this.mContext.resetTimerHandlerForUIElems();
      this.mPopupNoteView.hidePopupNoteView();
      if (this.mReplyListAdapter != null) {
        this.mReplyListAdapter.clear();
      }
      CommentingToolbar localCommentingToolbar = (CommentingToolbar)this.mContext.getToolbar().findViewById(2131493133);
      if (this.mContext.isToolbarTopView(localCommentingToolbar))
      {
        this.mContext.showUIElems();
        this.mContext.lockToolbar();
      }
    }
  }
  
  public boolean isPopupVisible()
  {
    if (this.mPopupNoteView != null) {
      return this.mPopupNoteView.isPopupVisible();
    }
    return false;
  }
  
  public boolean isTapAllowedOnBackground()
  {
    return this.tapAllowedOnBackground;
  }
  
  public void setCommentView(String paramString1, String paramString2, String paramString3)
  {
    Object localObject = (EditText)this.mPopupNoteView.getPopupNoteWidgetView().findViewById(2131493033);
    if (paramString3 != null) {
      ((EditText)localObject).setText(paramString3);
    }
    paramString3 = ((LayoutInflater)this.mContext.getSystemService("layout_inflater")).inflate(2130903050, null);
    localObject = (TextView)paramString3.findViewById(2131492940);
    if (paramString1 != null) {
      ((TextView)localObject).setText(paramString1);
    }
    for (;;)
    {
      paramString1 = (TextView)paramString3.findViewById(2131492941);
      if (paramString2 == null) {
        break;
      }
      paramString1.setText(paramString2);
      return;
      ((TextView)localObject).setVisibility(8);
    }
    paramString1.setVisibility(8);
  }
  
  public void setMode(ARCommentManager.COMMENTMODE paramCOMMENTMODE)
  {
    this.mPageView.getDocViewManager().getCommentManager().setMode(paramCOMMENTMODE);
  }
  
  public void setPopupNoteWidgetPosition(int paramInt)
  {
    if (this.mPopupNoteView != null) {
      this.mPopupNoteView.setPopupNoteWidgetPosition(paramInt);
    }
  }
  
  void showPopupWidget(long paramLong, String paramString1, String paramString2, String paramString3, boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5)
  {
    if (this.mContext != null)
    {
      ARCommentManager localARCommentManager = this.mPageView.getDocViewManager().getCommentManager();
      if (paramLong == 0L) {
        break label80;
      }
      localARCommentManager.setCurrentEditComment(paramLong);
      startStickyNoteWorkFlow(ARCommentManager.COMMENTMODE.VIEW_COMMENT_MODE, paramString2, paramString1, paramString3, paramBoolean, paramInt4, paramInt5);
    }
    for (;;)
    {
      this.mContext.pushBackButtonHandler(new ARViewer.BackButtonHandler()
      {
        public void onBackPressed()
        {
          PARStickyNoteCommentUIHandlerAndroid.this.hidePopupWidget();
          PARStickyNoteCommentUIHandlerAndroid.this.ClosePressedOnPopup();
        }
      });
      this.mPageView.addOnCloseDocumentListener(new PageView.OnCloseDocumentListener()
      {
        public void onCloseDocument()
        {
          if (PARStickyNoteCommentUIHandlerAndroid.this.isPopupVisible()) {
            PARStickyNoteCommentUIHandlerAndroid.this.cancelStickyNoteWorkflow();
          }
        }
      });
      return;
      label80:
      this.mCurrentStickyNotePointX = paramInt1;
      this.mCurrentStickyNotePointY = paramInt2;
      this.mCurrentStickyNotePageNum = paramInt3;
      paramString1 = new Date();
      startStickyNoteWorkFlow(ARCommentManager.COMMENTMODE.ADD_COMMENT_MODE, null, this.mContext.getString(2131361933), paramString1.toLocaleString(), false, paramInt4, paramInt5);
    }
  }
  
  public void showReplyUI()
  {
    this.mPopupNoteView.getPopupNoteWidgetView().findViewById(2131493031).setVisibility(0);
  }
  
  public void startStickyNoteWorkFlow(ARCommentManager.COMMENTMODE paramCOMMENTMODE, String paramString1, String paramString2, String paramString3, boolean paramBoolean, int paramInt1, int paramInt2)
  {
    setMode(paramCOMMENTMODE);
    this.mNumReplies = 0;
    String str = paramString1;
    if (paramString1 != null) {
      str = paramString1.replace('\r', '\n');
    }
    this.mPopupNoteView = new PopupNoteView(this.mContext, this, this.mContext.getResources().getDrawable(2130837859), paramInt1, paramInt2);
    this.mPopupNoteView.setPopupNoteWidgetUIControls(paramBoolean);
    this.mContext.unlockToolbar();
    this.mContext.fadeOutUIElems(true);
    if (paramCOMMENTMODE == ARCommentManager.COMMENTMODE.ADD_COMMENT_MODE)
    {
      this.tapAllowedOnBackground = false;
      addStickyNoteWorkflow();
      setCommentView(paramString2, paramString3, str);
    }
    if (paramCOMMENTMODE == ARCommentManager.COMMENTMODE.VIEW_COMMENT_MODE)
    {
      this.tapAllowedOnBackground = true;
      viewEditStickyNoteWorkflow(paramString2, paramString3, str, paramBoolean);
    }
  }
  
  public void viewEditStickyNoteWorkflow(String paramString1, String paramString2, String paramString3, boolean paramBoolean)
  {
    this.mReplyListView = ((ListView)this.mPopupNoteView.getPopupNoteWidgetView().findViewById(2131493030));
    this.mReplyListAdapter = new ARReplyNoteEntryAdapter(this.mContext, 2130903076);
    this.mReplyListView.setAdapter(this.mReplyListAdapter);
    this.mReplyListView.setFocusable(false);
    this.mReplyListView.setVisibility(0);
    this.mReplyListAdapter.add(new ARReplyNote(paramString1, paramString2, paramString3));
  }
}
