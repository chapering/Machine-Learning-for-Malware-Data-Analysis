package com.adobe.reader;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.StateListDrawable;
import android.view.ContextMenu;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.MenuItem.OnMenuItemClickListener;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnCreateContextMenuListener;
import android.view.View.OnTouchListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.PopupWindow;
import android.widget.TableLayout;
import android.widget.TableRow;
import android.widget.TextView;
import java.util.ArrayList;

public class BasePopupMenu
  extends PopupWindow
  implements View.OnClickListener, View.OnCreateContextMenuListener, MenuItem.OnMenuItemClickListener
{
  private static final int GROUP_ID = 1;
  private static final int MARGIN_BOTTOM = 4;
  private static final int MARGIN_LEFT = 1;
  private static final int MARGIN_RIGHT = 4;
  private static final int MARGIN_TOP = 0;
  private Context mContext = null;
  private ArrayList<MyMenuData> mMenuData;
  private TableLayout mTableLayout;
  private String mTitle;
  private TableRow mTitleRow;
  private TableRow mTitleSeparatorRow;
  
  public BasePopupMenu(Context paramContext)
  {
    super(paramContext);
    this.mContext = paramContext;
    this.mMenuData = new ArrayList();
    Object localObject = new LinearLayout(paramContext);
    setBackgroundDrawable(new MyShadowDrawable());
    setContentView((View)localObject);
    this.mTableLayout = new TableLayout(paramContext);
    this.mTableLayout.setBackgroundColor(0);
    ((LinearLayout)localObject).addView(this.mTableLayout);
    localObject = new LinearLayout.LayoutParams(-2, -2);
    ((LinearLayout.LayoutParams)localObject).setMargins(1, 0, 4, 4);
    this.mTableLayout.setLayoutParams((ViewGroup.LayoutParams)localObject);
    LayoutInflater.from(paramContext).inflate(2130903072, this.mTableLayout);
    this.mTitleRow = ((TableRow)this.mTableLayout.getChildAt(0));
    this.mTitleRow.setVisibility(8);
    addSeparator();
    this.mTitleSeparatorRow = ((TableRow)this.mTableLayout.getChildAt(0));
    this.mTitleSeparatorRow.setVisibility(8);
    setFocusable(true);
    setOutsideTouchable(true);
    setTouchInterceptor(new View.OnTouchListener()
    {
      public boolean onTouch(View paramAnonymousView, MotionEvent paramAnonymousMotionEvent)
      {
        return false;
      }
    });
  }
  
  public void addItem(int paramInt1, String paramString, int paramInt2, int paramInt3, boolean paramBoolean1, boolean paramBoolean2)
  {
    Object localObject = new MyMenuData(paramInt1, paramString, paramBoolean1, paramBoolean2);
    this.mMenuData.add(localObject);
    LayoutInflater.from(this.mTableLayout.getContext()).inflate(2130903071, this.mTableLayout);
    localObject = (TableRow)this.mTableLayout.getChildAt(this.mTableLayout.getChildCount() - 1);
    ((TableRow)localObject).setId(paramInt1);
    ((TableRow)localObject).setClickable(true);
    ((TableRow)localObject).setOnClickListener(this);
    ((TableRow)localObject).setBackgroundDrawable(new MyDrawable((TableRow)localObject, paramInt2, paramInt3));
    ImageView localImageView = (ImageView)((TableRow)localObject).getChildAt(0);
    if (paramInt2 != 0)
    {
      localImageView.setImageResource(paramInt2);
      localImageView.setVisibility(0);
    }
    ((TextView)((TableRow)localObject).getChildAt(1)).setText(paramString);
    paramString = (ImageView)((TableRow)localObject).getChildAt(2);
    if (paramBoolean1)
    {
      paramString.setImageResource(2130837587);
      paramString.setVisibility(0);
    }
    paramString = getContentView();
    paramString.measure(0, 0);
    setWidth(paramString.getMeasuredWidth());
    setHeight(paramString.getMeasuredHeight());
  }
  
  public void addSeparator()
  {
    View localView = new View(this.mContext);
    Resources localResources = this.mContext.getResources();
    localView.setBackgroundColor(localResources.getColor(2131230743));
    localView.setLayoutParams(new LinearLayout.LayoutParams(-1, localResources.getDimensionPixelSize(2131296406)));
    this.mTableLayout.addView(localView);
  }
  
  public void handleClick(int paramInt) {}
  
  public void onClick(View paramView)
  {
    handleClick(paramView.getId());
    dismiss();
  }
  
  public void onCreateContextMenu(ContextMenu paramContextMenu, View paramView, ContextMenu.ContextMenuInfo paramContextMenuInfo)
  {
    if (this.mTitle != null) {
      paramContextMenu.setHeaderTitle(this.mTitle);
    }
    int i = 0;
    int j = 0;
    if (i >= this.mMenuData.size())
    {
      if (j != 0) {
        paramContextMenu.setGroupCheckable(1, true, true);
      }
      return;
    }
    paramContextMenuInfo = (MyMenuData)this.mMenuData.get(i);
    if (paramContextMenuInfo.mIsCheckable)
    {
      paramView = paramContextMenu.add(1, paramContextMenuInfo.mMenuId, i, paramContextMenuInfo.mText);
      j = 1;
    }
    for (;;)
    {
      paramView.setOnMenuItemClickListener(this);
      paramView.setCheckable(paramContextMenuInfo.mIsCheckable);
      paramView.setChecked(paramContextMenuInfo.mIsChecked);
      i += 1;
      break;
      paramView = paramContextMenu.add(0, paramContextMenuInfo.mMenuId, i, paramContextMenuInfo.mText);
    }
  }
  
  public boolean onMenuItemClick(MenuItem paramMenuItem)
  {
    ((ARViewer)getContentView().getContext()).unlockToolbar();
    handleClick(paramMenuItem.getItemId());
    return false;
  }
  
  public void setTitle(String paramString)
  {
    this.mTitle = paramString;
    this.mTitleRow.setVisibility(0);
    this.mTitleSeparatorRow.setVisibility(0);
    ((TextView)this.mTitleRow.getChildAt(0)).setText(paramString);
  }
  
  public void showAsContextMenu(View paramView)
  {
    ARViewer localARViewer = (ARViewer)paramView.getContext();
    paramView.setOnCreateContextMenuListener(this);
    localARViewer.openContextMenu(paramView);
  }
  
  public void showAsToolbarMenu(View paramView)
  {
    showAsDropDown(paramView, -1, 0);
  }
  
  private class MyDrawable
    extends StateListDrawable
  {
    private int mBackgroundColor;
    private int mBackgroundColorHL;
    private ImageView mCheckmarkView;
    private int mIconId;
    private int mIconIdHL;
    private ImageView mIconView;
    private int mTextColor;
    private int mTextColorHL;
    private TextView mTextView;
    
    MyDrawable(TableRow paramTableRow, int paramInt1, int paramInt2)
    {
      this$1 = paramTableRow.getContext().getResources();
      this.mBackgroundColor = BasePopupMenu.this.getColor(2131230739);
      this.mBackgroundColorHL = BasePopupMenu.this.getColor(2131230740);
      this.mTextColor = BasePopupMenu.this.getColor(2131230741);
      this.mTextColorHL = BasePopupMenu.this.getColor(2131230742);
      this.mIconId = paramInt1;
      this.mIconIdHL = paramInt2;
      this.mIconView = ((ImageView)paramTableRow.getChildAt(0));
      this.mTextView = ((TextView)paramTableRow.getChildAt(1));
      this.mCheckmarkView = ((ImageView)paramTableRow.getChildAt(2));
    }
    
    public void draw(Canvas paramCanvas)
    {
      if (isPressed(getState()))
      {
        paramCanvas.drawColor(this.mBackgroundColorHL);
        return;
      }
      paramCanvas.drawColor(this.mBackgroundColor);
    }
    
    protected boolean isPressed(int[] paramArrayOfInt)
    {
      int i = 0;
      for (;;)
      {
        if (i >= paramArrayOfInt.length) {
          return false;
        }
        if (paramArrayOfInt[i] == 16842919) {
          return true;
        }
        i += 1;
      }
    }
    
    protected boolean onStateChange(int[] paramArrayOfInt)
    {
      if (this.mTextView != null)
      {
        if (!isPressed(paramArrayOfInt)) {
          break label59;
        }
        this.mTextView.setTextColor(this.mTextColorHL);
        if (this.mIconIdHL != 0) {
          this.mIconView.setImageResource(this.mIconIdHL);
        }
        this.mCheckmarkView.setImageResource(2130837673);
      }
      for (;;)
      {
        invalidateSelf();
        return false;
        label59:
        this.mTextView.setTextColor(this.mTextColor);
        this.mIconView.setImageResource(this.mIconId);
        this.mCheckmarkView.setImageResource(2130837674);
      }
    }
  }
  
  private class MyMenuData
  {
    public boolean mIsCheckable;
    public boolean mIsChecked;
    public int mMenuId;
    public String mText;
    
    MyMenuData(int paramInt, String paramString, boolean paramBoolean1, boolean paramBoolean2)
    {
      this.mMenuId = paramInt;
      this.mText = paramString;
      this.mIsChecked = paramBoolean1;
      this.mIsCheckable = paramBoolean2;
    }
  }
  
  private class MyShadowDrawable
    extends ColorDrawable
  {
    private Paint mPaint = new Paint();
    
    MyShadowDrawable() {}
    
    public void draw(Canvas paramCanvas)
    {
      Rect localRect = paramCanvas.getClipBounds();
      localRect.left += 3;
      localRect.top += 3;
      this.mPaint.setColor(268435456);
      paramCanvas.drawRect(localRect, this.mPaint);
      localRect.offset(-1, -1);
      this.mPaint.setColor(536870912);
      paramCanvas.drawRect(localRect, this.mPaint);
      localRect.offset(-1, -1);
      this.mPaint.setColor(805306368);
      paramCanvas.drawRect(localRect, this.mPaint);
      localRect.offset(-1, -1);
      this.mPaint.setColor(-2144128205);
      paramCanvas.drawRect(localRect, this.mPaint);
    }
  }
}
