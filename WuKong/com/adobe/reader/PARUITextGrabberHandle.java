package com.adobe.reader;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.PointF;
import android.os.Handler;
import android.os.Message;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.ViewGroup.LayoutParams;
import android.widget.RelativeLayout.LayoutParams;

class PARUITextGrabberHandle
  extends View
  implements IPlatformView
{
  private static final int GRABBER_HIT_AREA_BUFFER = 20;
  private static final int REQUEST_LAYOUT_MSG = 1;
  private Bitmap mGrabberIcon;
  private double[] mGrabberPoints;
  private int mHeight;
  private boolean mIsStartGrabber;
  private int mPageNum;
  private PageView mPageView;
  private Handler mRequestLayoutHandler;
  private int mRotation;
  private PARTextSelectorAndroid mTextSelectorAndroid;
  private int mWidth;
  
  PARUITextGrabberHandle(Context paramContext)
  {
    super(paramContext);
    setFocusable(true);
    this.mGrabberPoints = new double[4];
    if (this.mIsStartGrabber) {}
    for (this.mGrabberIcon = BitmapFactory.decodeResource(paramContext.getResources(), 2130837553);; this.mGrabberIcon = BitmapFactory.decodeResource(paramContext.getResources(), 2130837554))
    {
      this.mHeight = 0;
      this.mWidth = 0;
      this.mRequestLayoutHandler = new Handler()
      {
        public void handleMessage(Message paramAnonymousMessage)
        {
          switch (paramAnonymousMessage.what)
          {
          }
          for (;;)
          {
            super.handleMessage(paramAnonymousMessage);
            return;
            PARUITextGrabberHandle.this.requestLayout();
          }
        }
      };
      return;
    }
  }
  
  private void handleTouchEnd()
  {
    this.mTextSelectorAndroid.drawContextualMenu();
  }
  
  private void handleTouchMove(float paramFloat1, float paramFloat2)
  {
    this.mTextSelectorAndroid.getHandlesNextPosition(paramFloat1, paramFloat2, this.mIsStartGrabber, this.mPageNum);
  }
  
  private void updateGrabberPosition()
  {
    Object localObject = this.mPageView.getDocViewManager().convertPointFromDocumentSpaceToDeviceSpace(this.mGrabberPoints[0], this.mGrabberPoints[1], this.mPageNum);
    PointF localPointF = this.mPageView.getDocViewManager().convertPointFromDocumentSpaceToDeviceSpace(this.mGrabberPoints[2], this.mGrabberPoints[3], this.mPageNum);
    int j;
    int i;
    label126:
    double d4;
    double d3;
    double d2;
    double d5;
    double d1;
    if (this.mIsStartGrabber)
    {
      j = 0;
      if (Math.abs(((PointF)localObject).x - localPointF.x) >= Math.abs(((PointF)localObject).y - localPointF.y)) {
        break label422;
      }
      i = j;
      if (((PointF)localObject).y > localPointF.y) {
        i = j + 180;
      }
      this.mRotation = (i % 360);
      d4 = ((PointF)localObject).x;
      d3 = ((PointF)localObject).y;
      d2 = localPointF.x;
      d5 = localPointF.y;
      if (d3 <= d5) {
        break label592;
      }
      d1 = d5;
    }
    for (;;)
    {
      if (d4 > d2) {}
      for (;;)
      {
        i = this.mGrabberIcon.getWidth();
        j = this.mGrabberIcon.getHeight();
        double d6;
        switch (this.mRotation)
        {
        default: 
          d6 = i / 2;
          d4 = d2 - i / 2;
          d5 = d1 - j;
          d2 = d6 + d2;
          d1 = d3;
          d3 = d5;
        }
        for (;;)
        {
          d4 -= 20.0D;
          d3 -= 20.0D;
          this.mWidth = ((int)(d2 + 20.0D - d4));
          this.mHeight = ((int)(d1 + 20.0D - d3));
          localObject = (RelativeLayout.LayoutParams)getLayoutParams();
          ((RelativeLayout.LayoutParams)localObject).width = this.mWidth;
          ((RelativeLayout.LayoutParams)localObject).height = this.mHeight;
          ((RelativeLayout.LayoutParams)localObject).leftMargin = ((int)(this.mPageView.getScrollX() + d4));
          ((RelativeLayout.LayoutParams)localObject).topMargin = ((int)(this.mPageView.getScrollY() + d3));
          setLayoutParams((ViewGroup.LayoutParams)localObject);
          this.mRequestLayoutHandler.removeMessages(1);
          localObject = Message.obtain();
          ((Message)localObject).what = 1;
          this.mRequestLayoutHandler.sendMessage((Message)localObject);
          return;
          j = 180;
          break;
          label422:
          if (((PointF)localObject).x >= localPointF.x)
          {
            i = j + 90;
            break label126;
          }
          i = j + 270;
          break label126;
          double d7 = i;
          d6 = j / 2 + d1;
          d3 = d1 - j / 2;
          d5 = d2;
          d2 = d7 + d4;
          d1 = d6;
          d4 = d5;
          continue;
          d6 = i / 2;
          d4 = i / 2;
          d5 = j + d3;
          d3 = d1;
          d4 = d2 - d4;
          d2 += d6;
          d1 = d5;
          continue;
          d5 = d2 - i;
          d6 = j / 2;
          d3 = d1 - j / 2;
          d2 = d4;
          d1 = d6 + d1;
          d4 = d5;
        }
        d5 = d4;
        d4 = d2;
        d2 = d5;
      }
      label592:
      d1 = d3;
      d3 = d5;
    }
  }
  
  public void adjustToTheNewScroll() {}
  
  public void adjustToTheNewZoom()
  {
    updateGrabberPosition();
  }
  
  public double[] getGrabberPoints()
  {
    return this.mGrabberPoints;
  }
  
  public int getPageNum()
  {
    return this.mPageNum;
  }
  
  public PageView getPageView()
  {
    return this.mPageView;
  }
  
  public boolean isStartGrabber()
  {
    return this.mIsStartGrabber;
  }
  
  protected void onDraw(Canvas paramCanvas)
  {
    super.onDraw(paramCanvas);
    int i2 = this.mGrabberIcon.getWidth();
    int j = this.mGrabberIcon.getHeight();
    int i = this.mWidth - 40;
    int i1 = this.mHeight - 40;
    int m;
    int n;
    int k;
    switch (this.mRotation)
    {
    default: 
      i1 -= j;
      m = j + 20;
      n = 20;
      j = 20;
      i2 = 20;
      k = i;
      i = i2;
    }
    Paint localPaint;
    for (;;)
    {
      localPaint = new Paint(2);
      paramCanvas.drawBitmap(this.mGrabberIcon, j, i, localPaint);
      localPaint = new Paint();
      localPaint.setColor(-16776961);
      localPaint.setStrokeWidth(2.0F);
      if ((this.mRotation != 0) && (this.mRotation != 180)) {
        break;
      }
      paramCanvas.drawLine(k / 2 + n, m, k / 2 + n, i1 + m, localPaint);
      return;
      j = this.mWidth - 20 - i2;
      m = 20;
      n = 20;
      k = 20;
      i2 = i - i2;
      i = k;
      k = i2;
      continue;
      k = this.mHeight;
      i1 -= j;
      m = 20;
      n = 20;
      i2 = k - 20 - j;
      j = 20;
      k = i;
      i = i2;
      continue;
      m = 20;
      n = i2 + 20;
      j = 20;
      k = i - i2;
      i = 20;
    }
    paramCanvas.drawLine(n, i1 / 2 + m, k + n, i1 / 2 + m, localPaint);
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    super.onMeasure(View.MeasureSpec.makeMeasureSpec(this.mWidth, 1073741824), View.MeasureSpec.makeMeasureSpec(this.mHeight, 1073741824));
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    switch (paramMotionEvent.getAction())
    {
    }
    for (;;)
    {
      return true;
      handleTouchMove(paramMotionEvent.getRawX(), paramMotionEvent.getRawY());
      continue;
      handleTouchEnd();
    }
  }
  
  public void panEnded() {}
  
  public void panStarted() {}
  
  public void setGrabberDocLocation(double[] paramArrayOfDouble)
  {
    int j = 0;
    if ((paramArrayOfDouble == null) || (paramArrayOfDouble.length != 4)) {
      return;
    }
    int i = 0;
    for (;;)
    {
      if (i >= 4)
      {
        if (j == 0) {
          break;
        }
        updateGrabberPosition();
        return;
      }
      if (this.mGrabberPoints[i] != paramArrayOfDouble[i])
      {
        this.mGrabberPoints[i] = paramArrayOfDouble[i];
        j = 1;
      }
      i += 1;
    }
  }
  
  public void setIsStartGrabber(boolean paramBoolean)
  {
    this.mIsStartGrabber = paramBoolean;
  }
  
  public void setPageNum(int paramInt)
  {
    this.mPageNum = paramInt;
  }
  
  public void setPageView(PageView paramPageView)
  {
    this.mPageView = paramPageView;
  }
  
  public void setTextSelectorAndroid(PARTextSelectorAndroid paramPARTextSelectorAndroid)
  {
    this.mTextSelectorAndroid = paramPARTextSelectorAndroid;
  }
}
