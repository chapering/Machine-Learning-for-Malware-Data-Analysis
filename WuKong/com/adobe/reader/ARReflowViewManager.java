package com.adobe.reader;

import android.graphics.Canvas;
import android.graphics.Rect;

public class ARReflowViewManager
{
  private ARDocViewManager mDocViewManager;
  private long mNativeReflowViewManager;
  private ReflowView mReflowView;
  
  public ARReflowViewManager(ARDocViewManager paramARDocViewManager, ReflowView paramReflowView, float paramFloat)
  {
    this.mReflowView = paramReflowView;
    this.mDocViewManager = paramARDocViewManager;
    this.mNativeReflowViewManager = create(paramARDocViewManager.getNativeDocViewManager(), paramFloat);
  }
  
  private native boolean canDecreaseFontSize(long paramLong);
  
  private native boolean canIncreaseFontSize(long paramLong);
  
  private void checkReflowViewManager()
  {
    if (this.mNativeReflowViewManager == 0L) {
      throw new IllegalStateException();
    }
  }
  
  private native long create(long paramLong, float paramFloat);
  
  private native void decreaseFontSize(long paramLong);
  
  private native void destroy(long paramLong1, long paramLong2);
  
  private native int getCurrentPageNum(long paramLong);
  
  private native void gotoFirstScreenOfPage(long paramLong, int paramInt);
  
  private native void gotoNextScreen(long paramLong);
  
  private native void gotoPreviousScreen(long paramLong);
  
  private native void handleCurrentScreenChange(long paramLong, int paramInt);
  
  private native void handleDoubleTap(long paramLong);
  
  private native void handleScreenSizeChange(long paramLong, int paramInt1, int paramInt2);
  
  private native void increaseFontSize(long paramLong);
  
  private native void paintCanvas(long paramLong, Canvas paramCanvas, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8);
  
  public boolean canDecreaseFontSize()
  {
    checkReflowViewManager();
    return canDecreaseFontSize(this.mNativeReflowViewManager);
  }
  
  public boolean canIncreaseFontSize()
  {
    checkReflowViewManager();
    return canIncreaseFontSize(this.mNativeReflowViewManager);
  }
  
  public void decreaseFontSize()
  {
    checkReflowViewManager();
    decreaseFontSize(this.mNativeReflowViewManager);
  }
  
  int getCurrentPageNum()
  {
    checkReflowViewManager();
    return getCurrentPageNum(this.mNativeReflowViewManager);
  }
  
  public void gotoFirstScreenOfPage(int paramInt)
  {
    checkReflowViewManager();
    gotoFirstScreenOfPage(this.mNativeReflowViewManager, paramInt);
  }
  
  public void gotoNextScreen()
  {
    checkReflowViewManager();
    gotoNextScreen(this.mNativeReflowViewManager);
  }
  
  public void gotoPreviousScreen()
  {
    checkReflowViewManager();
    gotoPreviousScreen(this.mNativeReflowViewManager);
  }
  
  public void handleCurrentScreenChange(int paramInt)
  {
    handleCurrentScreenChange(this.mNativeReflowViewManager, paramInt);
  }
  
  public void handleDoubleTap()
  {
    checkReflowViewManager();
    handleDoubleTap(this.mNativeReflowViewManager);
  }
  
  public void handleScreenSizeChange(int paramInt1, int paramInt2)
  {
    handleScreenSizeChange(this.mNativeReflowViewManager, paramInt1, paramInt2);
  }
  
  public void increaseFontSize()
  {
    checkReflowViewManager();
    increaseFontSize(this.mNativeReflowViewManager);
  }
  
  public void notifyScreenContentChanged()
  {
    this.mReflowView.invalidate();
  }
  
  public void paintCanvas(Canvas paramCanvas, Rect paramRect1, Rect paramRect2)
  {
    checkReflowViewManager();
    paintCanvas(this.mNativeReflowViewManager, paramCanvas, paramRect1.left, paramRect1.top, paramRect1.right, paramRect1.bottom, paramRect2.left, paramRect2.top, paramRect2.right, paramRect2.bottom);
  }
  
  public void release()
  {
    checkReflowViewManager();
    destroy(this.mNativeReflowViewManager, this.mDocViewManager.getNativeDocViewManager());
    this.mNativeReflowViewManager = 0L;
  }
}
