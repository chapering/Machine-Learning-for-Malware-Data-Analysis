package com.adobe.reader;

import android.content.res.Resources;
import android.os.Bundle;
import android.support.v4.app.ListFragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import com.adobe.reader.cloud.network.CloudNetworkManager;
import com.adobe.reader.cloud.ui.CloudTransferListViewManager;
import java.util.ArrayList;

public class LeftPaneFragment
  extends ListFragment
{
  public static final int LEFT_PANE_CLOUD_POS = 2;
  private static final int LEFT_PANE_MAX_ENTRIES = 5;
  private static final int LEFT_PANE_OUTBOX_POS = 3;
  private LeftPaneEntryAdapter mLeftPaneEntryAdapter = null;
  private ArrayList<LeftPaneEntry> mLeftPaneEntryList = null;
  private LeftPaneEntryClickListener mListener = null;
  
  public LeftPaneFragment() {}
  
  private int modifyLeftPaneOnSelection(int paramInt)
  {
    int k = 0;
    int m = this.mLeftPaneEntryAdapter.getCount();
    int i;
    int j;
    if ((m == 5) && (!CloudTransferListViewManager.showOutboxInLeftPane()) && (paramInt != 3))
    {
      i = 1;
      j = k;
      if (m < 5)
      {
        j = k;
        if (CloudTransferListViewManager.showOutboxInLeftPane()) {
          j = 1;
        }
      }
      if ((i == 0) || (paramInt <= 3)) {
        break label119;
      }
      paramInt -= 1;
    }
    label119:
    for (;;)
    {
      k = paramInt;
      if (j != 0)
      {
        k = paramInt;
        if (paramInt >= 3) {
          k = paramInt + 1;
        }
      }
      if ((i != 0) || (j != 0))
      {
        this.mLeftPaneEntryList.clear();
        prepareLeftPaneEntryList();
        this.mLeftPaneEntryAdapter.notifyDataSetChanged();
      }
      return k;
      i = 0;
      break;
    }
  }
  
  private ArrayList<LeftPaneEntry> prepareLeftPaneEntryList()
  {
    if (this.mLeftPaneEntryList == null) {
      this.mLeftPaneEntryList = new ArrayList();
    }
    this.mLeftPaneEntryList.add(new LeftPaneEntry(2131361899, 2130837774));
    this.mLeftPaneEntryList.add(new LeftPaneEntry(2131361900, 2130837620));
    this.mLeftPaneEntryList.add(new LeftPaneEntry(2131361901, 2130837602));
    if ((CloudNetworkManager.isSignedIn()) && (CloudTransferListViewManager.showOutboxInLeftPane())) {
      this.mLeftPaneEntryList.add(new LeftPaneEntry(2131361902, 2130837760));
    }
    this.mLeftPaneEntryList.add(new LeftPaneEntry(2131362024, 2130837844));
    return this.mLeftPaneEntryList;
  }
  
  public void enablePersistentSelection()
  {
    getListView().setChoiceMode(1);
  }
  
  public int getSelectedPosition()
  {
    return this.mLeftPaneEntryAdapter.getSelectedPosition();
  }
  
  public void onActivityCreated(Bundle paramBundle)
  {
    super.onActivityCreated(paramBundle);
    prepareLeftPaneEntryList();
    this.mLeftPaneEntryAdapter = new LeftPaneEntryAdapter();
    setListAdapter(this.mLeftPaneEntryAdapter);
    this.mLeftPaneEntryAdapter.setSelectedPosition(0);
  }
  
  public void onListItemClick(ListView paramListView, View paramView, int paramInt, long paramLong)
  {
    paramListView.setItemChecked(paramInt, true);
    setLeftPaneSelectedEntry(paramInt);
  }
  
  public void onSaveInstanceState(Bundle paramBundle)
  {
    paramBundle.putInt("com.adobe.reader.LAST_SELECTED_ENTRY", getListView().getCheckedItemPosition());
  }
  
  public void refresh()
  {
    int i = modifyLeftPaneOnSelection(this.mLeftPaneEntryAdapter.getSelectedPosition());
    this.mLeftPaneEntryAdapter.setSelectedPosition(i);
  }
  
  public void setLeftPaneEntryClickListener(LeftPaneEntryClickListener paramLeftPaneEntryClickListener)
  {
    this.mListener = paramLeftPaneEntryClickListener;
  }
  
  public void setLeftPaneSelectedEntry(int paramInt)
  {
    paramInt = modifyLeftPaneOnSelection(paramInt);
    this.mLeftPaneEntryAdapter.setSelectedPosition(paramInt);
    if (this.mListener != null) {
      this.mListener.onLeftPaneEntryClicked((LeftPaneEntry)this.mLeftPaneEntryList.get(paramInt));
    }
  }
  
  public static class LeftPaneEntry
  {
    public int mEntryIconResID;
    public int mEntryTitleResID;
    
    LeftPaneEntry(int paramInt1, int paramInt2)
    {
      this.mEntryTitleResID = paramInt1;
      this.mEntryIconResID = paramInt2;
    }
  }
  
  class LeftPaneEntryAdapter
    extends ArrayAdapter<LeftPaneFragment.LeftPaneEntry>
  {
    private int mSelectedPosition = -1;
    
    LeftPaneEntryAdapter()
    {
      super(2130903065, 2131493001, LeftPaneFragment.this.mLeftPaneEntryList);
    }
    
    private void setSelectedPosition(int paramInt)
    {
      this.mSelectedPosition = paramInt;
      notifyDataSetChanged();
    }
    
    public int getSelectedPosition()
    {
      return this.mSelectedPosition;
    }
    
    public View getView(int paramInt, View paramView, ViewGroup paramViewGroup)
    {
      View localView;
      if (paramView == null)
      {
        localView = LayoutInflater.from(LeftPaneFragment.this.getActivity()).inflate(2130903065, null);
        paramView = new LeftPaneFragment.LeftPaneEntryWrapper(localView);
        localView.setTag(paramView);
        paramViewGroup = paramView;
      }
      for (;;)
      {
        LeftPaneFragment.LeftPaneEntryWrapper.access$0(paramViewGroup, (LeftPaneFragment.LeftPaneEntry)getItem(paramInt));
        if (this.mSelectedPosition != paramInt) {
          break;
        }
        paramViewGroup.getEntryTitle().setTextColor(LeftPaneFragment.this.getResources().getColor(2131230720));
        LeftPaneFragment.LeftPaneEntryWrapper.access$1(paramViewGroup, LeftPaneFragment.this.getResources().getColor(2131230832));
        return localView;
        paramViewGroup = (LeftPaneFragment.LeftPaneEntryWrapper)paramView.getTag();
        localView = paramView;
      }
      paramViewGroup.getEntryTitle().setTextColor(LeftPaneFragment.this.getResources().getColor(2131230833));
      LeftPaneFragment.LeftPaneEntryWrapper.access$1(paramViewGroup, LeftPaneFragment.this.getResources().getColor(2131230831));
      return localView;
    }
  }
  
  public static abstract interface LeftPaneEntryClickListener
  {
    public abstract void onLeftPaneEntryClicked(LeftPaneFragment.LeftPaneEntry paramLeftPaneEntry);
  }
  
  static class LeftPaneEntryWrapper
  {
    private ImageView mEntryIcon = null;
    private LinearLayout mEntryLayout = null;
    private TextView mEntryTitle = null;
    
    LeftPaneEntryWrapper(View paramView)
    {
      this.mEntryTitle = ((TextView)paramView.findViewById(2131493001));
      this.mEntryIcon = ((ImageView)paramView.findViewById(2131493000));
      this.mEntryLayout = ((LinearLayout)paramView.findViewById(2131492999));
    }
    
    private void populateFrom(LeftPaneFragment.LeftPaneEntry paramLeftPaneEntry)
    {
      getEntryTitle().setText(paramLeftPaneEntry.mEntryTitleResID);
      getEntryIcon().setImageResource(paramLeftPaneEntry.mEntryIconResID);
    }
    
    private void setLeftPaneEntryBackgroundColor(int paramInt)
    {
      getEntryLayout().setBackgroundColor(paramInt);
    }
    
    ImageView getEntryIcon()
    {
      return this.mEntryIcon;
    }
    
    LinearLayout getEntryLayout()
    {
      return this.mEntryLayout;
    }
    
    TextView getEntryTitle()
    {
      return this.mEntryTitle;
    }
  }
}
