package com.adobe.reader;

import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;

class PAROffscreen
{
  private Bitmap mBitmap = null;
  private int mHeight;
  private int mWidth;
  
  public PAROffscreen(int paramInt1, int paramInt2)
  {
    this.mWidth = paramInt1;
    this.mHeight = paramInt2;
    tryToAllocateBitmap();
  }
  
  private void tryToAllocateBitmap()
  {
    try
    {
      this.mBitmap = Bitmap.createBitmap(this.mWidth, this.mHeight, Bitmap.Config.RGB_565);
      if (this.mBitmap != null) {
        fill(0, 0, this.mWidth, this.mHeight, 16777215);
      }
      return;
    }
    catch (IllegalArgumentException localIllegalArgumentException)
    {
      for (;;) {}
    }
    catch (OutOfMemoryError localOutOfMemoryError)
    {
      for (;;) {}
    }
  }
  
  public void fill(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5)
  {
    if (this.mBitmap != null) {}
    try
    {
      this.mBitmap.eraseColor(0xFF000000 | paramInt5);
      return;
    }
    catch (IllegalStateException localIllegalStateException) {}
  }
  
  public Bitmap getBitmap()
  {
    return this.mBitmap;
  }
  
  public int[] getPixels()
  {
    int[] arrayOfInt2 = ARApp.getARApp().getBitmapPool().getPixelBuffer(this.mWidth, this.mHeight);
    int[] arrayOfInt1;
    if (arrayOfInt2 == null) {
      arrayOfInt1 = null;
    }
    do
    {
      return arrayOfInt1;
      if (this.mBitmap == null) {
        tryToAllocateBitmap();
      }
      arrayOfInt1 = arrayOfInt2;
    } while (this.mBitmap == null);
    try
    {
      this.mBitmap.getPixels(arrayOfInt2, 0, this.mWidth, 0, 0, this.mWidth, this.mHeight);
      return arrayOfInt2;
    }
    catch (IllegalArgumentException localIllegalArgumentException)
    {
      return arrayOfInt2;
    }
    catch (ArrayIndexOutOfBoundsException localArrayIndexOutOfBoundsException) {}
    return arrayOfInt2;
  }
  
  public void setPixels(int[] paramArrayOfInt)
  {
    if (paramArrayOfInt == null) {}
    while (this.mBitmap == null) {
      return;
    }
    try
    {
      this.mBitmap.setPixels(paramArrayOfInt, 0, this.mWidth, 0, 0, this.mWidth, this.mHeight);
      return;
    }
    catch (IllegalStateException paramArrayOfInt) {}catch (ArrayIndexOutOfBoundsException paramArrayOfInt) {}catch (IllegalArgumentException paramArrayOfInt) {}
  }
}
