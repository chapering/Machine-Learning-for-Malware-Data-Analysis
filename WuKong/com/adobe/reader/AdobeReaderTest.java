package com.adobe.reader;

import android.app.Instrumentation;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.os.Bundle;
import android.os.Environment;
import android.os.SystemClock;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.WindowManager;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;

public class AdobeReaderTest
  extends Instrumentation
  implements DialogInterface.OnClickListener
{
  static final String APP_PRIVATE_AREA = "/data/data/com.adobe.reader";
  static final String LOG_TAG = "AUTOMATION";
  static final String TEST_DATA = Environment.getExternalStorageDirectory().getAbsolutePath() + "/PDF";
  public static AdobeReaderTest abTest;
  public int TEST_TYPE = 0;
  private boolean flag = false;
  public int iCount = 0;
  public Instrumentation instr;
  public Long lbgid;
  public ARViewer mActivity;
  private AlertDlg mCompleteDlg = null;
  PageView.MultiTouchInfo mCurrTouchPoint = new PageView.MultiTouchInfo();
  private ARDocViewManager mDocViewManager;
  public PageView mPageView;
  PageView.MultiTouchInfo mPrevTouchPoint = new PageView.MultiTouchInfo();
  private final Object mSyncObj = new Object();
  PageView.TouchMode mTouchMode;
  public ZoomMode mZoomMode;
  
  public AdobeReaderTest() {}
  
  public File[] PDF_Lists()
  {
    File localFile = new File(TEST_DATA);
    Object localObject1 = ARFileBrowserUtils.getPermanentStorageDownloadDirectory();
    File[] arrayOfFile1 = (File[])null;
    File[] arrayOfFile2 = (File[])null;
    Object localObject2 = (File[])null;
    if ((localFile.exists()) && (localFile.isDirectory())) {
      arrayOfFile1 = localFile.listFiles(ARFileBrowserUtils.PDF_FILE_FILTER);
    }
    for (;;)
    {
      if ((((File)localObject1).exists()) && (((File)localObject1).isDirectory())) {
        arrayOfFile2 = ((File)localObject1).listFiles(ARFileBrowserUtils.PDF_FILE_FILTER);
      }
      for (;;)
      {
        if ((arrayOfFile1 == null) && (arrayOfFile2 == null)) {
          localObject2 = (File[])null;
        }
        for (;;)
        {
          localObject1 = localObject2;
          if (arrayOfFile1 == null)
          {
            localObject1 = localObject2;
            if (arrayOfFile2 != null) {
              localObject1 = arrayOfFile2;
            }
          }
          localObject2 = localObject1;
          if (arrayOfFile1 != null)
          {
            localObject2 = localObject1;
            if (arrayOfFile2 == null) {
              localObject2 = arrayOfFile1;
            }
          }
          localObject1 = localObject2;
          if (arrayOfFile1 != null)
          {
            localObject1 = localObject2;
            if (arrayOfFile2 != null)
            {
              localObject1 = new File[arrayOfFile1.length + arrayOfFile2.length];
              System.arraycopy(arrayOfFile1, 0, localObject1, 0, arrayOfFile1.length);
              System.arraycopy(arrayOfFile2, 0, localObject1, arrayOfFile1.length, arrayOfFile2.length);
              arrayOfFile1 = (File[])null;
              arrayOfFile1 = (File[])null;
            }
          }
          return localObject1;
        }
      }
    }
  }
  
  public void alert_completion()
  {
    if (this.mPageView == null) {
      this.mPageView = ((PageView)this.mActivity.findViewById(2131492873));
    }
    this.mCompleteDlg = new AlertDlg(this.mPageView.getContext());
    this.mCompleteDlg.setCancelable(false);
    this.mCompleteDlg.setTitle("AUTOMATION");
    this.mCompleteDlg.setButton(-1, "OK", this);
    this.mCompleteDlg.setMessage("SUCCESS:Test run complete");
    this.mCompleteDlg.show();
  }
  
  public void executeTests(File[] paramArrayOfFile)
  {
    Log.d("AUTOMATION", "inside execute test");
    if (paramArrayOfFile == null) {
      return;
    }
    int m = paramArrayOfFile.length;
    if (m == 0)
    {
      Log.d("AUTOMATION", "Please insert some test files");
      return;
    }
    int j = 0;
    i = j;
    for (;;)
    {
      try
      {
        Log.d("AUTOMATION", "Value of TEST_TYPE :" + this.TEST_TYPE);
        i = j;
        Object localObject = new DataInputStream(new FileInputStream("/data/data/com.adobe.reader/filecount"));
        i = j;
        Log.d("AUTOMATION", "before readline");
        i = j;
        String str = ((DataInputStream)localObject).readLine();
        i = j;
        ((DataInputStream)localObject).close();
        k = j;
        if (str != null)
        {
          i = j;
          localObject = new DataInputStream(new FileInputStream("/data/data/com.adobe.reader/filecount"));
          i = j;
          k = ((DataInputStream)localObject).readInt();
          i = k;
          Log.d("AUTOMATION", "value of icnt " + k);
          i = k;
          ((DataInputStream)localObject).close();
        }
        i = k;
        Log.d("AUTOMATION", "before writing " + k);
        i = k;
        localObject = new DataOutputStream(new FileOutputStream("/data/data/com.adobe.reader/filecount", false));
        i = k;
        ((DataOutputStream)localObject).writeInt(k + 1);
        i = k;
        ((DataOutputStream)localObject).close();
        i = k;
        Log.d("AUTOMATION", "after writing " + (k + 1));
        if (k + 1 <= m)
        {
          i = k;
          localObject = new BufferedWriter(new FileWriter("/data/data/com.adobe.reader/crashfilename.txt"));
          i = k;
          ((BufferedWriter)localObject).write(paramArrayOfFile[k].getName() + " " + this.TEST_TYPE);
          i = k;
          ((BufferedWriter)localObject).close();
          i = k;
          j = this.TEST_TYPE;
          switch (j)
          {
          }
        }
      }
      catch (Exception localException)
      {
        int k;
        boolean bool;
        localException.printStackTrace();
        continue;
        i = k;
        testPinchZoom(paramArrayOfFile[k]);
        continue;
        i = k;
        testRandom(paramArrayOfFile[k]);
        continue;
        i = k;
        getStickyNoteParams(paramArrayOfFile[k], 0, 640, 376);
        continue;
        i = k;
        testRendering(paramArrayOfFile[k]);
        continue;
      }
      i = k + 1;
      j = i;
      if (i < m) {
        break;
      }
      bool = new File("/data/data/com.adobe.reader/filecount").delete();
      Log.d("AUTOMATION", "calling the alert dialog after deleting file gracefully " + bool);
      ARAutomation.PDF_TO_PNG = false;
      this.mActivity.runOnUiThread(new Runnable()
      {
        public void run()
        {
          AdobeReaderTest.this.alert_completion();
        }
      });
      return;
      i = k;
      handleNavigation(paramArrayOfFile[k]);
    }
  }
  
  public Intent getNextFileIntent(File paramFile)
  {
    Intent localIntent = new Intent(getTargetContext(), ARViewer.class);
    localIntent.addFlags(268435456);
    localIntent.putExtra("com.adobe.reader.ExternalContentData", paramFile.toString());
    return localIntent;
  }
  
  public void getStickyNoteParams(File paramFile, final int paramInt1, final int paramInt2, final int paramInt3)
  {
    if (this.mActivity != null)
    {
      paramFile = getNextFileIntent(paramFile);
      this.mActivity.startActivity(paramFile);
    }
    try
    {
      for (;;)
      {
        Thread.sleep(2000L);
        setInAppAutomationHandler(this.mActivity);
        ARFileBrowserUtils.clearRecentFileList(this.mActivity);
        this.mActivity.runOnUiThread(new Runnable()
        {
          public void run()
          {
            AdobeReaderTest.this.mPageView = ((PageView)AdobeReaderTest.this.mActivity.findViewById(2131492873));
            AdobeReaderTest.this.mDocViewManager = AdobeReaderTest.this.mPageView.getDocViewManager();
            CommentParams localCommentParams = AdobeReaderTest.this.mDocViewManager.getCommentManager().getStickyNoteHandler().getStickyNoteParams(paramInt1, paramInt2, paramInt3);
            if (localCommentParams != null) {
              Log.d("stickynotecontent", localCommentParams.getContent());
            }
            Log.d("stickynotecontent", localCommentParams.getAuthorName());
            Log.d("stickynotecontent", localCommentParams.getCommentCreationDate());
          }
        });
        return;
        this.mActivity = start_AdobeReader(paramFile);
      }
    }
    catch (InterruptedException paramFile)
    {
      for (;;)
      {
        paramFile.printStackTrace();
      }
    }
  }
  
  public void handleNavigation(File paramFile)
  {
    Log.d("AUTOMATION", "inside handleNavigation");
    if (this.mActivity != null)
    {
      Intent localIntent = getNextFileIntent(paramFile);
      this.mActivity.startActivity(localIntent);
    }
    try
    {
      Thread.sleep(1000L);
      this.mPageView = ((PageView)this.mActivity.findViewById(2131492873));
      setInAppAutomationHandler(this.mActivity);
      ARFileBrowserUtils.clearRecentFileList(this.mActivity);
    }
    catch (InterruptedException localInterruptedException)
    {
      try
      {
        for (;;)
        {
          Thread.sleep(1000L);
          if (this.mPageView != null)
          {
            i = 0;
            if ((!this.mPageView.instrumentIsScreenFullyPainted()) && (i < 30)) {
              break;
            }
          }
          i = this.mPageView.getViewMode();
          if (i != 2) {
            break label166;
          }
          test_nextpage(paramFile);
          return;
          this.mActivity = start_AdobeReader(paramFile);
        }
        localInterruptedException = localInterruptedException;
        localInterruptedException.printStackTrace();
      }
      catch (Exception localException1)
      {
        int i;
        label166:
        do
        {
          for (;;)
          {
            localException1.printStackTrace();
            continue;
            try
            {
              Thread.sleep(1000L);
              i += 1;
            }
            catch (Exception localException2)
            {
              for (;;)
              {
                localException2.printStackTrace();
              }
            }
          }
        } while (i != 1);
        testhandle_fling(paramFile);
      }
    }
  }
  
  public void handlePinchZoom(final float paramFloat1, final float paramFloat2, final float paramFloat3, final float paramFloat4, ZoomMode paramZoomMode)
  {
    final float f1;
    final float f2;
    final float f3;
    if (paramZoomMode == ZoomMode.ZOOM_IN)
    {
      f1 = 1.0F + paramFloat4;
      f2 = paramFloat2 - 1.0F;
      f3 = paramFloat3 + 1.0F;
    }
    for (final float f4 = paramFloat1 - 1.0F;; f4 = paramFloat1 + 1.0F)
    {
      this.mActivity.runOnUiThread(new Runnable()
      {
        public void run()
        {
          AdobeReaderTest.this.mCurrTouchPoint.set(paramFloat1, paramFloat2, paramFloat3, paramFloat4, 5, true, SystemClock.uptimeMillis());
          AdobeReaderTest.this.mPageView.setMultiTouchFocusAndScale();
        }
      });
      waitForIdleSync();
      this.mActivity.runOnUiThread(new Runnable()
      {
        public void run()
        {
          AdobeReaderTest.this.mPrevTouchPoint = AdobeReaderTest.this.mCurrTouchPoint;
          AdobeReaderTest.this.mCurrTouchPoint.set(f4, f2, f3, f1, 2, true, SystemClock.uptimeMillis());
        }
      });
      waitForIdleSync();
      this.mActivity.runOnUiThread(new Runnable()
      {
        public void run()
        {
          AdobeReaderTest.this.mPageView.mTouchMode = PageView.TouchMode.MODE_PINCH;
          AdobeReaderTest.this.mPageView.onMultiTouchBegin();
        }
      });
      waitForIdleSync();
      this.mActivity.runOnUiThread(new Runnable()
      {
        public void run()
        {
          AdobeReaderTest.this.mPageView.onMultiTouchDragOrPinch();
          AdobeReaderTest.this.mCurrTouchPoint.set(f4, f2, f3, f1, 6, false, SystemClock.uptimeMillis());
          AdobeReaderTest.this.mPageView.mTouchMode = PageView.TouchMode.MODE_NONE;
          AdobeReaderTest.this.mPageView.onMultiTouchEnd();
        }
      });
      waitForIdleSync();
      return;
      f1 = paramFloat4 - 1.0F;
      f2 = paramFloat2 + 1.0F;
      f3 = paramFloat3 - 1.0F;
    }
  }
  
  public void notifyThread()
  {
    Log.d("AUTOMATION", "notifyThread flag = " + this.flag + Integer.toHexString(System.identityHashCode(this)));
    synchronized (this.mSyncObj)
    {
      this.mSyncObj.notifyAll();
      return;
    }
  }
  
  public void onClick(DialogInterface paramDialogInterface, int paramInt)
  {
    paramDialogInterface.dismiss();
    if (this.mActivity != null) {
      this.mActivity.runOnUiThread(new Runnable()
      {
        public void run()
        {
          AdobeReaderTest.this.mActivity.finish();
        }
      });
    }
  }
  
  public void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    abTest = this;
    Log.d("AUTOMATION", "AdobeReader Instrumenation calling onStart");
    if (paramBundle != null) {
      this.TEST_TYPE = paramBundle.getInt("TEST_TYPE");
    }
    if (paramBundle.getBoolean("PDF_TO_PNG"))
    {
      ARAutomation.PDF_TO_PNG = true;
      ARAutomation.DISABLE_JS_LOAD = true;
      Log.d("AUTOMATION", "pdf_to_png set to true");
    }
    try
    {
      new FileOutputStream("/data/data/com.adobe.reader/filecount", true).close();
      start();
      return;
    }
    catch (Exception paramBundle)
    {
      for (;;)
      {
        paramBundle.printStackTrace();
      }
    }
  }
  
  public void onStart()
  {
    super.onStart();
    PageView.sdisableBounceAnim = true;
    executeTests(PDF_Lists());
  }
  
  public void performPan()
  {
    Log.d("AUTOMATION", "pan down by 0,100 for 5 times");
    int i = 0;
    for (;;)
    {
      if ((i >= 5) || (this.mPageView.getCurrentPageNumber() >= this.mPageView.getNumPages())) {
        return;
      }
      this.mActivity.runOnUiThread(new Runnable()
      {
        public void run()
        {
          AdobeReaderTest.this.mPageView.handleScroll(0, 100);
        }
      });
      waitForIdleSync();
      try
      {
        Thread.sleep(100L);
        i += 1;
      }
      catch (InterruptedException localInterruptedException)
      {
        for (;;)
        {
          localInterruptedException.printStackTrace();
        }
      }
    }
  }
  
  public void performZoomInPanZoomOut(float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4)
  {
    int j = (int)paramFloat1;
    int k = (int)paramFloat3;
    int i = (int)paramFloat2;
    int m = (int)paramFloat4;
    if (paramFloat1 <= paramFloat3)
    {
      this.mZoomMode = ZoomMode.ZOOM_IN;
      for (;;)
      {
        if ((j >= (int)paramFloat3) && (i >= (int)paramFloat4)) {}
        try
        {
          Thread.sleep(1000L);
          performPan();
          j = (int)paramFloat1;
          k = (int)paramFloat3;
          i = (int)paramFloat2;
          m = (int)paramFloat4;
          this.mZoomMode = ZoomMode.ZOOM_OUT;
          if ((j >= (int)paramFloat3) && (i >= (int)paramFloat4)) {}
          try
          {
            Thread.sleep(1000L);
            return;
          }
          catch (InterruptedException localInterruptedException4)
          {
            localInterruptedException4.printStackTrace();
            return;
          }
          Log.d("values", "are " + j + " " + i + " " + k + " " + m + " " + this.mZoomMode);
          handlePinchZoom(j, i, k, m, this.mZoomMode);
          try
          {
            Thread.sleep(10L);
            if (i >= (int)paramFloat4) {
              break label251;
            }
            if (j < (int)paramFloat3)
            {
              i += 5;
              j += 5;
            }
          }
          catch (InterruptedException localInterruptedException1)
          {
            for (;;)
            {
              localInterruptedException1.printStackTrace();
            }
            j = (int)paramFloat3;
            i += 5;
          }
          continue;
          label251:
          if (j < (int)paramFloat3)
          {
            i = (int)paramFloat4;
            j += 5;
          }
        }
        catch (InterruptedException localInterruptedException2)
        {
          for (;;)
          {
            localInterruptedException2.printStackTrace();
            continue;
            Log.d("values", "are " + j + " " + i + " " + k + " " + m + " " + this.mZoomMode);
            handlePinchZoom(j, i, k, m, this.mZoomMode);
            try
            {
              Thread.sleep(10L);
              if (i >= (int)paramFloat4) {
                break label432;
              }
              if (j < (int)paramFloat3)
              {
                i += 5;
                j += 5;
              }
            }
            catch (InterruptedException localInterruptedException3)
            {
              for (;;)
              {
                localInterruptedException3.printStackTrace();
              }
              j = (int)paramFloat3;
              i += 5;
            }
            continue;
            label432:
            if (j < (int)paramFloat3)
            {
              i = (int)paramFloat4;
              j += 5;
            }
          }
        }
      }
    }
    k = (int)paramFloat1;
    j = (int)paramFloat3;
    m = (int)paramFloat2;
    i = (int)paramFloat4;
    this.mZoomMode = ZoomMode.ZOOM_IN;
    for (;;)
    {
      if ((j >= (int)paramFloat1) && (i >= (int)paramFloat2)) {}
      try
      {
        Thread.sleep(1000L);
        performPan();
        k = (int)paramFloat1;
        j = (int)paramFloat3;
        m = (int)paramFloat2;
        i = (int)paramFloat4;
        this.mZoomMode = ZoomMode.ZOOM_OUT;
        if ((j >= (int)paramFloat1) && (i >= (int)paramFloat2))
        {
          try
          {
            Thread.sleep(1000L);
            return;
          }
          catch (InterruptedException localInterruptedException5)
          {
            localInterruptedException5.printStackTrace();
            return;
          }
          Log.d("values", "are " + k + " " + m + " " + j + " " + i + " " + this.mZoomMode);
          handlePinchZoom(j, i, k, m, this.mZoomMode);
          try
          {
            Thread.sleep(10L);
            if (i >= (int)paramFloat2) {
              break label711;
            }
            if (j < (int)paramFloat1)
            {
              i += 5;
              j += 5;
            }
          }
          catch (InterruptedException localInterruptedException6)
          {
            for (;;)
            {
              localInterruptedException6.printStackTrace();
            }
            j = (int)paramFloat1;
            i += 5;
          }
          continue;
          label711:
          if (j >= (int)paramFloat1) {
            continue;
          }
          i = (int)paramFloat2;
          j += 5;
        }
      }
      catch (InterruptedException localInterruptedException7)
      {
        for (;;)
        {
          localInterruptedException7.printStackTrace();
          continue;
          Log.d("values", "are " + k + " " + m + " " + j + " " + i + " " + this.mZoomMode);
          handlePinchZoom(j, i, k, m, this.mZoomMode);
          try
          {
            Thread.sleep(10L);
            if (i >= (int)paramFloat2) {
              break label890;
            }
            if (j < (int)paramFloat1)
            {
              i += 5;
              j += 5;
            }
          }
          catch (InterruptedException localInterruptedException8)
          {
            for (;;)
            {
              localInterruptedException8.printStackTrace();
            }
            j = (int)paramFloat1;
            i += 5;
          }
          continue;
          label890:
          if (j < (int)paramFloat1)
          {
            i = (int)paramFloat2;
            j += 5;
          }
        }
      }
    }
  }
  
  public void setInAppAutomationHandler(ARViewer paramARViewer)
  {
    try
    {
      Thread.setDefaultUncaughtExceptionHandler(new InAppAutomationHandler(paramARViewer));
      return;
    }
    catch (Exception paramARViewer)
    {
      paramARViewer.printStackTrace();
    }
  }
  
  public ARViewer start_AdobeReader(File paramFile)
  {
    Intent localIntent = new Intent(getTargetContext(), ARViewer.class);
    localIntent.addFlags(268435456);
    localIntent.putExtra("com.adobe.reader.ExternalContentData", paramFile.toString());
    Log.d("AUTOMATION", "just before start");
    paramFile = (ARViewer)startActivitySync(localIntent);
    Log.d("AUTOMATION", "just after start");
    return paramFile;
  }
  
  public void testPinchZoom(File paramFile)
  {
    int j = 0;
    if (this.mActivity != null)
    {
      paramFile = getNextFileIntent(paramFile);
      this.mActivity.startActivity(paramFile);
    }
    for (;;)
    {
      int i;
      try
      {
        Log.d("AUTOMATION", "starting sleep");
        Thread.sleep(2000L);
        Log.d("AUTOMATION", "just after sleep");
        waitForIdleSync();
        setInAppAutomationHandler(this.mActivity);
        ARFileBrowserUtils.clearRecentFileList(this.mActivity);
        this.mPageView = ((PageView)this.mActivity.findViewById(2131492873));
        i = 0;
        if ((this.mPageView.instrumentIsScreenFullyPainted()) || (i >= 30))
        {
          this.mCurrTouchPoint = this.mPageView.getmCurrTouchPoint();
          this.mPrevTouchPoint = this.mPageView.getmPrevTouchPoint();
          this.mTouchMode = this.mPageView.getmTouchMode();
          paramFile = new DisplayMetrics();
          this.mActivity.getWindowManager().getDefaultDisplay().getMetrics(paramFile);
          Log.d("dimensions", "width" + paramFile.widthPixels + " " + "height" + paramFile.heightPixels);
          if ((paramFile.widthPixels < 720) || (paramFile.heightPixels < 1024)) {
            continue;
          }
          performZoomInPanZoomOut(150.0F, 879.0F, 250.0F, 879.0F);
          performZoomInPanZoomOut(200.0F, 250.0F, 200.0F, 400.0F);
          performZoomInPanZoomOut(546.0F, 592.0F, 739.0F, 800.0F);
          performZoomInPanZoomOut(327.0F, 700.0F, 109.0F, 468.0F);
          i = j;
          if ((!this.mPageView.instrumentIsScreenFullyPainted()) && (i < 15)) {
            break label400;
          }
          return;
          this.mActivity = start_AdobeReader(paramFile);
        }
      }
      catch (InterruptedException paramFile)
      {
        paramFile.printStackTrace();
        continue;
        try
        {
          Thread.sleep(1000L);
          i += 1;
        }
        catch (Exception paramFile)
        {
          paramFile.printStackTrace();
          continue;
        }
        performZoomInPanZoomOut(123.0F, 130.0F, 201.0F, 238.0F);
        performZoomInPanZoomOut(248.0F, 296.0F, 287.0F, 397.0F);
        performZoomInPanZoomOut(303.0F, 358.0F, 167.0F, 173.0F);
        i = j;
        continue;
      }
      try
      {
        label400:
        Thread.sleep(1000L);
        i += 1;
      }
      catch (Exception paramFile)
      {
        for (;;)
        {
          paramFile.printStackTrace();
        }
      }
    }
  }
  
  public void testRandom(File paramFile)
  {
    int j = 0;
    int k = 0;
    if (this.mActivity != null)
    {
      paramFile = getNextFileIntent(paramFile);
      this.mActivity.startActivity(paramFile);
    }
    int i;
    try
    {
      Log.d("AUTOMATION", "starting sleep");
      Thread.sleep(2000L);
      Log.d("AUTOMATION", "just after sleep");
      this.mPageView = ((PageView)this.mActivity.findViewById(2131492873));
      setInAppAutomationHandler(this.mActivity);
      ARFileBrowserUtils.clearRecentFileList(this.mActivity);
      Log.d("AUTOMATION", "After creating mactivity object");
      i = 0;
      if ((this.mPageView.instrumentIsScreenFullyPainted()) || (i >= 30))
      {
        Log.d("AUTOMATION", "after wait for screen painted");
        if (this.mPageView.getViewMode() != 1) {
          break label679;
        }
        Log.d("AUTOMATION", "double tap at 210,250");
        this.mActivity.runOnUiThread(new Runnable()
        {
          public void run()
          {
            AdobeReaderTest.this.mPageView.handleDoubleTap(210.0D, 250.0D);
          }
        });
        waitForIdleSync();
      }
    }
    catch (InterruptedException paramFile)
    {
      for (;;)
      {
        try
        {
          Thread.sleep(700L);
          Log.d("AUTOMATION", "double tap again");
          this.mActivity.runOnUiThread(new Runnable()
          {
            public void run()
            {
              AdobeReaderTest.this.mPageView.handleDoubleTap(220.0D, 300.0D);
            }
          });
          waitForIdleSync();
        }
        catch (InterruptedException paramFile)
        {
          try
          {
            Thread.sleep(300L);
            Log.d("AUTOMATION", "scroll  by 0,200  for 5 times");
            i = 0;
            if ((i >= 5) || (this.mPageView.getCurrentPageNumber() >= this.mPageView.getNumPages() - 1))
            {
              Log.d("AUTOMATION", "double tap at 250,320");
              this.mActivity.runOnUiThread(new Runnable()
              {
                public void run()
                {
                  AdobeReaderTest.this.mPageView.handleDoubleTap(250.0D, 320.0D);
                }
              });
              waitForIdleSync();
            }
          }
          catch (InterruptedException paramFile)
          {
            try
            {
              Thread.sleep(300L);
              Log.d("AUTOMATION", "scroll  by 1000,0  for 5 times");
              i = 0;
              if (i >= 5)
              {
                Log.d("AUTOMATION", "scroll  by -500,0  for 5 times");
                i = 0;
                if (i < 5) {
                  continue;
                }
                Log.d("AUTOMATION", "scroll  by 0,1000  for 10 times");
                i = 0;
                if ((i < 10) && (this.mPageView.getCurrentPageNumber() < this.mPageView.getNumPages() - 1)) {
                  continue;
                }
                Log.d("AUTOMATION", "double tap again");
                this.mActivity.runOnUiThread(new Runnable()
                {
                  public void run()
                  {
                    AdobeReaderTest.this.mPageView.handleDoubleTap(220.0D, 300.0D);
                  }
                });
                waitForIdleSync();
              }
            }
            catch (InterruptedException paramFile)
            {
              try
              {
                Thread.sleep(300L);
                Log.d("AUTOMATION", "scroll by 0,-200 up for 10 times");
                i = k;
                if ((i >= 10) || (this.mPageView.getCurrentPageNumber() <= 1))
                {
                  Log.d("AUTOMATION", "call finish() on ARViewer activity");
                  return;
                  this.mActivity = start_AdobeReader(paramFile);
                  continue;
                  paramFile = paramFile;
                  paramFile.printStackTrace();
                  continue;
                  try
                  {
                    Thread.sleep(1000L);
                    i += 1;
                  }
                  catch (Exception paramFile)
                  {
                    paramFile.printStackTrace();
                    continue;
                  }
                  paramFile = paramFile;
                  paramFile.printStackTrace();
                  continue;
                  paramFile = paramFile;
                  paramFile.printStackTrace();
                  continue;
                  this.mActivity.runOnUiThread(new Runnable()
                  {
                    public void run()
                    {
                      AdobeReaderTest.this.mPageView.handleScroll(0, 200);
                    }
                  });
                  waitForIdleSync();
                  try
                  {
                    Thread.sleep(700L);
                    i += 1;
                  }
                  catch (InterruptedException paramFile)
                  {
                    paramFile.printStackTrace();
                    continue;
                  }
                  paramFile = paramFile;
                  paramFile.printStackTrace();
                  continue;
                  this.mActivity.runOnUiThread(new Runnable()
                  {
                    public void run()
                    {
                      AdobeReaderTest.this.mPageView.handleScroll(1000, 0);
                    }
                  });
                  waitForIdleSync();
                  try
                  {
                    Thread.sleep(300L);
                    i += 1;
                  }
                  catch (InterruptedException paramFile)
                  {
                    paramFile.printStackTrace();
                    continue;
                  }
                  this.mActivity.runOnUiThread(new Runnable()
                  {
                    public void run()
                    {
                      AdobeReaderTest.this.mPageView.handleScroll(65036, 0);
                    }
                  });
                  waitForIdleSync();
                  try
                  {
                    Thread.sleep(300L);
                    i += 1;
                  }
                  catch (InterruptedException paramFile)
                  {
                    paramFile.printStackTrace();
                    continue;
                  }
                  this.mActivity.runOnUiThread(new Runnable()
                  {
                    public void run()
                    {
                      AdobeReaderTest.this.mPageView.handleScroll(0, 1000);
                    }
                  });
                  waitForIdleSync();
                  try
                  {
                    Thread.sleep(700L);
                    i += 1;
                  }
                  catch (InterruptedException paramFile)
                  {
                    paramFile.printStackTrace();
                    continue;
                  }
                }
              }
              catch (InterruptedException paramFile)
              {
                paramFile.printStackTrace();
                continue;
                this.mActivity.runOnUiThread(new Runnable()
                {
                  public void run()
                  {
                    AdobeReaderTest.this.mPageView.handleScroll(0, 65336);
                  }
                });
                waitForIdleSync();
              }
            }
          }
        }
        try
        {
          Thread.sleep(300L);
          i += 1;
        }
        catch (InterruptedException paramFile)
        {
          for (;;)
          {
            paramFile.printStackTrace();
          }
        }
      }
      label679:
      Log.d("AUTOMATION", "double tap at 250,320");
      this.mActivity.runOnUiThread(new Runnable()
      {
        public void run()
        {
          AdobeReaderTest.this.mPageView.handleDoubleTap(250.0D, 320.0D);
        }
      });
      waitForIdleSync();
    }
    for (;;)
    {
      try
      {
        Thread.sleep(500L);
        Log.d("AUTOMATION", "pan forward 500,0 up for 5 times");
        i = 0;
        if ((i >= 5) || (this.mPageView.getCurrentPageNumber() >= this.mPageView.getNumPages() - 1))
        {
          Log.d("AUTOMATION", "pan backward by -500,0 up for 5 times");
          i = 0;
          if ((i < 5) && (this.mPageView.getCurrentPageNumber() >= 0)) {
            continue;
          }
          Log.d("AUTOMATION", "scroll forward 5 times");
          i = 0;
          if ((i < 5) && (this.mPageView.getCurrentPageNumber() < this.mPageView.getNumPages() - 1)) {
            continue;
          }
          Log.d("AUTOMATION", "scroll back for 2 times");
          i = 0;
          if ((i < 2) && (this.mPageView.getCurrentPageNumber() > 1)) {
            continue;
          }
          Log.d("AUTOMATION", "double tap again");
          this.mActivity.runOnUiThread(new Runnable()
          {
            public void run()
            {
              AdobeReaderTest.this.mPageView.handleDoubleTap(220.0D, 300.0D);
            }
          });
          waitForIdleSync();
        }
      }
      catch (InterruptedException paramFile)
      {
        try
        {
          Thread.sleep(700L);
          Log.d("AUTOMATION", "pan backward by -500,0 for 10 times");
          i = 0;
          if ((i >= 10) || (this.mPageView.getCurrentPageNumber() <= 1))
          {
            Log.d("AUTOMATION", "pan down by 0,500 for 10 times");
            i = j;
            if ((i < 10) && (this.mPageView.getCurrentPageNumber() > 1)) {
              continue;
            }
            Log.d("AUTOMATION", "double tap again");
            this.mActivity.runOnUiThread(new Runnable()
            {
              public void run()
              {
                AdobeReaderTest.this.mPageView.handleDoubleTap(220.0D, 300.0D);
              }
            });
            waitForIdleSync();
            try
            {
              Thread.sleep(300L);
            }
            catch (InterruptedException paramFile)
            {
              paramFile.printStackTrace();
            }
            break;
            paramFile = paramFile;
            paramFile.printStackTrace();
            continue;
            this.mActivity.runOnUiThread(new Runnable()
            {
              public void run()
              {
                AdobeReaderTest.this.mPageView.handleScroll(500, 0);
              }
            });
            waitForIdleSync();
            try
            {
              Thread.sleep(300L);
              i += 1;
            }
            catch (InterruptedException paramFile)
            {
              paramFile.printStackTrace();
              continue;
            }
            this.mActivity.runOnUiThread(new Runnable()
            {
              public void run()
              {
                AdobeReaderTest.this.mPageView.handleScroll(65036, 0);
              }
            });
            waitForIdleSync();
            try
            {
              Thread.sleep(300L);
              i += 1;
            }
            catch (InterruptedException paramFile)
            {
              paramFile.printStackTrace();
              continue;
            }
            this.mActivity.runOnUiThread(new Runnable()
            {
              public void run()
              {
                AdobeReaderTest.this.mPageView.gotoNextPage();
              }
            });
            waitForIdleSync();
            try
            {
              Thread.sleep(300L);
              i += 1;
            }
            catch (InterruptedException paramFile)
            {
              paramFile.printStackTrace();
              continue;
            }
            this.mActivity.runOnUiThread(new Runnable()
            {
              public void run()
              {
                AdobeReaderTest.this.mPageView.gotoPrevPage();
              }
            });
            waitForIdleSync();
            try
            {
              Thread.sleep(300L);
              i += 1;
            }
            catch (InterruptedException paramFile)
            {
              paramFile.printStackTrace();
              continue;
            }
          }
        }
        catch (InterruptedException paramFile)
        {
          paramFile.printStackTrace();
          continue;
          this.mActivity.runOnUiThread(new Runnable()
          {
            public void run()
            {
              AdobeReaderTest.this.mPageView.handleScroll(65036, 0);
            }
          });
          waitForIdleSync();
          try
          {
            Thread.sleep(100L);
            i += 1;
          }
          catch (InterruptedException paramFile)
          {
            paramFile.printStackTrace();
            continue;
          }
          this.mActivity.runOnUiThread(new Runnable()
          {
            public void run()
            {
              AdobeReaderTest.this.mPageView.handleScroll(0, 500);
            }
          });
          waitForIdleSync();
        }
      }
      try
      {
        Thread.sleep(100L);
        i += 1;
      }
      catch (InterruptedException paramFile)
      {
        for (;;)
        {
          paramFile.printStackTrace();
        }
      }
    }
  }
  
  public void testRendering(File paramFile)
  {
    Log.d("FILENAME", "Executing test on PDF " + paramFile);
    Log.d("AUTOMATION", "inside  for File " + paramFile);
    if (this.mActivity != null)
    {
      paramFile = getNextFileIntent(paramFile);
      this.mActivity.startActivity(paramFile);
    }
    for (;;)
    {
      setInAppAutomationHandler(this.mActivity);
      ARFileBrowserUtils.clearRecentFileList(this.mActivity);
      waitThread();
      return;
      this.mActivity = start_AdobeReader(paramFile);
    }
  }
  
  public void test_nextpage(File paramFile)
  {
    Log.d("AUTOMATION", paramFile + ": Next Page operation starting");
    this.mDocViewManager = this.mPageView.getDocViewManager();
    Log.e("AUTOMATION PageNumbers", "Page nos. are " + this.mDocViewManager.getNumPages());
    int i = 0;
    if (i >= this.mDocViewManager.getNumPages()) {
      Log.e("AUTOMATION", "Test next page complete");
    }
    try
    {
      Thread.sleep(1000L);
      return;
    }
    catch (InterruptedException paramFile)
    {
      paramFile.printStackTrace();
    }
    if ((this.mPageView.instrumentIsScreenFullyPainted()) || (this.iCount >= 20))
    {
      this.iCount = 0;
      i += 1;
      this.mActivity.runOnUiThread(new Runnable()
      {
        public void run()
        {
          AdobeReaderTest.this.mPageView.gotoNextPage();
        }
      });
    }
    for (;;)
    {
      waitForIdleSync();
      break;
      this.iCount += 1;
      try
      {
        Thread.sleep(300L);
      }
      catch (InterruptedException paramFile)
      {
        paramFile.printStackTrace();
      }
    }
  }
  
  public void testhandle_fling(File paramFile)
  {
    Log.d("AUTOMATION", paramFile + ": Flick operation starting");
    this.mDocViewManager = this.mPageView.getDocViewManager();
    if (this.mDocViewManager != null) {
      Log.e("AUTOMATION PageNumbers", "Page nos. are " + this.mDocViewManager.getNumPages());
    }
    for (;;)
    {
      if (this.mPageView.getCurrentPageNumber() >= this.mDocViewManager.getNumPages() - 3) {
        return;
      }
      this.mActivity.runOnUiThread(new Runnable()
      {
        public void run()
        {
          AdobeReaderTest.this.mPageView.handleFling(0.0F, -2700.0F);
          AdobeReaderTest.this.mPageView.invalidate();
        }
      });
      waitForIdleSync();
      try
      {
        Thread.sleep(700L);
        Log.d("AUTOMATION", paramFile + ": Flick operation complete");
        Log.d("AUTOMATION", "current page number " + this.mPageView.getCurrentPageNumber());
      }
      catch (InterruptedException localInterruptedException)
      {
        for (;;)
        {
          localInterruptedException.printStackTrace();
        }
      }
    }
  }
  
  public void waitThread()
  {
    Log.d("AUTOMATION", "waitThread" + Integer.toHexString(System.identityHashCode(this)));
    synchronized (this.mSyncObj)
    {
      try
      {
        this.mSyncObj.wait();
        return;
      }
      catch (InterruptedException localInterruptedException)
      {
        for (;;)
        {
          Log.d("AUTOMATION", " Exception occurred " + localInterruptedException);
        }
      }
    }
  }
  
  private static enum ZoomMode
  {
    ZOOM_IN,  ZOOM_OUT;
  }
}
