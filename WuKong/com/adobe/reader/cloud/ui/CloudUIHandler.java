package com.adobe.reader.cloud.ui;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.TextView;
import com.adobe.reader.ARApp;
import com.adobe.reader.ARConstants.CloudConstants;
import com.adobe.reader.ARFileBrowserUtils;
import com.adobe.reader.ARFileEntry;
import com.adobe.reader.ARSplitPane;
import com.adobe.reader.RightPaneFragment;
import com.adobe.reader.cloud.CloudCacheManager;
import com.adobe.reader.cloud.CloudTransferManager;
import com.adobe.reader.cloud.CloudUtilities;
import com.adobe.reader.cloud.async.GetRootFolderIdAsyncTask;
import com.adobe.reader.cloud.async.PopulateBaseURIsAsyncTask;
import com.adobe.reader.cloud.network.BlueHeronAPI;
import com.adobe.reader.cloud.network.BlueHeronAPI.BASE_URI_TYPE;
import com.adobe.reader.cloud.network.CloudFileTransferService;
import com.adobe.reader.cloud.network.CloudNetworkManager;
import com.adobe.reader.cloud.network.PopulateBaseURIsInterface;
import java.io.File;
import java.util.Locale;
import java.util.Stack;

public class CloudUIHandler
  implements CloudAuthenticationInterface, PopulateBaseURIsInterface, LoadCloudFileListInterface
{
  private static final String BH_MARKETING_PAGE_URLPATH = "file:///android_res/raw/adc_readermobile_getstarted.html";
  public static boolean sBHMarketingPageShown = false;
  private ARSplitPane mActivity;
  private WebView mAuthWebView = null;
  private boolean mCloudBrowseWorkflowInitiated = false;
  private CloudFileListViewManager mCloudFileListViewManager = null;
  private FrameLayout mCloudLayout = null;
  private CloudTransferListViewManager mCloudTransferListViewManager = null;
  private Stack<String> mCurrentDirectoryIDStack = null;
  private TextView mErrorPage = null;
  private LinearLayout mLoadingPage = null;
  private TextView mLoadingText = null;
  private String mNetworkErrorText = null;
  private ImageButton mRefreshButton;
  private boolean mWebViewInitiated = false;
  
  public CloudUIHandler(ARSplitPane paramARSplitPane)
  {
    this.mActivity = paramARSplitPane;
    this.mCloudLayout = ((FrameLayout)this.mActivity.findViewById(2131493065));
    this.mAuthWebView = ((WebView)this.mActivity.findViewById(2131493072));
    this.mLoadingPage = ((LinearLayout)paramARSplitPane.findViewById(2131493071));
    this.mLoadingText = ((TextView)paramARSplitPane.findViewById(2131493002));
    this.mRefreshButton = ((ImageButton)paramARSplitPane.findViewById(2131493111));
    this.mErrorPage = ((TextView)paramARSplitPane.findViewById(2131493073));
    this.mNetworkErrorText = paramARSplitPane.getString(2131362090);
    this.mCloudFileListViewManager = new CloudFileListViewManager(this, paramARSplitPane);
    this.mCloudTransferListViewManager = new CloudTransferListViewManager(paramARSplitPane);
    this.mCurrentDirectoryIDStack = new Stack();
    this.mRefreshButton.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        CloudUIHandler.this.refresh();
      }
    });
  }
  
  private boolean baseURIsPopulated()
  {
    if (!BlueHeronAPI.isBaseURIPopulated())
    {
      showLoadingPage();
      new PopulateBaseURIsAsyncTask(this).execute(new Void[0]);
      return false;
    }
    return true;
  }
  
  public static void resetAccountGlobalState()
  {
    Object localObject = CloudUtilities.getAppPrivateExternalDir();
    if (localObject != null) {
      ARFileBrowserUtils.deleteFile(new File((File)localObject, ".Skybox.Cache"));
    }
    localObject = ARApp.getAppContext();
    ARFileBrowserUtils.deleteFile(((Context)localObject).getDir(".Skybox.Cache", 0));
    CloudTransferManager.getInstance().delete();
    CloudCacheManager.getInstance().removeAll();
    ((Context)localObject).stopService(new Intent(ARApp.getAppContext(), CloudFileTransferService.class));
  }
  
  public static void setupCloudLoginWebView(WebView paramWebView, CloudAuthenticationInterface paramCloudAuthenticationInterface)
  {
    if (paramWebView != null)
    {
      paramWebView.setWebViewClient(new CloudAuthenticationWebViewClient(paramCloudAuthenticationInterface));
      paramWebView.getSettings().setJavaScriptEnabled(true);
      paramWebView.requestFocus(130);
      paramWebView.setOnTouchListener(new View.OnTouchListener()
      {
        public boolean onTouch(View paramAnonymousView, MotionEvent paramAnonymousMotionEvent)
        {
          switch (paramAnonymousMotionEvent.getAction())
          {
          }
          for (;;)
          {
            return false;
            if (!paramAnonymousView.hasFocus()) {
              paramAnonymousView.requestFocus();
            }
          }
        }
      });
      paramCloudAuthenticationInterface = CloudNetworkManager.getBaseURIs(BlueHeronAPI.BASE_URI_TYPE.IMS);
      String str = Locale.getDefault().toString();
      paramCloudAuthenticationInterface = paramCloudAuthenticationInterface + "ims/authorize/v1?" + "client_id=" + "ReaderMobile1" + "&scope=" + "AdobeID,openid,skybox" + "&locale=" + str;
      CloudUtilities.logit("Sign-in URL : " + paramCloudAuthenticationInterface);
      paramWebView.loadUrl(paramCloudAuthenticationInterface);
    }
  }
  
  private void setupUpDirectoryNavigation()
  {
    ((LinearLayout)this.mActivity.findViewById(2131493067)).setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        CloudUIHandler.this.showParentDirectory();
      }
    });
  }
  
  public static void showCloudGettingStartedWebView(Activity paramActivity, WebView paramWebView, CloudAuthenticationInterface paramCloudAuthenticationInterface)
  {
    if (paramWebView != null)
    {
      paramWebView.setWebViewClient(new WebViewClient()
      {
        public boolean shouldOverrideUrlLoading(WebView paramAnonymousWebView, String paramAnonymousString)
        {
          if (paramAnonymousString.equals("readermobile://bhgetstarted"))
          {
            CloudUIHandler.this.onBHGettingStartedClicked();
            return true;
          }
          return false;
        }
      });
      paramWebView.getSettings().setJavaScriptEnabled(true);
      paramWebView.loadUrl("file:///android_res/raw/adc_readermobile_getstarted.html");
      paramWebView.setVisibility(0);
    }
  }
  
  private void showErrorPage()
  {
    showErrorPage(this.mActivity.getString(2131362090));
  }
  
  private void showErrorPage(String paramString)
  {
    hideAllViews();
    this.mErrorPage.setVisibility(0);
    this.mErrorPage.setText(paramString);
  }
  
  private void showLoadingPage(String paramString)
  {
    hideAllViews();
    this.mLoadingPage.setVisibility(0);
    this.mLoadingText.setText(paramString);
  }
  
  private boolean showParentDirectory()
  {
    if (switchStateToParentDirectory())
    {
      this.mCloudFileListViewManager.showCurrentDirectory();
      return true;
    }
    return false;
  }
  
  private void showWebView()
  {
    hideAllViews();
    this.mAuthWebView.setVisibility(0);
  }
  
  private boolean switchStateToParentDirectory()
  {
    if ((this.mCloudTransferListViewManager != null) && (this.mCurrentDirectoryIDStack != null) && (this.mCurrentDirectoryIDStack.size() > 1))
    {
      this.mCurrentDirectoryIDStack.pop();
      String str1 = new File(this.mCloudFileListViewManager.getCurrentDirectory()).getParent();
      String str2 = (String)this.mCurrentDirectoryIDStack.peek();
      this.mCloudFileListViewManager.setCurrentDirectory(str1, str2);
      return true;
    }
    return false;
  }
  
  public CloudTransferListViewManager getTransferListViewManager()
  {
    return this.mCloudTransferListViewManager;
  }
  
  public boolean handleBackPress()
  {
    if (this.mCloudBrowseWorkflowInitiated) {
      return showParentDirectory();
    }
    return false;
  }
  
  public void handleError()
  {
    ARSplitPane.displayErrorToast(this.mNetworkErrorText);
    showErrorPage(this.mNetworkErrorText);
  }
  
  public void hideAllViews()
  {
    int j = this.mCloudLayout.getChildCount();
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        return;
      }
      this.mCloudLayout.getChildAt(i).setVisibility(8);
      i += 1;
    }
  }
  
  public void initializeFolder(String paramString1, String paramString2)
  {
    if (this.mCloudBrowseWorkflowInitiated) {
      return;
    }
    setupUpDirectoryNavigation();
    this.mCloudBrowseWorkflowInitiated = true;
    this.mCurrentDirectoryIDStack.clear();
    openDirectory(paramString1, paramString2);
  }
  
  public void initiateCloudBrowseView()
  {
    if (this.mCloudBrowseWorkflowInitiated)
    {
      refresh();
      return;
    }
    String str = CloudNetworkManager.getRootFolderID();
    if (str != null)
    {
      initializeFolder(ARConstants.CloudConstants.CLOUD_ROOT_DIRECTORY, str);
      return;
    }
    showLoadingPage();
    new GetRootFolderIdAsyncTask(this).execute(new Void[0]);
  }
  
  public void initiateCloudSignInWebView()
  {
    if (CloudUtilities.isNetworkAvailable(this.mActivity))
    {
      if (!baseURIsPopulated()) {}
      while ((this.mAuthWebView == null) || (this.mWebViewInitiated)) {
        return;
      }
      this.mWebViewInitiated = true;
      showLoadingPage();
      setupCloudLoginWebView(this.mAuthWebView, this);
      this.mRefreshButton.setVisibility(0);
      return;
    }
    showErrorPage(this.mNetworkErrorText);
  }
  
  public void initiateWorkflow()
  {
    setTopBarButtonsVisibility();
    if (!CloudNetworkManager.isSignedIn())
    {
      if (this.mCloudBrowseWorkflowInitiated)
      {
        signOut();
        return;
      }
      showWebView();
      if (sBHMarketingPageShown)
      {
        initiateCloudSignInWebView();
        return;
      }
      this.mRefreshButton.setVisibility(4);
      showCloudGettingStartedWebView(this.mActivity, this.mAuthWebView, this);
      return;
    }
    initiateCloudBrowseView();
  }
  
  public boolean isLoadingPageVisible()
  {
    return this.mLoadingPage.isShown();
  }
  
  public boolean isRunningOnTablet()
  {
    return this.mActivity.getResources().getBoolean(2131165184);
  }
  
  public void onBHGettingStartedClicked()
  {
    sBHMarketingPageShown = true;
    this.mRefreshButton.setVisibility(0);
    initiateCloudSignInWebView();
  }
  
  public void onLoadCloudFileListFailed()
  {
    ARSplitPane.displayErrorToast(this.mNetworkErrorText);
    switchStateToParentDirectory();
    showCloudFileListView();
  }
  
  public void onLoadCloudFileListLoading()
  {
    showLoadingPage();
  }
  
  public void onLoadCloudFileListStarted()
  {
    if (!isLoadingPageVisible()) {
      hideAllViews();
    }
  }
  
  public void onLoadCloudFileListSuccess()
  {
    showCloudFileListView();
  }
  
  public void onLoginSuccess()
  {
    this.mAuthWebView.clearView();
    this.mAuthWebView.clearHistory();
    this.mWebViewInitiated = false;
    initiateWorkflow();
  }
  
  public void onPageLoadError()
  {
    showErrorPage();
  }
  
  public void onPageLoadSuccess()
  {
    showWebView();
  }
  
  public void onPopulateBaseURIsSuccess()
  {
    initiateWorkflow();
  }
  
  public void onPopuplateBaseURIsFailure()
  {
    handleError();
  }
  
  public void openDirectory(String paramString1, String paramString2)
  {
    this.mCurrentDirectoryIDStack.push(paramString2);
    this.mCloudFileListViewManager.showCurrentDirectory(paramString1, paramString2);
  }
  
  public void openFile(ARFileEntry paramARFileEntry)
  {
    String str = paramARFileEntry.getFilePath();
    Object localObject = ".Skybox.Cache" + str;
    str = paramARFileEntry.getFileID();
    File localFile = CloudUtilities.getAppPrivateExternalDir();
    if (localFile == null)
    {
      ARSplitPane.displayErrorToast(this.mActivity.getString(2131362116));
      return;
    }
    localObject = new File(localFile, (String)localObject);
    long l1 = paramARFileEntry.getCloudModifiedDate();
    long l2 = CloudUtilities.getCachedFileModifiedDate(str);
    if ((((File)localObject).exists()) && (l2 >= l1))
    {
      this.mActivity.openCloudFile((File)localObject, str);
      return;
    }
    this.mActivity.downloadCloudFile(((File)localObject).getAbsolutePath(), str, l1);
  }
  
  public void refresh()
  {
    if (!CloudNetworkManager.isSignedIn()) {
      reloadWebView();
    }
    while (this.mCloudFileListViewManager == null) {
      return;
    }
    this.mCloudFileListViewManager.showCurrentDirectory();
  }
  
  public void releaseFileEntries()
  {
    if (this.mCloudFileListViewManager != null) {
      this.mCloudFileListViewManager.cleanUp();
    }
    if (this.mCloudTransferListViewManager != null) {
      this.mCloudTransferListViewManager.cleanUp();
    }
  }
  
  public void reloadWebView()
  {
    this.mWebViewInitiated = false;
    initiateWorkflow();
  }
  
  public void setTopBarButtonsVisibility()
  {
    if (this.mActivity.getCurrentLeftPaneSelectedItem() == 2131361901) {}
    for (int i = 1; i != 0; i = 0)
    {
      this.mRefreshButton.setVisibility(0);
      return;
    }
    this.mRefreshButton.setVisibility(8);
  }
  
  public void showCloudFileListView()
  {
    hideAllViews();
    this.mCloudFileListViewManager.showView();
    this.mCloudFileListViewManager.resetFileListPosition();
  }
  
  public void showCloudRootFolder()
  {
    this.mCurrentDirectoryIDStack.clear();
    openDirectory(ARConstants.CloudConstants.CLOUD_ROOT_DIRECTORY, CloudNetworkManager.getRootFolderID());
  }
  
  public void showLoadingPage()
  {
    showLoadingPage(this.mActivity.getString(2131362106));
  }
  
  public void showTransferList()
  {
    this.mCloudTransferListViewManager.showFileList();
  }
  
  public void signOut()
  {
    CloudNetworkManager.removeCloudAccount();
    resetAccountGlobalState();
    this.mActivity.getRightPaneFragment().refreshRecentFilesList();
    releaseFileEntries();
    this.mCloudBrowseWorkflowInitiated = false;
    this.mCurrentDirectoryIDStack.clear();
    hideAllViews();
    this.mActivity.setLeftPaneSelectedEntry(2);
  }
}
