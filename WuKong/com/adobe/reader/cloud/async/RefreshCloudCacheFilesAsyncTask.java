package com.adobe.reader.cloud.async;

import android.os.AsyncTask;
import com.adobe.reader.ARSplitPane;
import com.adobe.reader.RightPaneFragment;
import com.adobe.reader.cloud.CloudCacheManager;
import com.adobe.reader.cloud.CloudUtilities;
import com.adobe.reader.cloud.network.BlueHeronAPI.API_LIST;
import com.adobe.reader.cloud.network.BlueHeronAPI.HTTP_METHOD_TYPE;
import com.adobe.reader.cloud.network.CloudNetworkManager;
import java.util.ArrayList;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class RefreshCloudCacheFilesAsyncTask
  extends AsyncTask<Void, Void, Void>
{
  private static int POST_SEARCH_API_FILENUM_LIMIT = 50;
  private ARSplitPane mActivity;
  private ArrayList<String> mCloudFilesInCache;
  
  public RefreshCloudCacheFilesAsyncTask(ARSplitPane paramARSplitPane)
  {
    this.mActivity = paramARSplitPane;
  }
  
  private void deleteFile(String paramString)
  {
    CloudUtilities.deleteCachedFileWithID(paramString);
  }
  
  private String getSearchQueryJsonString(ArrayList<String> paramArrayList, int paramInt1, int paramInt2)
    throws JSONException
  {
    paramArrayList = new JSONArray(paramArrayList.subList(paramInt1, paramInt2));
    Object localObject = new JSONObject();
    ((JSONObject)localObject).put("$in", paramArrayList);
    paramArrayList = new JSONObject();
    paramArrayList.put("object_id", localObject);
    localObject = new JSONArray();
    ((JSONArray)localObject).put("modified");
    ((JSONArray)localObject).put("last_pagenum");
    JSONObject localJSONObject = new JSONObject();
    localJSONObject.put("q", paramArrayList);
    localJSONObject.put("metadata", localObject);
    return localJSONObject.toString();
  }
  
  private void updateCloudCacheEntries(JSONObject paramJSONObject, int paramInt1, int paramInt2)
  {
    int m;
    int i;
    int j;
    try
    {
      localObject = paramJSONObject.getJSONArray("results");
      paramJSONObject = new ArrayList();
      m = ((JSONArray)localObject).length();
      i = 0;
    }
    catch (JSONException paramJSONObject)
    {
      Object localObject;
      return;
    }
    if (j >= paramInt2)
    {
      if (i == 0) {
        break label220;
      }
      this.mActivity.runOnUiThread(new RefreshRecentsFileListRunnable(null));
    }
    label220:
    label221:
    label228:
    for (;;)
    {
      JSONObject localJSONObject = ((JSONArray)localObject).getJSONObject(i);
      String str1 = localJSONObject.getString("modified");
      String str2 = localJSONObject.getString("id");
      paramJSONObject.add(str2);
      j = -1;
      try
      {
        int k = localJSONObject.getInt("last_pagenum");
        j = k;
      }
      catch (JSONException localJSONException)
      {
        for (;;)
        {
          long l;
          continue;
          paramInt1 = i;
        }
      }
      l = CloudUtilities.convertServerDateToEpoch(str1);
      if (l != CloudUtilities.getCachedFileModifiedDate(str2)) {
        CloudUtilities.updateCachedFileModifiedDate(str2, l);
      }
      if (j != -1)
      {
        CloudUtilities.updateCachedFileLastViewedPageNum(str2, j);
        break label221;
        localObject = (String)this.mCloudFilesInCache.get(j);
        if (!paramJSONObject.contains(localObject))
        {
          deleteFile((String)localObject);
          paramInt1 = 1;
          j += 1;
          i = paramInt1;
          break;
        }
      }
      for (;;)
      {
        if (i < m) {
          break label228;
        }
        i = 0;
        j = paramInt1;
        break;
        return;
        i += 1;
      }
    }
  }
  
  protected Void doInBackground(Void... paramVarArgs)
  {
    int j;
    int i;
    if ((this.mCloudFilesInCache != null) && (this.mCloudFilesInCache.size() > 0))
    {
      CloudCacheManager.getInstance().printCloudCache();
      j = this.mCloudFilesInCache.size();
      i = 0;
    }
    for (;;)
    {
      if (i >= j) {
        return null;
      }
      try
      {
        paramVarArgs = CloudNetworkManager.getHttpRequest(BlueHeronAPI.API_LIST.POST_SEARCH, new String[0]);
        int k = Math.min(POST_SEARCH_API_FILENUM_LIMIT + i, j);
        StringEntity localStringEntity = new StringEntity(getSearchQueryJsonString(this.mCloudFilesInCache, i, k));
        ((HttpPost)paramVarArgs).setEntity(localStringEntity);
        updateCloudCacheEntries(CloudNetworkManager.getResponseBodyJson(CloudNetworkManager.getHttpMethodResponse(paramVarArgs, BlueHeronAPI.HTTP_METHOD_TYPE.POST)), i, k);
        i = POST_SEARCH_API_FILENUM_LIMIT + i;
      }
      catch (Exception paramVarArgs)
      {
        for (;;) {}
      }
    }
  }
  
  protected void onPreExecute()
  {
    super.onPreExecute();
    if (CloudUtilities.isNetworkAvailable(this.mActivity)) {
      this.mCloudFilesInCache = CloudUtilities.getCachedFilesAssetIDs();
    }
  }
  
  private class RefreshRecentsFileListRunnable
    implements Runnable
  {
    private RefreshRecentsFileListRunnable() {}
    
    public void run()
    {
      RefreshCloudCacheFilesAsyncTask.this.mActivity.getRightPaneFragment().refreshRecentFilesList();
    }
  }
}
