package com.adobe.reader.cloud.async;

import android.app.Activity;
import android.content.Context;
import android.content.res.Resources;
import android.os.AsyncTask;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.TextView;
import com.adobe.reader.ARApp;
import com.adobe.reader.ARConstants.CloudConstants;
import com.adobe.reader.ARFileEntry;
import com.adobe.reader.ARFileEntry.FILE_ENTRY_TYPE;
import com.adobe.reader.ARFileEntryAdapter;
import com.adobe.reader.ARFileEntryAdapter.ADAPTER_TYPE;
import com.adobe.reader.ARUtils;
import com.adobe.reader.cloud.CloudTransferManager;
import com.adobe.reader.cloud.CloudUtilities;
import com.adobe.reader.cloud.network.BlueHeronAPI.API_LIST;
import com.adobe.reader.cloud.network.BlueHeronAPI.HTTP_METHOD_TYPE;
import com.adobe.reader.cloud.network.CloudNetworkManager;
import com.adobe.reader.cloud.ui.CloudFileListLoader;
import com.adobe.reader.cloud.ui.CloudFileListLoader.FILE_LIST_SOURCE;
import com.adobe.reader.cloud.ui.LoadCloudFileListInterface;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import org.apache.http.Header;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpRequestBase;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class LoadCloudFileListAsyncTask
  extends AsyncTask<Void, Void, Void>
{
  private Activity mActivity;
  private boolean mCloudAvailable;
  private String mCurrentDirectory;
  private String mCurrentDirectoryID;
  private boolean mFolderContentLoaded;
  private List<ARFileEntry> mPdfFileList = new ArrayList();
  private ARFileEntryAdapter mPdfFilesAdapter;
  private CloudFileListLoader.FILE_LIST_SOURCE mSource;
  private LoadCloudFileListInterface mUIHandler;
  private boolean mUpEntryShown = false;
  
  public LoadCloudFileListAsyncTask(CloudFileListLoader paramCloudFileListLoader, Activity paramActivity, LoadCloudFileListInterface paramLoadCloudFileListInterface, ARFileEntryAdapter paramARFileEntryAdapter, String paramString1, String paramString2, CloudFileListLoader.FILE_LIST_SOURCE paramFILE_LIST_SOURCE)
  {
    this.mActivity = paramActivity;
    this.mUIHandler = paramLoadCloudFileListInterface;
    this.mPdfFilesAdapter = paramARFileEntryAdapter;
    this.mCurrentDirectory = paramString1;
    this.mCurrentDirectoryID = paramString2;
    this.mSource = paramFILE_LIST_SOURCE;
  }
  
  private void addFolderContentToAdapter()
  {
    synchronized (this.mPdfFileList)
    {
      this.mPdfFilesAdapter.resetAdapter();
      this.mPdfFilesAdapter.addAll(this.mPdfFileList, true);
      this.mPdfFilesAdapter.notifyDataSetChanged();
      this.mPdfFileList.clear();
      return;
    }
  }
  
  private void addUpDirectoryEntry(String paramString)
  {
    if (this.mPdfFilesAdapter.getAdapterType() == ARFileEntryAdapter.ADAPTER_TYPE.FOLDER_VIEW)
    {
      LinearLayout localLinearLayout = (LinearLayout)this.mActivity.findViewById(2131493067);
      localLinearLayout.setVisibility(0);
      ((TextView)localLinearLayout.findViewById(2131493068)).setText(paramString);
    }
  }
  
  private ArrayList<ARFileEntry> displayFolder(JSONObject arg1)
  {
    ArrayList localArrayList = getFolderContentFromJSON(this.mActivity, ???, this.mCurrentDirectory);
    int i;
    if ((localArrayList != null) && (localArrayList.size() > 0))
    {
      Collections.sort(localArrayList, new Comparator()
      {
        public int compare(ARFileEntry paramAnonymousARFileEntry1, ARFileEntry paramAnonymousARFileEntry2)
        {
          if (paramAnonymousARFileEntry1.getFileEntryType() == paramAnonymousARFileEntry2.getFileEntryType()) {
            return paramAnonymousARFileEntry1.getFileName().toLowerCase().compareTo(paramAnonymousARFileEntry2.getFileName().toLowerCase());
          }
          if (paramAnonymousARFileEntry1.getFileEntryType() == ARFileEntry.FILE_ENTRY_TYPE.DIRECTORY) {
            return 1;
          }
          return 0;
        }
      });
      i = 0;
    }
    for (;;)
    {
      if (i >= localArrayList.size())
      {
        if (!isCancelled()) {
          publishProgress(new Void[] { null });
        }
        return localArrayList;
      }
      ARFileEntry localARFileEntry = (ARFileEntry)localArrayList.get(i);
      synchronized (this.mPdfFileList)
      {
        this.mPdfFileList.add(localARFileEntry);
        i += 1;
      }
    }
  }
  
  public static JSONObject getCachedFolderContent(String paramString)
    throws IOException, JSONException
  {
    paramString = readContentFromFile(new File(ARApp.getAppContext().getDir(".Skybox.Cache", 0), paramString));
    CloudUtilities.logit("Fetched folder contents from cache");
    return new JSONObject(paramString);
  }
  
  private String getCachedFolderETag()
    throws IOException
  {
    String str = readContentFromFile(new File(this.mActivity.getDir(".Skybox.Cache", 0), this.mCurrentDirectoryID + "_ETag"));
    CloudUtilities.logit("Fetched Folder ETag from Cache.");
    return str;
  }
  
  public static ArrayList<ARFileEntry> getFolderContentFromJSON(Context paramContext, JSONObject paramJSONObject, String paramString)
  {
    ArrayList localArrayList;
    int j;
    int i;
    try
    {
      localArrayList = new ArrayList();
      localJSONArray = paramJSONObject.getJSONArray("members");
      j = localJSONArray.length();
      i = 0;
    }
    catch (JSONException paramContext)
    {
      JSONArray localJSONArray;
      JSONObject localJSONObject;
      String str2;
      String str3;
      String str4;
      String str1;
      StringBuilder localStringBuilder;
      long l;
      paramContext.printStackTrace();
      return null;
    }
    localJSONObject = localJSONArray.getJSONObject(i);
    str2 = localJSONObject.getString("object_type");
    str3 = localJSONObject.getString("name");
    str4 = localJSONObject.getString("id");
    str1 = ARConstants.CloudConstants.CLOUD_ROOT_DIRECTORY;
    localStringBuilder = new StringBuilder(String.valueOf(paramString));
    paramJSONObject = str1;
    if (paramString.equals(str1)) {
      paramJSONObject = "";
    }
    paramJSONObject = paramJSONObject + str3;
    if ((str2.equals("folder")) || (str2.equals("connector_root")))
    {
      localArrayList.add(new ARFileEntry(paramJSONObject, str3, str4));
    }
    else if (str2.equals("file"))
    {
      l = localJSONObject.getLong("size");
      localArrayList.add(new ARFileEntry(str3, paramJSONObject, str4, CloudUtilities.convertServerDateToEpoch(localJSONObject.getString("modified")), Long.valueOf(l).longValue(), null, paramContext.getResources().getDrawable(ARUtils.getFileBrowserDrawableIconForFile(str3))));
    }
    while (i >= j)
    {
      return localArrayList;
      i += 1;
    }
  }
  
  public static JSONObject getFolderContentsFromCloud(String paramString1, String paramString2)
    throws IOException
  {
    Object localObject = CloudNetworkManager.getHttpRequest(BlueHeronAPI.API_LIST.GET_FOLDERS_ID, new String[] { paramString1 });
    if ((paramString2 != null) && (paramString2.length() > 0)) {
      ((HttpRequestBase)localObject).setHeader("If-None-Match", paramString2);
    }
    paramString2 = CloudNetworkManager.getHttpMethodResponse((HttpRequestBase)localObject, BlueHeronAPI.HTTP_METHOD_TYPE.GET);
    localObject = paramString2.getFirstHeader("ETag");
    if (localObject != null)
    {
      localObject = ((Header)localObject).getValue();
      CloudUtilities.logit("ETag found - " + (String)localObject);
    }
    try
    {
      setCachedFolderETag(paramString1, (String)localObject);
      return CloudNetworkManager.getResponseBodyJson(paramString2);
    }
    catch (IOException paramString1)
    {
      for (;;) {}
    }
  }
  
  /* Error */
  private void loadFilesFromCloud(String paramString)
    throws java.net.SocketTimeoutException, IOException, JSONException
  {
    // Byte code:
    //   0: aload_0
    //   1: aload_0
    //   2: getfield 53	com/adobe/reader/cloud/async/LoadCloudFileListAsyncTask:mCurrentDirectoryID	Ljava/lang/String;
    //   5: invokestatic 366	com/adobe/reader/cloud/async/LoadCloudFileListAsyncTask:getCachedFolderContent	(Ljava/lang/String;)Lorg/json/JSONObject;
    //   8: invokespecial 368	com/adobe/reader/cloud/async/LoadCloudFileListAsyncTask:displayFolder	(Lorg/json/JSONObject;)Ljava/util/ArrayList;
    //   11: astore_3
    //   12: aload_0
    //   13: iconst_1
    //   14: putfield 370	com/adobe/reader/cloud/async/LoadCloudFileListAsyncTask:mFolderContentLoaded	Z
    //   17: aload_0
    //   18: invokespecial 372	com/adobe/reader/cloud/async/LoadCloudFileListAsyncTask:getCachedFolderETag	()Ljava/lang/String;
    //   21: astore_2
    //   22: new 199	java/lang/StringBuilder
    //   25: dup
    //   26: ldc_w 374
    //   29: invokespecial 206	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   32: aload_0
    //   33: getfield 51	com/adobe/reader/cloud/async/LoadCloudFileListAsyncTask:mCurrentDirectory	Ljava/lang/String;
    //   36: invokevirtual 212	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   39: invokevirtual 215	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   42: invokestatic 189	com/adobe/reader/cloud/CloudUtilities:logit	(Ljava/lang/String;)V
    //   45: aload_0
    //   46: getfield 370	com/adobe/reader/cloud/async/LoadCloudFileListAsyncTask:mFolderContentLoaded	Z
    //   49: ifne +22 -> 71
    //   52: aload_0
    //   53: getfield 45	com/adobe/reader/cloud/async/LoadCloudFileListAsyncTask:mActivity	Landroid/app/Activity;
    //   56: new 9	com/adobe/reader/cloud/async/LoadCloudFileListAsyncTask$ShowLoadingPageRunnable
    //   59: dup
    //   60: aload_0
    //   61: aload_0
    //   62: getfield 47	com/adobe/reader/cloud/async/LoadCloudFileListAsyncTask:mUIHandler	Lcom/adobe/reader/cloud/ui/LoadCloudFileListInterface;
    //   65: invokespecial 377	com/adobe/reader/cloud/async/LoadCloudFileListAsyncTask$ShowLoadingPageRunnable:<init>	(Lcom/adobe/reader/cloud/async/LoadCloudFileListAsyncTask;Lcom/adobe/reader/cloud/ui/LoadCloudFileListInterface;)V
    //   68: invokevirtual 381	android/app/Activity:runOnUiThread	(Ljava/lang/Runnable;)V
    //   71: aload_0
    //   72: getfield 383	com/adobe/reader/cloud/async/LoadCloudFileListAsyncTask:mCloudAvailable	Z
    //   75: ifeq +58 -> 133
    //   78: aload_1
    //   79: aload_2
    //   80: invokestatic 385	com/adobe/reader/cloud/async/LoadCloudFileListAsyncTask:getFolderContentsFromCloud	(Ljava/lang/String;Ljava/lang/String;)Lorg/json/JSONObject;
    //   83: astore_1
    //   84: aload_1
    //   85: ifnull +48 -> 133
    //   88: aload_0
    //   89: aload_1
    //   90: invokespecial 368	com/adobe/reader/cloud/async/LoadCloudFileListAsyncTask:displayFolder	(Lorg/json/JSONObject;)Ljava/util/ArrayList;
    //   93: astore_2
    //   94: aload_0
    //   95: iconst_1
    //   96: putfield 370	com/adobe/reader/cloud/async/LoadCloudFileListAsyncTask:mFolderContentLoaded	Z
    //   99: aload_0
    //   100: aload_3
    //   101: aload_2
    //   102: invokespecial 389	com/adobe/reader/cloud/async/LoadCloudFileListAsyncTask:updateCachedFilesMetadata	(Ljava/util/ArrayList;Ljava/util/ArrayList;)V
    //   105: new 199	java/lang/StringBuilder
    //   108: dup
    //   109: ldc_w 391
    //   112: invokespecial 206	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   115: aload_0
    //   116: getfield 51	com/adobe/reader/cloud/async/LoadCloudFileListAsyncTask:mCurrentDirectory	Ljava/lang/String;
    //   119: invokevirtual 212	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   122: invokevirtual 215	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   125: invokestatic 189	com/adobe/reader/cloud/CloudUtilities:logit	(Ljava/lang/String;)V
    //   128: aload_0
    //   129: aload_1
    //   130: invokespecial 395	com/adobe/reader/cloud/async/LoadCloudFileListAsyncTask:setCachedFolderContent	(Lorg/json/JSONObject;)V
    //   133: return
    //   134: astore_2
    //   135: aconst_null
    //   136: astore_2
    //   137: goto -115 -> 22
    //   140: astore 4
    //   142: aconst_null
    //   143: astore_2
    //   144: aconst_null
    //   145: astore_3
    //   146: new 199	java/lang/StringBuilder
    //   149: dup
    //   150: ldc_w 397
    //   153: invokespecial 206	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   156: aload 4
    //   158: invokevirtual 400	java/lang/Exception:getMessage	()Ljava/lang/String;
    //   161: invokevirtual 212	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   164: invokevirtual 215	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   167: invokestatic 189	com/adobe/reader/cloud/CloudUtilities:logit	(Ljava/lang/String;)V
    //   170: goto -125 -> 45
    //   173: astore_1
    //   174: new 199	java/lang/StringBuilder
    //   177: dup
    //   178: ldc_w 402
    //   181: invokespecial 206	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   184: aload_0
    //   185: getfield 51	com/adobe/reader/cloud/async/LoadCloudFileListAsyncTask:mCurrentDirectory	Ljava/lang/String;
    //   188: invokevirtual 212	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   191: aload_1
    //   192: invokevirtual 400	java/lang/Exception:getMessage	()Ljava/lang/String;
    //   195: invokevirtual 212	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   198: invokevirtual 215	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   201: invokestatic 189	com/adobe/reader/cloud/CloudUtilities:logit	(Ljava/lang/String;)V
    //   204: return
    //   205: astore 4
    //   207: aconst_null
    //   208: astore_2
    //   209: goto -63 -> 146
    //   212: astore 4
    //   214: goto -68 -> 146
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	217	0	this	LoadCloudFileListAsyncTask
    //   0	217	1	paramString	String
    //   21	81	2	localObject1	Object
    //   134	1	2	localException1	Exception
    //   136	73	2	localObject2	Object
    //   11	135	3	localArrayList	ArrayList
    //   140	17	4	localException2	Exception
    //   205	1	4	localException3	Exception
    //   212	1	4	localException4	Exception
    // Exception table:
    //   from	to	target	type
    //   17	22	134	java/lang/Exception
    //   0	12	140	java/lang/Exception
    //   128	133	173	java/lang/Exception
    //   12	17	205	java/lang/Exception
    //   22	45	212	java/lang/Exception
  }
  
  private void loadFilesInTransfer()
  {
    ArrayList localArrayList = CloudTransferManager.getInstance().getARFileEntryList();
    int i;
    if ((localArrayList != null) && (localArrayList.size() > 0)) {
      i = 0;
    }
    for (;;)
    {
      if (i >= localArrayList.size())
      {
        this.mActivity.runOnUiThread(new ShowTransferListRunnable(null));
        return;
      }
      ARFileEntry localARFileEntry = (ARFileEntry)localArrayList.get(i);
      synchronized (this.mPdfFileList)
      {
        this.mPdfFileList.add(localARFileEntry);
        i += 1;
      }
    }
  }
  
  /* Error */
  private static String readContentFromFile(File paramFile)
    throws IOException
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore_2
    //   2: new 418	java/io/FileInputStream
    //   5: dup
    //   6: aload_0
    //   7: invokespecial 421	java/io/FileInputStream:<init>	(Ljava/io/File;)V
    //   10: astore_0
    //   11: new 423	java/io/BufferedReader
    //   14: dup
    //   15: new 425	java/io/InputStreamReader
    //   18: dup
    //   19: aload_0
    //   20: ldc_w 427
    //   23: invokespecial 430	java/io/InputStreamReader:<init>	(Ljava/io/InputStream;Ljava/lang/String;)V
    //   26: bipush 8
    //   28: invokespecial 433	java/io/BufferedReader:<init>	(Ljava/io/Reader;I)V
    //   31: astore_1
    //   32: new 199	java/lang/StringBuilder
    //   35: dup
    //   36: invokespecial 434	java/lang/StringBuilder:<init>	()V
    //   39: astore_2
    //   40: aload_1
    //   41: invokevirtual 437	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   44: astore_3
    //   45: aload_3
    //   46: ifnonnull +26 -> 72
    //   49: aload_2
    //   50: invokevirtual 215	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   53: astore_2
    //   54: aload_0
    //   55: ifnull +7 -> 62
    //   58: aload_0
    //   59: invokevirtual 440	java/io/FileInputStream:close	()V
    //   62: aload_1
    //   63: ifnull +7 -> 70
    //   66: aload_1
    //   67: invokevirtual 441	java/io/BufferedReader:close	()V
    //   70: aload_2
    //   71: areturn
    //   72: aload_2
    //   73: new 199	java/lang/StringBuilder
    //   76: dup
    //   77: aload_3
    //   78: invokestatic 205	java/lang/String:valueOf	(Ljava/lang/Object;)Ljava/lang/String;
    //   81: invokespecial 206	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   84: ldc_w 443
    //   87: invokevirtual 212	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   90: invokevirtual 215	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   93: invokevirtual 212	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   96: pop
    //   97: goto -57 -> 40
    //   100: astore_3
    //   101: aload_0
    //   102: astore_2
    //   103: aload_3
    //   104: astore_0
    //   105: aload_2
    //   106: ifnull +7 -> 113
    //   109: aload_2
    //   110: invokevirtual 440	java/io/FileInputStream:close	()V
    //   113: aload_1
    //   114: ifnull +7 -> 121
    //   117: aload_1
    //   118: invokevirtual 441	java/io/BufferedReader:close	()V
    //   121: aload_0
    //   122: athrow
    //   123: astore_0
    //   124: aconst_null
    //   125: astore_1
    //   126: goto -21 -> 105
    //   129: astore_3
    //   130: aconst_null
    //   131: astore_1
    //   132: aload_0
    //   133: astore_2
    //   134: aload_3
    //   135: astore_0
    //   136: goto -31 -> 105
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	139	0	paramFile	File
    //   31	101	1	localBufferedReader	java.io.BufferedReader
    //   1	133	2	localObject1	Object
    //   44	34	3	str	String
    //   100	4	3	localObject2	Object
    //   129	6	3	localObject3	Object
    // Exception table:
    //   from	to	target	type
    //   32	40	100	finally
    //   40	45	100	finally
    //   49	54	100	finally
    //   72	97	100	finally
    //   2	11	123	finally
    //   11	32	129	finally
  }
  
  private void removeUpDirectoryEntry()
  {
    if (this.mPdfFilesAdapter.getAdapterType() == ARFileEntryAdapter.ADAPTER_TYPE.FOLDER_VIEW) {
      this.mActivity.findViewById(2131493067).setVisibility(8);
    }
  }
  
  private void setCachedFolderContent(JSONObject paramJSONObject)
    throws IOException
  {
    writeStringToFile(new File(this.mActivity.getDir(".Skybox.Cache", 0), this.mCurrentDirectoryID), paramJSONObject.toString());
    CloudUtilities.logit("Set folder contents to cache\n");
  }
  
  private static void setCachedFolderETag(String paramString1, String paramString2)
    throws IOException
  {
    writeStringToFile(new File(ARApp.getAppContext().getDir(".Skybox.Cache", 0), paramString1 + "_ETag"), paramString2);
    CloudUtilities.logit("Set folder Etag to cache\n");
  }
  
  private void setUpDirectoryEntry()
  {
    if (!this.mUpEntryShown)
    {
      if (!this.mCurrentDirectory.equals(ARConstants.CloudConstants.CLOUD_ROOT_DIRECTORY)) {
        break label30;
      }
      removeUpDirectoryEntry();
    }
    for (;;)
    {
      this.mUpEntryShown = true;
      return;
      label30:
      addUpDirectoryEntry(this.mCurrentDirectory);
    }
  }
  
  private void updateCachedFilesMetadata(ArrayList<ARFileEntry> paramArrayList1, ArrayList<ARFileEntry> paramArrayList2)
  {
    Object localObject1 = paramArrayList2.iterator();
    if (!((Iterator)localObject1).hasNext()) {
      if (paramArrayList1 != null) {
        paramArrayList1 = paramArrayList1.iterator();
      }
    }
    for (;;)
    {
      if (!paramArrayList1.hasNext())
      {
        return;
        localObject2 = (ARFileEntry)((Iterator)localObject1).next();
        CloudUtilities.updateCachedFileModifiedDate(((ARFileEntry)localObject2).getFileID(), ((ARFileEntry)localObject2).getCloudModifiedDate());
        break;
      }
      Object localObject2 = (ARFileEntry)paramArrayList1.next();
      localObject1 = ((ARFileEntry)localObject2).getFileID();
      Object localObject3 = paramArrayList2.iterator();
      label87:
      if (!((Iterator)localObject3).hasNext()) {}
      for (int i = 1;; i = 0)
      {
        if (i == 0) {
          break label179;
        }
        localObject3 = CloudUtilities.convertCloudPathToAbsolute(((ARFileEntry)localObject2).getFilePath());
        File localFile = new File((String)localObject3);
        localObject2 = ((ARFileEntry)localObject2).getFileEntryType();
        if (!localFile.exists()) {
          break;
        }
        if (localObject2 != ARFileEntry.FILE_ENTRY_TYPE.FILE) {
          break label181;
        }
        CloudUtilities.deleteCachedFileWithID((String)localObject1);
        break;
        if (!((String)localObject1).equals(((ARFileEntry)((Iterator)localObject3).next()).getFileID())) {
          break label87;
        }
      }
      label179:
      continue;
      label181:
      CloudUtilities.deleteCachedFilesInFolder((String)localObject3);
    }
  }
  
  private static void writeStringToFile(File paramFile, String paramString)
    throws IOException
  {
    try
    {
      localFileOutputStream = new FileOutputStream(paramFile);
      if (paramString == null) {
        break label37;
      }
    }
    finally
    {
      try
      {
        localFileOutputStream.write(paramString.getBytes());
        if (localFileOutputStream != null) {
          localFileOutputStream.close();
        }
        return;
      }
      finally
      {
        FileOutputStream localFileOutputStream;
        paramString = localFileOutputStream;
      }
      paramFile = finally;
      paramString = null;
    }
    paramString.close();
    label37:
    throw paramFile;
  }
  
  protected Void doInBackground(Void... paramVarArgs)
  {
    try
    {
      if (this.mSource == CloudFileListLoader.FILE_LIST_SOURCE.FROM_CLOUD) {
        loadFilesFromCloud(this.mCurrentDirectoryID);
      } else {
        loadFilesInTransfer();
      }
    }
    catch (Exception paramVarArgs)
    {
      CloudUtilities.logit(paramVarArgs.getMessage());
    }
    return null;
  }
  
  protected void onPostExecute(Void paramVoid)
  {
    if ((this.mSource == CloudFileListLoader.FILE_LIST_SOURCE.FROM_CLOUD) && (!this.mFolderContentLoaded)) {
      this.mUIHandler.onLoadCloudFileListFailed();
    }
  }
  
  protected void onPreExecute()
  {
    this.mUIHandler.onLoadCloudFileListStarted();
    synchronized (this.mPdfFileList)
    {
      this.mPdfFileList.clear();
      this.mFolderContentLoaded = false;
      this.mCloudAvailable = CloudUtilities.isNetworkAvailable(this.mActivity);
      this.mUpEntryShown = false;
      return;
    }
  }
  
  protected void onProgressUpdate(Void... paramVarArgs)
  {
    super.onProgressUpdate(paramVarArgs);
    addFolderContentToAdapter();
    setUpDirectoryEntry();
    this.mUIHandler.onLoadCloudFileListSuccess();
  }
  
  private class ShowLoadingPageRunnable
    implements Runnable
  {
    private LoadCloudFileListInterface mCloudUIHandler;
    
    public ShowLoadingPageRunnable(LoadCloudFileListInterface paramLoadCloudFileListInterface)
    {
      this.mCloudUIHandler = paramLoadCloudFileListInterface;
    }
    
    public void run()
    {
      this.mCloudUIHandler.onLoadCloudFileListLoading();
    }
  }
  
  private class ShowTransferListRunnable
    implements Runnable
  {
    private ShowTransferListRunnable() {}
    
    public void run()
    {
      LoadCloudFileListAsyncTask.this.addFolderContentToAdapter();
      LoadCloudFileListAsyncTask.this.mUIHandler.onLoadCloudFileListSuccess();
    }
  }
}
