package com.adobe.reader.cloud.async;

import android.app.Service;
import android.content.Intent;
import com.adobe.reader.ARConstants.CloudConstants.CLOUD_TASK_RESULT;
import com.adobe.reader.ARFileBrowserUtils;
import com.adobe.reader.LocalBroadcastManager;
import com.adobe.reader.cloud.CloudUtilities;
import com.adobe.reader.cloud.network.BlueHeronAPI.API_LIST;
import com.adobe.reader.cloud.network.BlueHeronAPI.HTTP_METHOD_TYPE;
import com.adobe.reader.cloud.network.CloudFileTransferService.TRANSFER_TYPE;
import com.adobe.reader.cloud.network.CloudNetworkManager;
import com.adobe.reader.cloud.network.CustomMultiPartEntity;
import com.adobe.reader.cloud.network.CustomMultiPartEntity.ProgressListener;
import java.io.File;
import java.io.IOException;
import java.net.SocketTimeoutException;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.entity.mime.content.FileBody;

public class FileUpdateAsyncTask
  extends FileTransferAbstractAsyncTask
{
  private String mFileID;
  private String mFilePathAbsolute;
  private Service mServiceContext;
  
  public FileUpdateAsyncTask(Service paramService, String paramString1, String paramString2, boolean paramBoolean)
  {
    super(paramService, paramString1, paramString2, CloudFileTransferService.TRANSFER_TYPE.UPDATE, paramBoolean);
    this.mServiceContext = paramService;
    this.mFilePathAbsolute = paramString1;
    this.mFileID = paramString2;
  }
  
  private HttpResponse updateFile(File paramFile, String paramString)
    throws IOException, SocketTimeoutException
  {
    this.mHttpRequest = CloudNetworkManager.getHttpRequest(BlueHeronAPI.API_LIST.PUT_ASSETS_ID, new String[] { paramString });
    paramString = new CustomMultiPartEntity();
    paramString.addPart("file", new FileBody(paramFile, "application/pdf"));
    ((HttpPut)this.mHttpRequest).setEntity(paramString);
    paramString.setProgressListener(new CustomMultiPartEntity.ProgressListener()
    {
      public void transferred(int paramAnonymousInt)
      {
        if (!FileUpdateAsyncTask.this.isCancelled())
        {
          if (FileUpdateAsyncTask.this.isModal())
          {
            Intent localIntent = new Intent("com.adobe.reader.cloud.CloudFileTransferService.ProgressUpdate");
            localIntent.putExtra("PROGRESS_UPDATED_key", paramAnonymousInt);
            LocalBroadcastManager.getInstance(FileUpdateAsyncTask.this.mServiceContext).sendBroadcast(localIntent);
          }
          return;
        }
        FileUpdateAsyncTask.this.mHttpRequest.abort();
      }
    });
    return CloudNetworkManager.getHttpMethodResponse(this.mHttpRequest, BlueHeronAPI.HTTP_METHOD_TYPE.PUT);
  }
  
  public void executeTask()
    throws IOException, SocketTimeoutException
  {
    File localFile1 = new File(this.mFilePathAbsolute);
    try
    {
      localFile2 = new File(CloudUtilities.getAppPrivateExternalDir(), "temp_file");
      try
      {
        if (localFile2.exists()) {
          localFile2.delete();
        }
        ARFileBrowserUtils.copyFileContents(localFile1, localFile2);
        if (localFile2.exists())
        {
          updateFile(localFile2, this.mFileID);
          if (!isCancelled())
          {
            long l = CloudUtilities.getModifiedDateFromCloud(this.mFileID);
            CloudUtilities.updateCachedFile(this.mFilePathAbsolute, this.mFileID, l);
          }
          if (localFile2.exists()) {
            localFile2.delete();
          }
          return;
        }
        throw new IOException("Temp file could not be created !");
      }
      finally {}
    }
    finally
    {
      File localFile2 = null;
    }
    if (localFile2.exists()) {
      localFile2.delete();
    }
    throw localObject1;
  }
  
  public String getSystemNotificationMsg(ARConstants.CloudConstants.CLOUD_TASK_RESULT paramCLOUD_TASK_RESULT)
  {
    switch (paramCLOUD_TASK_RESULT)
    {
    case QUOTA_EXCEEDED: 
    default: 
      return this.mServiceContext.getString(2131362099);
    case FAILURE: 
      paramCLOUD_TASK_RESULT = new File(this.mFilePathAbsolute).getName();
      return this.mServiceContext.getString(2131362088).replaceAll("%s", paramCLOUD_TASK_RESULT);
    case SUCCESS: 
      return this.mServiceContext.getString(2131362090);
    }
    return this.mServiceContext.getString(2131362099);
  }
}
