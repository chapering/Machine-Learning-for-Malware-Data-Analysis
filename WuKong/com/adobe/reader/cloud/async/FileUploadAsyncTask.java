package com.adobe.reader.cloud.async;

import android.app.Service;
import android.content.Intent;
import com.adobe.reader.ARConstants.CloudConstants;
import com.adobe.reader.ARConstants.CloudConstants.CLOUD_TASK_RESULT;
import com.adobe.reader.ARFileBrowserUtils;
import com.adobe.reader.ARFileEntry;
import com.adobe.reader.LocalBroadcastManager;
import com.adobe.reader.cloud.CloudUtilities;
import com.adobe.reader.cloud.network.BlueHeronAPI.API_LIST;
import com.adobe.reader.cloud.network.BlueHeronAPI.HTTP_METHOD_TYPE;
import com.adobe.reader.cloud.network.CloudFileTransferService.TRANSFER_TYPE;
import com.adobe.reader.cloud.network.CloudNetworkManager;
import com.adobe.reader.cloud.network.CustomMultiPartEntity;
import com.adobe.reader.cloud.network.CustomMultiPartEntity.ProgressListener;
import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Iterator;
import org.apache.http.HttpEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.entity.StringEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class FileUploadAsyncTask
  extends FileTransferAbstractAsyncTask
{
  private String mFileNameOnServer;
  private String mFilePathAbsolute;
  private Service mServiceContext;
  private String mUploadFolderID;
  
  public FileUploadAsyncTask(Service paramService, String paramString, boolean paramBoolean)
  {
    super(paramService, paramString, null, CloudFileTransferService.TRANSFER_TYPE.UPLOAD, paramBoolean);
    this.mServiceContext = paramService;
    this.mFilePathAbsolute = paramString;
  }
  
  private boolean folderContainsFileName(ArrayList<ARFileEntry> paramArrayList, String paramString)
  {
    paramArrayList = paramArrayList.iterator();
    do
    {
      if (!paramArrayList.hasNext()) {
        return false;
      }
    } while (!((ARFileEntry)paramArrayList.next()).getFileName().toLowerCase().equals(paramString.toLowerCase()));
    return true;
  }
  
  private String getUniqueFileName(String paramString1, String paramString2, String paramString3)
    throws IOException
  {
    try
    {
      JSONObject localJSONObject = LoadCloudFileListAsyncTask.getCachedFolderContent(paramString2);
      paramString2 = localJSONObject;
    }
    catch (Exception localException)
    {
      for (;;)
      {
        int i;
        paramString2 = LoadCloudFileListAsyncTask.getFolderContentsFromCloud(paramString2, null);
      }
    }
    paramString3 = LoadCloudFileListAsyncTask.getFolderContentFromJSON(this.mServiceContext, paramString2, paramString3);
    paramString2 = paramString1;
    if (folderContainsFileName(paramString3, paramString1))
    {
      i = 1;
      do
      {
        paramString2 = ARFileBrowserUtils.getRenamedFilePath(paramString1, i);
        i += 1;
      } while (folderContainsFileName(paramString3, paramString2));
    }
    return paramString2;
  }
  
  public void executeTask()
    throws IOException, JSONException
  {
    if (CloudNetworkManager.getRootFolderID() == null) {
      CloudNetworkManager.setRootFolderID(CloudNetworkManager.executeAPI(BlueHeronAPI.API_LIST.GET_ROOT, new String[0]).getString("id"));
    }
    Object localObject1 = uploadFile(this.mFilePathAbsolute);
    if (isCancelled()) {
      if (localObject1 != null) {
        localObject1 = CloudNetworkManager.getHttpRequest(BlueHeronAPI.API_LIST.DELETE_ASSETS_ID, new String[] { localObject1 });
      }
    }
    for (;;)
    {
      label256:
      try
      {
        CloudNetworkManager.executeHttpRequest((HttpRequestBase)localObject1, BlueHeronAPI.HTTP_METHOD_TYPE.DELETE);
        return;
      }
      catch (Exception localException) {}
      Object localObject2 = ".Skybox.Cache" + File.separator + File.separator + this.mFileNameOnServer;
      localObject2 = new File(CloudUtilities.getAppPrivateExternalDir(), (String)localObject2);
      File localFile = new File(this.mFilePathAbsolute);
      if (localFile.exists())
      {
        if (((File)localObject2).exists()) {
          CloudUtilities.deleteCachedFileWithPath(((File)localObject2).getAbsolutePath());
        }
        for (;;)
        {
          ARFileBrowserUtils.copyFileContents(localFile, (File)localObject2);
          if (!((File)localObject2).exists()) {
            break label256;
          }
          long l = CloudUtilities.getModifiedDateFromCloud((String)localObject1);
          CloudUtilities.updateCachedFile(((File)localObject2).getAbsolutePath(), (String)localObject1, l);
          super.updateFileID((String)localObject1);
          super.updateFilePath(((File)localObject2).getAbsolutePath());
          if ((this.mUploadFolderID == null) || (isCancelled())) {
            break;
          }
          localObject1 = new Intent("com.adobe.reader.ARSplitPane.docMovedToCloud");
          ((Intent)localObject1).putExtra("FILE_ID_key", this.mUploadFolderID);
          LocalBroadcastManager.getInstance(this.mServiceContext).sendBroadcast((Intent)localObject1);
          return;
          ((File)localObject2).getParentFile().mkdirs();
        }
        throw new IOException("File could not be copied into cache !");
      }
    }
  }
  
  public String getSystemNotificationMsg(ARConstants.CloudConstants.CLOUD_TASK_RESULT paramCLOUD_TASK_RESULT)
  {
    switch (paramCLOUD_TASK_RESULT)
    {
    case QUOTA_EXCEEDED: 
    default: 
      return this.mServiceContext.getString(2131362093);
    case FAILURE: 
      paramCLOUD_TASK_RESULT = new File(this.mFilePathAbsolute).getName();
      return this.mServiceContext.getString(2131362087).replaceAll("%s", paramCLOUD_TASK_RESULT);
    case SUCCESS: 
      return this.mServiceContext.getString(2131362090);
    }
    return this.mServiceContext.getString(2131362093);
  }
  
  public String getUploadFolderID()
    throws IOException
  {
    Object localObject1 = null;
    for (;;)
    {
      try
      {
        localObject3 = CloudNetworkManager.getRootFolderID();
        localJSONArray = CloudNetworkManager.executeAPI(BlueHeronAPI.API_LIST.GET_FOLDERS_ID, new String[] { localObject3 }).getJSONArray("members");
        int j = localJSONArray.length();
        i = 0;
        if (i >= j) {
          if (localObject1 != null) {
            break label240;
          }
        }
      }
      catch (JSONException localJSONException1)
      {
        Object localObject3;
        JSONArray localJSONArray;
        int i;
        Object localObject2;
        String str1;
        String str2;
        boolean bool;
        localObject1 = null;
        localJSONException1.printStackTrace();
        return localObject1;
      }
      catch (UnsupportedEncodingException localUnsupportedEncodingException1)
      {
        localObject1 = null;
        localUnsupportedEncodingException1.printStackTrace();
        return localObject1;
      }
      try
      {
        localObject2 = CloudNetworkManager.getHttpRequest(BlueHeronAPI.API_LIST.POST_FOLDERS_ID, new String[] { localObject3 });
        localObject3 = new JSONObject();
        ((JSONObject)localObject3).put("name", "");
        localObject3 = ((JSONObject)localObject3).toString();
        ((HttpPost)localObject2).setEntity(new StringEntity((String)localObject3));
        localObject2 = CloudNetworkManager.executeHttpRequest((HttpRequestBase)localObject2, BlueHeronAPI.HTTP_METHOD_TYPE.POST).getString("id");
        return localObject2;
      }
      catch (UnsupportedEncodingException localUnsupportedEncodingException2)
      {
        continue;
      }
      catch (JSONException localJSONException2)
      {
        continue;
      }
      localObject2 = localJSONArray.getJSONObject(i);
      str1 = ((JSONObject)localObject2).getString("object_type");
      str2 = ((JSONObject)localObject2).getString("name");
      localObject2 = ((JSONObject)localObject2).getString("id");
      if (str1.equals("folder"))
      {
        bool = str2.equals("");
        if (bool)
        {
          localObject1 = localObject2;
          continue;
        }
      }
      i += 1;
    }
    label240:
    return localObject1;
  }
  
  public String uploadFile(String paramString)
    throws IOException
  {
    this.mHttpRequest = CloudNetworkManager.getHttpRequest(BlueHeronAPI.API_LIST.POST_ASSETS, new String[0]);
    try
    {
      Object localObject1 = new CustomMultiPartEntity();
      this.mUploadFolderID = CloudNetworkManager.getRootFolderID();
      Object localObject2 = new File(paramString).getName();
      String str = ARConstants.CloudConstants.CLOUD_ROOT_DIRECTORY;
      try
      {
        this.mFileNameOnServer = getUniqueFileName((String)localObject2, this.mUploadFolderID, str);
        localObject2 = new JSONObject();
        ((JSONObject)localObject2).put("name", this.mFileNameOnServer);
        ((JSONObject)localObject2).put("parent_id", this.mUploadFolderID);
        ((JSONObject)localObject2).put("on_dup_name", "auto_rename");
        ((CustomMultiPartEntity)localObject1).addPart("metadata", new StringBody(((JSONObject)localObject2).toString(), Charset.forName("utf-8")));
        ((CustomMultiPartEntity)localObject1).addPart("file", new FileBody(new File(paramString), "application/pdf"));
        ((HttpPost)this.mHttpRequest).setEntity((HttpEntity)localObject1);
        long l = ((CustomMultiPartEntity)localObject1).getContentLength();
        CloudUtilities.logit("total size of uploaded file = " + Long.toString(l));
        ((CustomMultiPartEntity)localObject1).setProgressListener(new CustomMultiPartEntity.ProgressListener()
        {
          public void transferred(int paramAnonymousInt)
          {
            if (!FileUploadAsyncTask.this.isCancelled())
            {
              Intent localIntent = new Intent("com.adobe.reader.cloud.CloudFileTransferService.ProgressUpdate");
              localIntent.putExtra("PROGRESS_UPDATED_key", paramAnonymousInt);
              LocalBroadcastManager.getInstance(FileUploadAsyncTask.this.mServiceContext).sendBroadcast(localIntent);
              return;
            }
            FileUploadAsyncTask.this.mHttpRequest.abort();
          }
        });
        localObject1 = CloudNetworkManager.executeHttpRequest(this.mHttpRequest, BlueHeronAPI.HTTP_METHOD_TYPE.POST);
        paramString = ((JSONObject)localObject1).getString("id");
      }
      catch (IOException localIOException)
      {
        for (;;)
        {
          try
          {
            this.mFileNameOnServer = ((JSONObject)localObject1).getString("renamed_to");
            return paramString;
          }
          catch (UnsupportedEncodingException localUnsupportedEncodingException2)
          {
            continue;
          }
          catch (JSONException localJSONException) {}
          localIOException = localIOException;
          this.mFileNameOnServer = ((String)localObject2);
        }
      }
      return paramString;
    }
    catch (JSONException paramString)
    {
      throw new IOException();
    }
    catch (UnsupportedEncodingException localUnsupportedEncodingException1)
    {
      paramString = null;
      localUnsupportedEncodingException1.printStackTrace();
      return paramString;
    }
  }
}
