package com.adobe.reader.cloud.async;

import android.app.Service;
import com.adobe.reader.ARConstants.CloudConstants.CLOUD_TASK_RESULT;
import com.adobe.reader.cloud.CloudUtilities;
import com.adobe.reader.cloud.network.BlueHeronAPI.API_LIST;
import com.adobe.reader.cloud.network.BlueHeronAPI.HTTP_METHOD_TYPE;
import com.adobe.reader.cloud.network.CloudFileTransferService.TRANSFER_TYPE;
import com.adobe.reader.cloud.network.CloudNetworkManager;
import java.io.File;
import java.io.IOException;
import java.net.SocketTimeoutException;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpRequestBase;
import org.json.JSONObject;

public class FileDownloadAsyncTask
  extends FileTransferAbstractAsyncTask
{
  private static final int BUFFERSIZE = 10240;
  private long mCloudModifiedDate;
  private String mFileID;
  private String mFilePathAbsolute;
  private Service mServiceContext;
  
  public FileDownloadAsyncTask(Service paramService, String paramString1, String paramString2, long paramLong, boolean paramBoolean)
  {
    super(paramService, paramString1, paramString2, CloudFileTransferService.TRANSFER_TYPE.DOWNLOAD, paramBoolean);
    this.mServiceContext = paramService;
    this.mFilePathAbsolute = paramString1;
    this.mFileID = paramString2;
    this.mCloudModifiedDate = paramLong;
  }
  
  public static HttpResponse downloadFile(String paramString)
    throws IOException, SocketTimeoutException
  {
    String str = CloudNetworkManager.getDownloadToken();
    paramString = CloudNetworkManager.getHttpRequest(BlueHeronAPI.API_LIST.GET_ASSETS_ID, new String[] { paramString });
    paramString.setHeader("Authorization", "Download " + str);
    return CloudNetworkManager.getHttpMethodResponse(paramString, BlueHeronAPI.HTTP_METHOD_TYPE.GET);
  }
  
  /* Error */
  private void downloadFile()
    throws IOException, SocketTimeoutException
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 8
    //   3: aconst_null
    //   4: astore 10
    //   6: iconst_0
    //   7: istore_1
    //   8: aload_0
    //   9: getfield 64	com/adobe/reader/cloud/async/FileDownloadAsyncTask:mCloudModifiedDate	J
    //   12: ldc2_w 125
    //   15: lcmp
    //   16: ifne +15 -> 31
    //   19: aload_0
    //   20: aload_0
    //   21: aload_0
    //   22: getfield 62	com/adobe/reader/cloud/async/FileDownloadAsyncTask:mFileID	Ljava/lang/String;
    //   25: invokespecial 130	com/adobe/reader/cloud/async/FileDownloadAsyncTask:getModifiedDateFromCloud	(Ljava/lang/String;)J
    //   28: putfield 64	com/adobe/reader/cloud/async/FileDownloadAsyncTask:mCloudModifiedDate	J
    //   31: aload_0
    //   32: getfield 62	com/adobe/reader/cloud/async/FileDownloadAsyncTask:mFileID	Ljava/lang/String;
    //   35: invokestatic 132	com/adobe/reader/cloud/async/FileDownloadAsyncTask:downloadFile	(Ljava/lang/String;)Lorg/apache/http/HttpResponse;
    //   38: astore 12
    //   40: new 134	java/io/File
    //   43: dup
    //   44: aload_0
    //   45: getfield 60	com/adobe/reader/cloud/async/FileDownloadAsyncTask:mFilePathAbsolute	Ljava/lang/String;
    //   48: invokespecial 135	java/io/File:<init>	(Ljava/lang/String;)V
    //   51: astore 11
    //   53: aload 11
    //   55: invokevirtual 139	java/io/File:exists	()Z
    //   58: ifeq +190 -> 248
    //   61: aload 11
    //   63: invokevirtual 142	java/io/File:getAbsolutePath	()Ljava/lang/String;
    //   66: invokestatic 147	com/adobe/reader/cloud/CloudUtilities:deleteCachedFileWithPath	(Ljava/lang/String;)V
    //   69: new 149	java/io/FileOutputStream
    //   72: dup
    //   73: aload 11
    //   75: invokespecial 152	java/io/FileOutputStream:<init>	(Ljava/io/File;)V
    //   78: astore 9
    //   80: aload 10
    //   82: astore 7
    //   84: aload 12
    //   86: invokeinterface 158 1 0
    //   91: astore 12
    //   93: aload 10
    //   95: astore 7
    //   97: aload 12
    //   99: invokeinterface 164 1 0
    //   104: astore 8
    //   106: aload 8
    //   108: astore 7
    //   110: aload 12
    //   112: invokeinterface 168 1 0
    //   117: lstore 5
    //   119: lconst_0
    //   120: lstore_3
    //   121: aload 8
    //   123: astore 7
    //   125: sipush 10240
    //   128: newarray byte
    //   130: astore 10
    //   132: aload 8
    //   134: astore 7
    //   136: aload_0
    //   137: invokevirtual 171	com/adobe/reader/cloud/async/FileDownloadAsyncTask:isCancelled	()Z
    //   140: ifne +19 -> 159
    //   143: aload 8
    //   145: astore 7
    //   147: aload 8
    //   149: aload 10
    //   151: invokevirtual 177	java/io/InputStream:read	([B)I
    //   154: istore_2
    //   155: iload_2
    //   156: ifgt +104 -> 260
    //   159: lload_3
    //   160: lload 5
    //   162: lcmp
    //   163: ifne +148 -> 311
    //   166: aload 8
    //   168: astore 7
    //   170: aload 11
    //   172: invokevirtual 142	java/io/File:getAbsolutePath	()Ljava/lang/String;
    //   175: aload_0
    //   176: getfield 62	com/adobe/reader/cloud/async/FileDownloadAsyncTask:mFileID	Ljava/lang/String;
    //   179: aload_0
    //   180: getfield 64	com/adobe/reader/cloud/async/FileDownloadAsyncTask:mCloudModifiedDate	J
    //   183: invokestatic 181	com/adobe/reader/cloud/CloudUtilities:updateCachedFile	(Ljava/lang/String;Ljava/lang/String;J)V
    //   186: aload 8
    //   188: astore 7
    //   190: aload_0
    //   191: getfield 62	com/adobe/reader/cloud/async/FileDownloadAsyncTask:mFileID	Ljava/lang/String;
    //   194: invokestatic 185	com/adobe/reader/cloud/CloudUtilities:getLastViewedPageNumFromCloud	(Ljava/lang/String;)I
    //   197: istore_1
    //   198: iload_1
    //   199: iconst_m1
    //   200: if_icmpeq +15 -> 215
    //   203: aload 8
    //   205: astore 7
    //   207: aload_0
    //   208: getfield 62	com/adobe/reader/cloud/async/FileDownloadAsyncTask:mFileID	Ljava/lang/String;
    //   211: iload_1
    //   212: invokestatic 189	com/adobe/reader/cloud/CloudUtilities:updateCachedFileLastViewedPageNum	(Ljava/lang/String;I)V
    //   215: aload 9
    //   217: ifnull +8 -> 225
    //   220: aload 9
    //   222: invokevirtual 192	java/io/FileOutputStream:close	()V
    //   225: aload 8
    //   227: ifnull +8 -> 235
    //   230: aload 8
    //   232: invokevirtual 193	java/io/InputStream:close	()V
    //   235: return
    //   236: astore 7
    //   238: new 68	java/io/IOException
    //   241: dup
    //   242: ldc -61
    //   244: invokespecial 196	java/io/IOException:<init>	(Ljava/lang/String;)V
    //   247: athrow
    //   248: aload 11
    //   250: invokevirtual 200	java/io/File:getParentFile	()Ljava/io/File;
    //   253: invokevirtual 203	java/io/File:mkdirs	()Z
    //   256: pop
    //   257: goto -188 -> 69
    //   260: aload 8
    //   262: astore 7
    //   264: aload 9
    //   266: aload 10
    //   268: iconst_0
    //   269: iload_2
    //   270: invokevirtual 207	java/io/FileOutputStream:write	([BII)V
    //   273: lload_3
    //   274: iload_2
    //   275: i2l
    //   276: ladd
    //   277: lstore_3
    //   278: aload 8
    //   280: astore 7
    //   282: ldc2_w 208
    //   285: lload_3
    //   286: lmul
    //   287: lload 5
    //   289: ldiv
    //   290: l2i
    //   291: istore_2
    //   292: iload_2
    //   293: iload_1
    //   294: if_icmpeq +71 -> 365
    //   297: aload 8
    //   299: astore 7
    //   301: aload_0
    //   302: iload_2
    //   303: invokespecial 213	com/adobe/reader/cloud/async/FileTransferAbstractAsyncTask:broadcastUpdate	(I)V
    //   306: iload_2
    //   307: istore_1
    //   308: goto -176 -> 132
    //   311: aload 8
    //   313: astore 7
    //   315: aload 11
    //   317: invokevirtual 216	java/io/File:delete	()Z
    //   320: pop
    //   321: goto -106 -> 215
    //   324: astore 10
    //   326: aload 7
    //   328: astore 8
    //   330: aload 10
    //   332: astore 7
    //   334: aload 9
    //   336: ifnull +8 -> 344
    //   339: aload 9
    //   341: invokevirtual 192	java/io/FileOutputStream:close	()V
    //   344: aload 8
    //   346: ifnull +8 -> 354
    //   349: aload 8
    //   351: invokevirtual 193	java/io/InputStream:close	()V
    //   354: aload 7
    //   356: athrow
    //   357: astore 7
    //   359: aconst_null
    //   360: astore 9
    //   362: goto -28 -> 334
    //   365: goto -233 -> 132
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	368	0	this	FileDownloadAsyncTask
    //   7	301	1	i	int
    //   154	153	2	j	int
    //   120	166	3	l1	long
    //   117	171	5	l2	long
    //   82	124	7	localObject1	Object
    //   236	1	7	localException	Exception
    //   262	93	7	localObject2	Object
    //   357	1	7	localObject3	Object
    //   1	349	8	localObject4	Object
    //   78	283	9	localFileOutputStream	java.io.FileOutputStream
    //   4	263	10	arrayOfByte	byte[]
    //   324	7	10	localObject5	Object
    //   51	265	11	localFile	File
    //   38	73	12	localObject6	Object
    // Exception table:
    //   from	to	target	type
    //   19	31	236	java/lang/Exception
    //   84	93	324	finally
    //   97	106	324	finally
    //   110	119	324	finally
    //   125	132	324	finally
    //   136	143	324	finally
    //   147	155	324	finally
    //   170	186	324	finally
    //   190	198	324	finally
    //   207	215	324	finally
    //   264	273	324	finally
    //   282	292	324	finally
    //   301	306	324	finally
    //   315	321	324	finally
    //   69	80	357	finally
  }
  
  private long getModifiedDateFromCloud(String paramString)
    throws Exception
  {
    return CloudUtilities.convertServerDateToEpoch(CloudNetworkManager.getResponseBodyJson(CloudNetworkManager.getHttpMethodResponse(CloudNetworkManager.getHttpRequest(BlueHeronAPI.API_LIST.GET_ASSETS_ID_METADATA_KEY, new String[] { paramString, "modified" }), BlueHeronAPI.HTTP_METHOD_TYPE.GET)).getString("value"));
  }
  
  public void executeTask()
    throws IOException
  {
    try
    {
      downloadFile();
      return;
    }
    catch (IOException localIOException)
    {
      File localFile = new File(this.mFilePathAbsolute);
      if (localFile.exists()) {
        localFile.delete();
      }
      throw localIOException;
    }
  }
  
  public String getSystemNotificationMsg(ARConstants.CloudConstants.CLOUD_TASK_RESULT paramCLOUD_TASK_RESULT)
  {
    switch (paramCLOUD_TASK_RESULT)
    {
    case QUOTA_EXCEEDED: 
    default: 
      return this.mServiceContext.getString(2131362091);
    case FAILURE: 
      paramCLOUD_TASK_RESULT = new File(this.mFilePathAbsolute).getName();
      return this.mServiceContext.getString(2131362086).replaceAll("%s", paramCLOUD_TASK_RESULT);
    case SUCCESS: 
      return this.mServiceContext.getString(2131362090);
    }
    return this.mServiceContext.getString(2131362091);
  }
}
