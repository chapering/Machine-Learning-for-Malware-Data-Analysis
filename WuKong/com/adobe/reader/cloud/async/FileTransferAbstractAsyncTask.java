package com.adobe.reader.cloud.async;

import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.AsyncTask;
import android.os.Environment;
import com.adobe.reader.ARApp;
import com.adobe.reader.ARConstants.CloudConstants.CLOUD_TASK_RESULT;
import com.adobe.reader.LocalBroadcastManager;
import com.adobe.reader.cloud.CloudTransferManager;
import com.adobe.reader.cloud.CloudUtilities;
import com.adobe.reader.cloud.network.CloudFileTransferService.TRANSFER_TYPE;
import java.io.File;
import org.apache.http.client.methods.HttpRequestBase;

public abstract class FileTransferAbstractAsyncTask
  extends AsyncTask<Void, Integer, Void>
{
  private static final int NOTIFICATION_ID = 1;
  private BroadcastReceiver broadcastReceiver_restart = new BroadcastReceiver()
  {
    public void onReceive(Context paramAnonymousContext, Intent paramAnonymousIntent)
    {
      if (FileTransferAbstractAsyncTask.this.mThread != null) {
        FileTransferAbstractAsyncTask.this.mThread.setPriority(10);
      }
      FileTransferAbstractAsyncTask.this.setActivityStopped(false);
    }
  };
  private BroadcastReceiver broadcastReceiver_stop = new BroadcastReceiver()
  {
    public void onReceive(Context paramAnonymousContext, Intent paramAnonymousIntent)
    {
      if (FileTransferAbstractAsyncTask.this.mThread != null) {
        FileTransferAbstractAsyncTask.this.mThread.setPriority(5);
      }
      FileTransferAbstractAsyncTask.this.setActivityStopped(true);
    }
  };
  private boolean mActivityStopped = false;
  private Context mAppContext;
  private String mFileID;
  private String mFilePathAbsolute;
  protected HttpRequestBase mHttpRequest;
  private boolean mIsModal;
  protected ARConstants.CloudConstants.CLOUD_TASK_RESULT mResult;
  private Service mServiceContext;
  private int mStatusCode = -1;
  private Thread mThread = null;
  private CloudFileTransferService.TRANSFER_TYPE mTransferType;
  
  public FileTransferAbstractAsyncTask(Service paramService, String paramString1, String paramString2, CloudFileTransferService.TRANSFER_TYPE paramTRANSFER_TYPE, boolean paramBoolean)
  {
    this.mServiceContext = paramService;
    this.mAppContext = ARApp.getAppContext();
    this.mFilePathAbsolute = paramString1;
    this.mFileID = paramString2;
    this.mTransferType = paramTRANSFER_TYPE;
    this.mIsModal = paramBoolean;
  }
  
  private boolean isActivityStopped()
  {
    try
    {
      boolean bool = this.mActivityStopped;
      return bool;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  private void setActivityStopped(boolean paramBoolean)
  {
    try
    {
      this.mActivityStopped = paramBoolean;
      notify();
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  protected void broadcastUpdate(int paramInt)
  {
    Intent localIntent = new Intent("com.adobe.reader.cloud.CloudFileTransferService.ProgressUpdate");
    localIntent.putExtra("PROGRESS_UPDATED_key", paramInt);
    LocalBroadcastManager.getInstance(this.mAppContext).sendBroadcast(localIntent);
  }
  
  /* Error */
  protected Void doInBackground(Void... paramVarArgs)
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 82	com/adobe/reader/cloud/async/FileTransferAbstractAsyncTask:mServiceContext	Landroid/app/Service;
    //   4: invokestatic 157	com/adobe/reader/cloud/CloudUtilities:isNetworkAvailable	(Landroid/content/Context;)Z
    //   7: ifeq +287 -> 294
    //   10: aload_0
    //   11: getfield 98	com/adobe/reader/cloud/async/FileTransferAbstractAsyncTask:mIsModal	Z
    //   14: ifeq +19 -> 33
    //   17: aload_0
    //   18: invokestatic 163	java/lang/Thread:currentThread	()Ljava/lang/Thread;
    //   21: putfield 78	com/adobe/reader/cloud/async/FileTransferAbstractAsyncTask:mThread	Ljava/lang/Thread;
    //   24: aload_0
    //   25: getfield 78	com/adobe/reader/cloud/async/FileTransferAbstractAsyncTask:mThread	Ljava/lang/Thread;
    //   28: bipush 10
    //   30: invokevirtual 166	java/lang/Thread:setPriority	(I)V
    //   33: aload_0
    //   34: invokevirtual 169	com/adobe/reader/cloud/async/FileTransferAbstractAsyncTask:executeTask	()V
    //   37: aload_0
    //   38: getfield 98	com/adobe/reader/cloud/async/FileTransferAbstractAsyncTask:mIsModal	Z
    //   41: ifeq +169 -> 210
    //   44: aload_0
    //   45: invokespecial 171	com/adobe/reader/cloud/async/FileTransferAbstractAsyncTask:isActivityStopped	()Z
    //   48: ifeq +162 -> 210
    //   51: aload_0
    //   52: invokevirtual 174	com/adobe/reader/cloud/async/FileTransferAbstractAsyncTask:isCancelled	()Z
    //   55: ifne +155 -> 210
    //   58: aload_0
    //   59: getfield 78	com/adobe/reader/cloud/async/FileTransferAbstractAsyncTask:mThread	Ljava/lang/Thread;
    //   62: iconst_5
    //   63: invokevirtual 166	java/lang/Thread:setPriority	(I)V
    //   66: aload_0
    //   67: getfield 82	com/adobe/reader/cloud/async/FileTransferAbstractAsyncTask:mServiceContext	Landroid/app/Service;
    //   70: ldc -80
    //   72: invokevirtual 182	android/app/Service:getSystemService	(Ljava/lang/String;)Ljava/lang/Object;
    //   75: checkcast 184	android/app/NotificationManager
    //   78: astore_1
    //   79: aload_0
    //   80: aload_0
    //   81: getfield 186	com/adobe/reader/cloud/async/FileTransferAbstractAsyncTask:mResult	Lcom/adobe/reader/ARConstants$CloudConstants$CLOUD_TASK_RESULT;
    //   84: invokevirtual 190	com/adobe/reader/cloud/async/FileTransferAbstractAsyncTask:getSystemNotificationMsg	(Lcom/adobe/reader/ARConstants$CloudConstants$CLOUD_TASK_RESULT;)Ljava/lang/String;
    //   87: astore_2
    //   88: aload_0
    //   89: getfield 82	com/adobe/reader/cloud/async/FileTransferAbstractAsyncTask:mServiceContext	Landroid/app/Service;
    //   92: ldc -65
    //   94: invokevirtual 195	android/app/Service:getString	(I)Ljava/lang/String;
    //   97: astore_3
    //   98: new 117	android/content/Intent
    //   101: dup
    //   102: aload_0
    //   103: getfield 82	com/adobe/reader/cloud/async/FileTransferAbstractAsyncTask:mServiceContext	Landroid/app/Service;
    //   106: ldc -59
    //   108: invokespecial 200	android/content/Intent:<init>	(Landroid/content/Context;Ljava/lang/Class;)V
    //   111: astore 4
    //   113: aload 4
    //   115: ldc -54
    //   117: invokevirtual 206	android/content/Intent:setAction	(Ljava/lang/String;)Landroid/content/Intent;
    //   120: pop
    //   121: aload 4
    //   123: ldc -49
    //   125: invokevirtual 211	android/content/Intent:addFlags	(I)Landroid/content/Intent;
    //   128: pop
    //   129: aload 4
    //   131: ldc -44
    //   133: invokevirtual 211	android/content/Intent:addFlags	(I)Landroid/content/Intent;
    //   136: pop
    //   137: aload_0
    //   138: getfield 82	com/adobe/reader/cloud/async/FileTransferAbstractAsyncTask:mServiceContext	Landroid/app/Service;
    //   141: iconst_0
    //   142: aload 4
    //   144: ldc -43
    //   146: invokestatic 219	android/app/PendingIntent:getActivity	(Landroid/content/Context;ILandroid/content/Intent;I)Landroid/app/PendingIntent;
    //   149: astore 4
    //   151: new 221	android/app/Notification
    //   154: dup
    //   155: ldc -34
    //   157: aload_2
    //   158: invokestatic 228	java/lang/System:currentTimeMillis	()J
    //   161: invokespecial 231	android/app/Notification:<init>	(ILjava/lang/CharSequence;J)V
    //   164: astore 5
    //   166: aload 5
    //   168: aload 5
    //   170: getfield 234	android/app/Notification:flags	I
    //   173: bipush 16
    //   175: ior
    //   176: putfield 234	android/app/Notification:flags	I
    //   179: aload 5
    //   181: aload_0
    //   182: getfield 82	com/adobe/reader/cloud/async/FileTransferAbstractAsyncTask:mServiceContext	Landroid/app/Service;
    //   185: aload_3
    //   186: aload_2
    //   187: aload 4
    //   189: invokevirtual 238	android/app/Notification:setLatestEventInfo	(Landroid/content/Context;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Landroid/app/PendingIntent;)V
    //   192: aload_1
    //   193: iconst_1
    //   194: aload 5
    //   196: invokevirtual 241	android/app/NotificationManager:notify	(ILandroid/app/Notification;)V
    //   199: aload_0
    //   200: monitorenter
    //   201: aload_0
    //   202: invokespecial 171	com/adobe/reader/cloud/async/FileTransferAbstractAsyncTask:isActivityStopped	()Z
    //   205: ifne +99 -> 304
    //   208: aload_0
    //   209: monitorexit
    //   210: aconst_null
    //   211: areturn
    //   212: astore_1
    //   213: aload_0
    //   214: getstatic 246	com/adobe/reader/ARConstants$CloudConstants$CLOUD_TASK_RESULT:OFFLINE	Lcom/adobe/reader/ARConstants$CloudConstants$CLOUD_TASK_RESULT;
    //   217: putfield 186	com/adobe/reader/cloud/async/FileTransferAbstractAsyncTask:mResult	Lcom/adobe/reader/ARConstants$CloudConstants$CLOUD_TASK_RESULT;
    //   220: goto -183 -> 37
    //   223: astore_1
    //   224: aload_1
    //   225: invokevirtual 250	java/lang/Exception:getMessage	()Ljava/lang/String;
    //   228: invokestatic 253	com/adobe/reader/cloud/CloudUtilities:logit	(Ljava/lang/String;)V
    //   231: aload_0
    //   232: getstatic 256	com/adobe/reader/ARConstants$CloudConstants$CLOUD_TASK_RESULT:FAILURE	Lcom/adobe/reader/ARConstants$CloudConstants$CLOUD_TASK_RESULT;
    //   235: putfield 186	com/adobe/reader/cloud/async/FileTransferAbstractAsyncTask:mResult	Lcom/adobe/reader/ARConstants$CloudConstants$CLOUD_TASK_RESULT;
    //   238: aload_0
    //   239: aload_1
    //   240: invokestatic 262	com/adobe/reader/cloud/network/CloudNetworkManager:getStatusCodeFromException	(Ljava/lang/Exception;)I
    //   243: putfield 76	com/adobe/reader/cloud/async/FileTransferAbstractAsyncTask:mStatusCode	I
    //   246: aload_0
    //   247: getfield 76	com/adobe/reader/cloud/async/FileTransferAbstractAsyncTask:mStatusCode	I
    //   250: sipush 403
    //   253: if_icmpne -216 -> 37
    //   256: getstatic 268	com/adobe/reader/cloud/network/BlueHeronAPI$API_LIST:GET_USERS_ME_QUOTAS_STORAGE	Lcom/adobe/reader/cloud/network/BlueHeronAPI$API_LIST;
    //   259: iconst_0
    //   260: anewarray 270	java/lang/String
    //   263: invokestatic 274	com/adobe/reader/cloud/network/CloudNetworkManager:executeAPI	(Lcom/adobe/reader/cloud/network/BlueHeronAPI$API_LIST;[Ljava/lang/String;)Lorg/json/JSONObject;
    //   266: ldc_w 276
    //   269: invokevirtual 281	org/json/JSONObject:getString	(Ljava/lang/String;)Ljava/lang/String;
    //   272: invokestatic 287	java/lang/Double:parseDouble	(Ljava/lang/String;)D
    //   275: dconst_0
    //   276: dcmpg
    //   277: ifgt -240 -> 37
    //   280: aload_0
    //   281: getstatic 290	com/adobe/reader/ARConstants$CloudConstants$CLOUD_TASK_RESULT:QUOTA_EXCEEDED	Lcom/adobe/reader/ARConstants$CloudConstants$CLOUD_TASK_RESULT;
    //   284: putfield 186	com/adobe/reader/cloud/async/FileTransferAbstractAsyncTask:mResult	Lcom/adobe/reader/ARConstants$CloudConstants$CLOUD_TASK_RESULT;
    //   287: goto -250 -> 37
    //   290: astore_1
    //   291: goto -254 -> 37
    //   294: aload_0
    //   295: getstatic 246	com/adobe/reader/ARConstants$CloudConstants$CLOUD_TASK_RESULT:OFFLINE	Lcom/adobe/reader/ARConstants$CloudConstants$CLOUD_TASK_RESULT;
    //   298: putfield 186	com/adobe/reader/cloud/async/FileTransferAbstractAsyncTask:mResult	Lcom/adobe/reader/ARConstants$CloudConstants$CLOUD_TASK_RESULT;
    //   301: goto -264 -> 37
    //   304: aload_0
    //   305: invokevirtual 293	java/lang/Object:wait	()V
    //   308: goto -107 -> 201
    //   311: astore_1
    //   312: goto -111 -> 201
    //   315: astore_1
    //   316: aload_0
    //   317: monitorexit
    //   318: aload_1
    //   319: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	320	0	this	FileTransferAbstractAsyncTask
    //   0	320	1	paramVarArgs	Void[]
    //   87	100	2	str1	String
    //   97	89	3	str2	String
    //   111	77	4	localObject	Object
    //   164	31	5	localNotification	android.app.Notification
    // Exception table:
    //   from	to	target	type
    //   10	33	212	java/net/SocketTimeoutException
    //   33	37	212	java/net/SocketTimeoutException
    //   10	33	223	java/lang/Exception
    //   33	37	223	java/lang/Exception
    //   256	287	290	java/lang/Exception
    //   304	308	311	java/lang/InterruptedException
    //   201	210	315	finally
    //   304	308	315	finally
    //   316	318	315	finally
  }
  
  protected abstract void executeTask()
    throws Exception;
  
  protected abstract String getSystemNotificationMsg(ARConstants.CloudConstants.CLOUD_TASK_RESULT paramCLOUD_TASK_RESULT);
  
  protected boolean isModal()
  {
    return this.mIsModal;
  }
  
  protected void onCancelled()
  {
    super.onCancelled();
    CloudUtilities.logit(this.mFilePathAbsolute + " transfer cancelled : " + this.mTransferType.name());
  }
  
  protected void onPostExecute(Void paramVoid)
  {
    CloudUtilities.logit(this.mFilePathAbsolute + " transfer ended : " + this.mTransferType.name());
    if (this.mIsModal)
    {
      LocalBroadcastManager.getInstance(this.mServiceContext).unregisterReceiver(this.broadcastReceiver_stop);
      LocalBroadcastManager.getInstance(this.mServiceContext).unregisterReceiver(this.broadcastReceiver_restart);
    }
    paramVoid = null;
    switch (this.mTransferType)
    {
    }
    for (;;)
    {
      paramVoid.putExtra("FILE_PATH_key", this.mFilePathAbsolute);
      paramVoid.putExtra("FILE_ID_key", this.mFileID);
      paramVoid.putExtra("RESULT_key", this.mResult.ordinal());
      if (this.mStatusCode != -1) {
        paramVoid.putExtra("STATUS_CODE_key", this.mStatusCode);
      }
      if (this.mTransferType != CloudFileTransferService.TRANSFER_TYPE.UPDATE) {
        break;
      }
      CloudUtilities.logit("Informing cloud transfer manager !");
      CloudTransferManager.getInstance().handleTransferComplete(paramVoid);
      return;
      paramVoid = new Intent("com.adobe.reader.cloud.CloudFilTransferService.DownloadComplete");
      continue;
      paramVoid = new Intent("com.adobe.reader.cloud.CloudFilTransferService.UpdateComplete");
      continue;
      paramVoid = new Intent("com.adobe.reader.cloud.CloudFilTransferService.UploadComplete");
    }
    CloudUtilities.logit("Sending file transfer complete broadcast !");
    LocalBroadcastManager.getInstance(this.mAppContext).sendBroadcast(paramVoid);
  }
  
  protected void onPreExecute()
  {
    boolean bool = Environment.getExternalStorageState().equals("mounted");
    File localFile = CloudUtilities.getAppPrivateExternalDir();
    if ((!bool) || (localFile == null))
    {
      cancel(true);
      return;
    }
    this.mResult = ARConstants.CloudConstants.CLOUD_TASK_RESULT.SUCCESS;
    if (this.mIsModal)
    {
      LocalBroadcastManager.getInstance(this.mServiceContext).registerReceiver(this.broadcastReceiver_stop, new IntentFilter("com.adobe.adobereader.cloud.onStop"));
      LocalBroadcastManager.getInstance(this.mServiceContext).registerReceiver(this.broadcastReceiver_restart, new IntentFilter("com.adobe.adobereader.cloud.onRestart"));
    }
    CloudUtilities.logit(this.mFilePathAbsolute + " transfer started : " + this.mTransferType.name());
  }
  
  protected void updateFileID(String paramString)
  {
    this.mFileID = paramString;
  }
  
  protected void updateFilePath(String paramString)
  {
    this.mFilePathAbsolute = paramString;
  }
  
  protected void updateResult(ARConstants.CloudConstants.CLOUD_TASK_RESULT paramCLOUD_TASK_RESULT)
  {
    this.mResult = paramCLOUD_TASK_RESULT;
  }
}
