package com.adobe.reader.cloud;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import com.adobe.reader.ARApp;
import com.adobe.reader.cloud.network.BlueHeronAPI.API_LIST;
import com.adobe.reader.cloud.network.CloudNetworkManager;
import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import org.apache.http.client.methods.HttpRequestBase;
import org.json.JSONObject;

public class CloudUtilities
{
  public CloudUtilities() {}
  
  public static String convertCloudPathToAbsolute(String paramString)
  {
    return new File(getAppPrivateExternalDir(), ".Skybox.Cache" + File.separator + paramString).getAbsolutePath();
  }
  
  public static long convertServerDateToEpoch(String paramString)
  {
    paramString = paramString.replace('T', ' ');
    SimpleDateFormat localSimpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    try
    {
      long l = localSimpleDateFormat.parse(paramString).getTime();
      return l;
    }
    catch (ParseException paramString) {}
    return 0L;
  }
  
  public static void deleteCachedFileWithID(String paramString)
  {
    logit("Cache Manager : deleting file with ID : " + paramString);
    CloudCacheManager.getInstance().removeDocWithAssetID(paramString);
  }
  
  public static void deleteCachedFileWithPath(String paramString)
  {
    logit("Cache Manager : deleting document with path : " + paramString);
    CloudCacheManager.getInstance().removeDocWithPath(paramString);
  }
  
  public static void deleteCachedFilesInFolder(String paramString)
  {
    logit("Cache Manager : deleting folder with path : " + paramString);
    CloudCacheManager.getInstance().removeFolderWithPath(paramString);
  }
  
  public static File getAppPrivateExternalDir()
  {
    return ARApp.getAppContext().getExternalFilesDir(null);
  }
  
  public static long getCachedFileModifiedDate(String paramString)
  {
    return CloudCacheManager.getInstance().getCloudModifiedDate(paramString);
  }
  
  public static ArrayList<String> getCachedFilesAssetIDs()
  {
    return CloudCacheManager.getInstance().getAssetIDs();
  }
  
  public static int getLastViewedPageNum(String paramString)
  {
    return CloudCacheManager.getInstance().getLastViewedPageNum(paramString);
  }
  
  public static int getLastViewedPageNumFromCloud(String paramString)
  {
    try
    {
      int i = CloudNetworkManager.executeAPI(BlueHeronAPI.API_LIST.GET_ASSETS_ID_METADATA_KEY, new String[] { paramString, "last_pagenum" }).getInt("value");
      return i;
    }
    catch (Exception paramString) {}
    return -1;
  }
  
  public static long getModifiedDateFromCloud(String paramString)
  {
    try
    {
      long l = convertServerDateToEpoch(CloudNetworkManager.executeAPI(BlueHeronAPI.API_LIST.GET_ASSETS_ID_METADATA_KEY, new String[] { paramString, "modified" }).getString("value"));
      return l;
    }
    catch (Exception paramString) {}
    return System.currentTimeMillis();
  }
  
  public static boolean isNetworkAvailable(Context paramContext)
  {
    paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
    return (paramContext != null) && (paramContext.isConnectedOrConnecting());
  }
  
  public static void logit(String paramString) {}
  
  public static void printHttpRequestHeaders(HttpRequestBase paramHttpRequestBase) {}
  
  public static void printJSON(JSONObject paramJSONObject) {}
  
  public static void updateCachedFile(String paramString1, String paramString2, long paramLong)
  {
    logit("Cache Manager : updating file with info : " + paramString2 + " " + paramString1);
    CloudCacheManager.getInstance().updateDoc(paramString1, paramString2, paramLong);
  }
  
  public static void updateCachedFileLastViewedPageNum(String paramString, int paramInt)
  {
    CloudCacheManager.getInstance().updateLastViewedPageNum(paramString, paramInt);
  }
  
  public static void updateCachedFileModifiedDate(String paramString, long paramLong)
  {
    CloudCacheManager.getInstance().updateModifiedDate(paramString, paramLong);
  }
}
