package com.adobe.reader.cloud;

import android.content.Context;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import com.adobe.reader.ARApp;
import java.util.ArrayList;

public abstract class CloudAbstractDatabaseManager
{
  public static final String COLUMN_ASSET_ID = "_assetID";
  public static final String COLUMN_FILE_PATH = "_filePath";
  public static final String COLUMN_ID = "_id";
  public static final String COLUMN_TRANSFER_STATUS = "_transferStatus";
  public static final String COLUMN_TRANSFER_TYPE = "_transferType";
  private static final String DATABASE_NAME = "ARDatabase";
  private static final int DATABASE_VERSION = 1;
  private static DbHelper mDBHelper;
  public static SQLiteDatabase mDatabase;
  private static ArrayList<DatabaseTable> mTablesInfo = new ArrayList();
  
  static
  {
    registerTablesInfo();
  }
  
  public CloudAbstractDatabaseManager() {}
  
  private static void registerTablesInfo()
  {
    AR_TABLES localAR_TABLES = AR_TABLES.CLOUD_TRANSFERS_TABLE;
    String str = "create table " + localAR_TABLES.getName() + " (" + "_id" + " integer primary key autoincrement, " + "_filePath" + " TEXT," + "_assetID" + " TEXT," + "_transferType" + " TEXT," + "_transferStatus" + " INTEGER);";
    mTablesInfo.add(new DatabaseTable(localAR_TABLES, str));
  }
  
  protected void checkDatabase()
  {
    if (mDatabase == null) {
      openDBConnection();
    }
  }
  
  protected void close()
  {
    if (mDatabase.isOpen()) {
      mDBHelper.close();
    }
  }
  
  protected void delete()
  {
    close();
    ARApp.getAppContext().deleteDatabase("ARDatabase");
    mDBHelper = null;
    mDatabase = null;
  }
  
  public void openDBConnection()
    throws SQLException
  {
    if (mDBHelper == null) {
      mDBHelper = new DbHelper();
    }
    mDatabase = mDBHelper.getWritableDatabase();
  }
  
  public static enum AR_TABLES
  {
    CLOUD_TRANSFERS_TABLE("CloudTransfer");
    
    private final String text;
    
    private AR_TABLES(String paramString)
    {
      this.text = paramString;
    }
    
    public String getName()
    {
      return this.text;
    }
  }
  
  private static class DatabaseTable
  {
    private String mCreateTableSQL;
    private CloudAbstractDatabaseManager.AR_TABLES mTable;
    
    public DatabaseTable(CloudAbstractDatabaseManager.AR_TABLES paramAR_TABLES, String paramString)
    {
      this.mTable = paramAR_TABLES;
      this.mCreateTableSQL = paramString;
    }
    
    public String getCreateTableSQL()
    {
      return this.mCreateTableSQL;
    }
    
    public String getName()
    {
      return this.mTable.getName();
    }
  }
  
  private class DbHelper
    extends SQLiteOpenHelper
  {
    public DbHelper()
    {
      super("ARDatabase", null, 1);
    }
    
    public void onCreate(SQLiteDatabase paramSQLiteDatabase)
    {
      int j = CloudAbstractDatabaseManager.mTablesInfo.size();
      int i = 0;
      for (;;)
      {
        if (i >= j) {
          return;
        }
        paramSQLiteDatabase.execSQL(((CloudAbstractDatabaseManager.DatabaseTable)CloudAbstractDatabaseManager.mTablesInfo.get(i)).getCreateTableSQL());
        i += 1;
      }
    }
    
    public void onUpgrade(SQLiteDatabase paramSQLiteDatabase, int paramInt1, int paramInt2)
    {
      paramInt2 = CloudAbstractDatabaseManager.mTablesInfo.size();
      paramInt1 = 0;
      for (;;)
      {
        if (paramInt1 >= paramInt2)
        {
          onCreate(paramSQLiteDatabase);
          return;
        }
        paramSQLiteDatabase.execSQL("DROP TABLE IF EXISTS " + ((CloudAbstractDatabaseManager.DatabaseTable)CloudAbstractDatabaseManager.mTablesInfo.get(paramInt1)).getName());
        paramInt1 += 1;
      }
    }
  }
}
