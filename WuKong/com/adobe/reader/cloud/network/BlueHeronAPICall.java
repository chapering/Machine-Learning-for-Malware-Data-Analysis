package com.adobe.reader.cloud.network;

import java.util.ArrayList;
import java.util.List;
import org.apache.http.NameValuePair;
import org.apache.http.client.methods.HttpDelete;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.client.methods.HttpRequestBase;

public class BlueHeronAPICall
{
  private List<NameValuePair> mAuthorizationHeaders;
  private BlueHeronAPI.BASE_URI_TYPE mBaseURIType;
  private BlueHeronAPI.HTTP_METHOD_TYPE mHttpMethodType;
  private boolean mRequiresAccessToken;
  
  public BlueHeronAPICall(BlueHeronAPI.BASE_URI_TYPE paramBASE_URI_TYPE, BlueHeronAPI.HTTP_METHOD_TYPE paramHTTP_METHOD_TYPE, boolean paramBoolean, List<NameValuePair> paramList)
  {
    this.mAuthorizationHeaders = new ArrayList(paramList);
    this.mBaseURIType = paramBASE_URI_TYPE;
    this.mHttpMethodType = paramHTTP_METHOD_TYPE;
    this.mRequiresAccessToken = paramBoolean;
  }
  
  public HttpRequestBase getHttpRequest()
  {
    Object localObject = BlueHeronAPI.baseURI[this.mBaseURIType.ordinal()];
    int j;
    int i;
    switch (this.mHttpMethodType)
    {
    default: 
      localObject = null;
      ((HttpRequestBase)localObject).addHeader("x-api-client-id", "api_reader_mobile");
      j = this.mAuthorizationHeaders.size();
      i = 0;
    }
    for (;;)
    {
      if (i >= j)
      {
        return localObject;
        localObject = new HttpGet((String)localObject);
        break;
        localObject = new HttpPost((String)localObject);
        break;
        localObject = new HttpPut((String)localObject);
        break;
        localObject = new HttpDelete((String)localObject);
        break;
      }
      NameValuePair localNameValuePair = (NameValuePair)this.mAuthorizationHeaders.get(i);
      ((HttpRequestBase)localObject).setHeader(localNameValuePair.getName(), localNameValuePair.getValue());
      i += 1;
    }
  }
  
  public BlueHeronAPI.HTTP_METHOD_TYPE getMethodType()
  {
    return this.mHttpMethodType;
  }
  
  public boolean requiresAcessToken()
  {
    return this.mRequiresAccessToken;
  }
}
