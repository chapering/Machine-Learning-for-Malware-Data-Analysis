package com.adobe.reader.cloud.network;

import com.adobe.reader.cloud.CloudUtilities;
import com.adobe.reader.cloud.ui.CloudUIHandler;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.SocketTimeoutException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import org.apache.http.HttpResponse;
import org.apache.http.RequestLine;
import org.apache.http.StatusLine;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpDelete;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.json.JSONException;
import org.json.JSONObject;

public class CloudNetworkManager
{
  public CloudNetworkManager() {}
  
  public static JSONObject executeAPI(BlueHeronAPI.API_LIST paramAPI_LIST, String... paramVarArgs)
    throws IOException
  {
    return executeHttpRequest(getHttpRequest(paramAPI_LIST, paramVarArgs), BlueHeronAPI.getMethodType(paramAPI_LIST));
  }
  
  public static JSONObject executeHttpRequest(HttpRequestBase paramHttpRequestBase, BlueHeronAPI.HTTP_METHOD_TYPE paramHTTP_METHOD_TYPE)
    throws IOException
  {
    return getResponseBodyJson(getHttpMethodResponse(paramHttpRequestBase, paramHTTP_METHOD_TYPE));
  }
  
  public static String getAccessToken()
    throws IOException
  {
    if (CloudAccount.getExpirationDuration() < 0L) {
      refreshTokens();
    }
    return CloudAccount.getAccessToken();
  }
  
  public static HttpPost getAccessTokenHttpPostRequest(String paramString)
  {
    HttpPost localHttpPost = new HttpPost(BlueHeronAPI.getBaseURI(BlueHeronAPI.BASE_URI_TYPE.IMS) + "ims/token/v1");
    localHttpPost.setHeader("Content-Type", "application/x-www-form-urlencoded");
    try
    {
      ArrayList localArrayList = new ArrayList();
      localArrayList.add(new BasicNameValuePair("grant_type", "authorization_code"));
      localArrayList.add(new BasicNameValuePair("client_id", "ReaderMobile1"));
      localArrayList.add(new BasicNameValuePair("client_secret", "6112d9f9-9da1-46f0-8221-3c5125571147"));
      localArrayList.add(new BasicNameValuePair("code", paramString));
      localHttpPost.setEntity(new UrlEncodedFormEntity(localArrayList));
      return localHttpPost;
    }
    catch (UnsupportedEncodingException paramString)
    {
      paramString.printStackTrace();
    }
    return localHttpPost;
  }
  
  public static String getBaseURIs(BlueHeronAPI.BASE_URI_TYPE paramBASE_URI_TYPE)
  {
    return BlueHeronAPI.getBaseURI(paramBASE_URI_TYPE);
  }
  
  public static String getDownloadToken()
    throws IOException
  {
    Object localObject1 = CloudAccount.getDownloadToken();
    Object localObject2 = localObject1;
    if (localObject1 == null) {
      localObject2 = executeAPI(BlueHeronAPI.API_LIST.GET_SESSION_DOWNLOAD_TOKEN, new String[0]);
    }
    try
    {
      localObject2 = ((JSONObject)localObject2).getString("download_token");
      localObject1 = localObject2;
      CloudAccount.setDownloadToken((String)localObject2);
      return localObject2;
    }
    catch (JSONException localJSONException)
    {
      localJSONException.printStackTrace();
    }
    return localObject1;
  }
  
  public static HttpResponse getHttpMethodResponse(HttpRequestBase paramHttpRequestBase, BlueHeronAPI.HTTP_METHOD_TYPE paramHTTP_METHOD_TYPE)
    throws IOException, SocketTimeoutException
  {
    CloudUtilities.logit("HttpRequest : " + paramHttpRequestBase.getRequestLine().getMethod() + " | " + paramHttpRequestBase.getRequestLine().getUri());
    BasicHttpParams localBasicHttpParams = new BasicHttpParams();
    HttpConnectionParams.setConnectionTimeout(localBasicHttpParams, 20000);
    HttpConnectionParams.setSoTimeout(localBasicHttpParams, 20000);
    DefaultHttpClient localDefaultHttpClient = new DefaultHttpClient(localBasicHttpParams);
    localBasicHttpParams = null;
    switch (paramHTTP_METHOD_TYPE)
    {
    default: 
      paramHttpRequestBase = localBasicHttpParams;
    }
    while ((paramHttpRequestBase == null) || (paramHttpRequestBase.getStatusLine() == null))
    {
      throw new IOException("Invalid http response !");
      paramHttpRequestBase = localDefaultHttpClient.execute((HttpGet)paramHttpRequestBase);
      continue;
      paramHttpRequestBase = localDefaultHttpClient.execute((HttpPost)paramHttpRequestBase);
      continue;
      paramHttpRequestBase = localDefaultHttpClient.execute((HttpPut)paramHttpRequestBase);
      continue;
      paramHttpRequestBase = localDefaultHttpClient.execute((HttpDelete)paramHttpRequestBase);
    }
    if (paramHttpRequestBase.getStatusLine().getStatusCode() >= 300)
    {
      if (paramHttpRequestBase.getStatusLine().getStatusCode() == 401)
      {
        removeCloudAccount();
        CloudUIHandler.resetAccountGlobalState();
      }
      throw getIOExceptionForStatusCode(paramHttpRequestBase);
    }
    CloudUtilities.logit("HttpResponse : status code = " + Integer.toString(paramHttpRequestBase.getStatusLine().getStatusCode()));
    return paramHttpRequestBase;
  }
  
  public static HttpRequestBase getHttpRequest(BlueHeronAPI.API_LIST paramAPI_LIST, String... paramVarArgs)
    throws IOException
  {
    if (!BlueHeronAPI.isBaseURIPopulated()) {
      populateBaseURIs();
    }
    HttpRequestBase localHttpRequestBase = BlueHeronAPI.getHttpRequest(paramAPI_LIST);
    paramVarArgs = BlueHeronAPI.getApiUriEndpoint(paramAPI_LIST, paramVarArgs);
    if ((paramVarArgs != null) && (paramVarArgs.length() > 0)) {}
    try
    {
      localHttpRequestBase.setURI(new URI(localHttpRequestBase.getURI() + paramVarArgs));
      if (BlueHeronAPI.requiresAccessToken(paramAPI_LIST)) {
        localHttpRequestBase.setHeader("Authorization", "Bearer " + getAccessToken());
      }
      return localHttpRequestBase;
    }
    catch (URISyntaxException paramVarArgs)
    {
      for (;;)
      {
        paramVarArgs.printStackTrace();
      }
    }
  }
  
  public static IOException getIOExceptionForStatusCode(HttpResponse paramHttpResponse)
  {
    if ((paramHttpResponse != null) && (paramHttpResponse.getStatusLine() != null))
    {
      int i = paramHttpResponse.getStatusLine().getStatusCode();
      return new IOException("StatusCode_" + String.valueOf(i));
    }
    return new IOException();
  }
  
  private static String getMasterUri()
  {
    return "https://files.acrobat.com/api";
  }
  
  /* Error */
  public static JSONObject getResponseBodyJson(HttpResponse paramHttpResponse)
    throws IOException
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore_1
    //   2: aconst_null
    //   3: astore_2
    //   4: aload_0
    //   5: invokeinterface 337 1 0
    //   10: invokeinterface 343 1 0
    //   15: astore_0
    //   16: aload_0
    //   17: astore_1
    //   18: new 345	java/io/BufferedReader
    //   21: dup
    //   22: new 347	java/io/InputStreamReader
    //   25: dup
    //   26: aload_0
    //   27: ldc_w 349
    //   30: invokespecial 352	java/io/InputStreamReader:<init>	(Ljava/io/InputStream;Ljava/lang/String;)V
    //   33: bipush 8
    //   35: invokespecial 355	java/io/BufferedReader:<init>	(Ljava/io/Reader;I)V
    //   38: astore_3
    //   39: aload_0
    //   40: astore_1
    //   41: new 87	java/lang/StringBuilder
    //   44: dup
    //   45: invokespecial 300	java/lang/StringBuilder:<init>	()V
    //   48: astore 4
    //   50: aload_0
    //   51: astore_1
    //   52: aload_3
    //   53: invokevirtual 358	java/io/BufferedReader:readLine	()Ljava/lang/String;
    //   56: astore 5
    //   58: aload 5
    //   60: ifnonnull +46 -> 106
    //   63: aload_0
    //   64: astore_1
    //   65: aload 4
    //   67: invokevirtual 115	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   70: astore_3
    //   71: aload_2
    //   72: astore_1
    //   73: aload_3
    //   74: ifnull +22 -> 96
    //   77: aload_0
    //   78: astore_1
    //   79: new 181	org/json/JSONObject
    //   82: dup
    //   83: aload_3
    //   84: invokespecial 359	org/json/JSONObject:<init>	(Ljava/lang/String;)V
    //   87: astore_2
    //   88: aload_0
    //   89: astore_1
    //   90: aload_2
    //   91: invokestatic 363	com/adobe/reader/cloud/CloudUtilities:printJSON	(Lorg/json/JSONObject;)V
    //   94: aload_2
    //   95: astore_1
    //   96: aload_0
    //   97: ifnull +7 -> 104
    //   100: aload_0
    //   101: invokevirtual 368	java/io/InputStream:close	()V
    //   104: aload_1
    //   105: areturn
    //   106: aload_0
    //   107: astore_1
    //   108: aload 4
    //   110: new 87	java/lang/StringBuilder
    //   113: dup
    //   114: aload 5
    //   116: invokestatic 103	java/lang/String:valueOf	(Ljava/lang/Object;)Ljava/lang/String;
    //   119: invokespecial 106	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
    //   122: ldc_w 370
    //   125: invokevirtual 112	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   128: invokevirtual 115	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   131: invokevirtual 112	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   134: pop
    //   135: goto -85 -> 50
    //   138: astore_1
    //   139: aload_0
    //   140: astore_1
    //   141: new 43	java/io/IOException
    //   144: dup
    //   145: invokespecial 328	java/io/IOException:<init>	()V
    //   148: athrow
    //   149: astore_0
    //   150: aload_1
    //   151: ifnull +7 -> 158
    //   154: aload_1
    //   155: invokevirtual 368	java/io/InputStream:close	()V
    //   158: aload_0
    //   159: athrow
    //   160: astore_0
    //   161: goto -11 -> 150
    //   164: astore_0
    //   165: aconst_null
    //   166: astore_0
    //   167: goto -28 -> 139
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	170	0	paramHttpResponse	HttpResponse
    //   1	107	1	localObject1	Object
    //   138	1	1	localException	Exception
    //   140	15	1	localHttpResponse	HttpResponse
    //   3	92	2	localJSONObject	JSONObject
    //   38	46	3	localObject2	Object
    //   48	61	4	localStringBuilder	StringBuilder
    //   56	59	5	str	String
    // Exception table:
    //   from	to	target	type
    //   18	39	138	java/lang/Exception
    //   41	50	138	java/lang/Exception
    //   52	58	138	java/lang/Exception
    //   65	71	138	java/lang/Exception
    //   79	88	138	java/lang/Exception
    //   90	94	138	java/lang/Exception
    //   108	135	138	java/lang/Exception
    //   18	39	149	finally
    //   41	50	149	finally
    //   52	58	149	finally
    //   65	71	149	finally
    //   79	88	149	finally
    //   90	94	149	finally
    //   108	135	149	finally
    //   141	149	149	finally
    //   4	16	160	finally
    //   4	16	164	java/lang/Exception
  }
  
  public static String getRootFolderID()
  {
    return CloudAccount.getRootFolderID();
  }
  
  public static int getStatusCodeFromException(Exception paramException)
  {
    int j = -1;
    paramException = paramException.getMessage();
    int i = j;
    if (paramException != null)
    {
      i = j;
      if (paramException.startsWith("StatusCode_")) {
        paramException = paramException.substring("StatusCode_".length());
      }
    }
    try
    {
      i = Integer.parseInt(paramException);
      return i;
    }
    catch (NumberFormatException paramException) {}
    return -1;
  }
  
  public static HttpPost getTokenRefreshHttpPostRequest(String paramString)
  {
    HttpPost localHttpPost = new HttpPost(BlueHeronAPI.getBaseURI(BlueHeronAPI.BASE_URI_TYPE.IMS) + "ims/token/v1");
    localHttpPost.setHeader("Content-Type", "application/x-www-form-urlencoded");
    try
    {
      ArrayList localArrayList = new ArrayList();
      localArrayList.add(new BasicNameValuePair("grant_type", "refresh_token"));
      localArrayList.add(new BasicNameValuePair("client_id", "ReaderMobile1"));
      localArrayList.add(new BasicNameValuePair("client_secret", "6112d9f9-9da1-46f0-8221-3c5125571147"));
      localArrayList.add(new BasicNameValuePair("refresh_token", paramString));
      localHttpPost.setEntity(new UrlEncodedFormEntity(localArrayList));
      return localHttpPost;
    }
    catch (UnsupportedEncodingException paramString)
    {
      paramString.printStackTrace();
    }
    return localHttpPost;
  }
  
  public static void initiateCloudAccount(JSONObject paramJSONObject)
    throws IOException
  {
    try
    {
      CloudAccount.initiateAccount(Long.valueOf(paramJSONObject.getLong("expires_in")), paramJSONObject.getString("refresh_token"), paramJSONObject.getString("access_token"));
      return;
    }
    catch (Exception paramJSONObject)
    {
      throw new IOException("refresh token response not valid.");
    }
  }
  
  public static boolean isSignedIn()
  {
    return CloudAccount.isSignedIn();
  }
  
  public static void populateBaseURIs()
    throws IOException
  {
    HttpGet localHttpGet = new HttpGet(getMasterUri() + "/" + "base_uris");
    localHttpGet.addHeader("Accept", "application/vnd.adobe.skybox+json;version=1");
    localHttpGet.addHeader("x-api-client-id", "api_reader_mobile");
    BlueHeronAPI.populateBaseURIs(executeHttpRequest(localHttpGet, BlueHeronAPI.HTTP_METHOD_TYPE.GET));
  }
  
  /* Error */
  public static void refreshTokens()
    throws IOException
  {
    // Byte code:
    //   0: invokestatic 440	com/adobe/reader/cloud/network/CloudAccount:getRefreshToken	()Ljava/lang/String;
    //   3: invokestatic 442	com/adobe/reader/cloud/network/CloudNetworkManager:getTokenRefreshHttpPostRequest	(Ljava/lang/String;)Lorg/apache/http/client/methods/HttpPost;
    //   6: astore_0
    //   7: aload_0
    //   8: getstatic 31	com/adobe/reader/cloud/network/BlueHeronAPI$HTTP_METHOD_TYPE:POST	Lcom/adobe/reader/cloud/network/BlueHeronAPI$HTTP_METHOD_TYPE;
    //   11: invokestatic 57	com/adobe/reader/cloud/network/CloudNetworkManager:executeHttpRequest	(Lorg/apache/http/client/methods/HttpRequestBase;Lcom/adobe/reader/cloud/network/BlueHeronAPI$HTTP_METHOD_TYPE;)Lorg/json/JSONObject;
    //   14: astore_0
    //   15: aload_0
    //   16: ldc_w 397
    //   19: invokevirtual 401	org/json/JSONObject:getLong	(Ljava/lang/String;)J
    //   22: invokestatic 406	java/lang/Long:valueOf	(J)Ljava/lang/Long;
    //   25: aload_0
    //   26: ldc_w 394
    //   29: invokevirtual 185	org/json/JSONObject:getString	(Ljava/lang/String;)Ljava/lang/String;
    //   32: aload_0
    //   33: ldc_w 408
    //   36: invokevirtual 185	org/json/JSONObject:getString	(Ljava/lang/String;)Ljava/lang/String;
    //   39: invokestatic 412	com/adobe/reader/cloud/network/CloudAccount:initiateAccount	(Ljava/lang/Long;Ljava/lang/String;Ljava/lang/String;)V
    //   42: return
    //   43: astore_0
    //   44: aload_0
    //   45: invokestatic 444	com/adobe/reader/cloud/network/CloudNetworkManager:getStatusCodeFromException	(Ljava/lang/Exception;)I
    //   48: sipush 400
    //   51: if_icmpne +9 -> 60
    //   54: invokestatic 262	com/adobe/reader/cloud/network/CloudNetworkManager:removeCloudAccount	()V
    //   57: invokestatic 267	com/adobe/reader/cloud/ui/CloudUIHandler:resetAccountGlobalState	()V
    //   60: aload_0
    //   61: athrow
    //   62: astore_0
    //   63: new 43	java/io/IOException
    //   66: dup
    //   67: ldc_w 414
    //   70: invokespecial 242	java/io/IOException:<init>	(Ljava/lang/String;)V
    //   73: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   6	27	0	localObject	Object
    //   43	18	0	localIOException	IOException
    //   62	1	0	localJSONException	JSONException
    // Exception table:
    //   from	to	target	type
    //   7	15	43	java/io/IOException
    //   15	42	62	org/json/JSONException
  }
  
  public static void removeCloudAccount() {}
  
  public static void setRootFolderID(String paramString)
  {
    CloudAccount.setRootFolderID(paramString);
  }
}
