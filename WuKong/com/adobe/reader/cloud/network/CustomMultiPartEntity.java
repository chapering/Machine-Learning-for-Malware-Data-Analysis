package com.adobe.reader.cloud.network;

import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.charset.Charset;
import org.apache.http.entity.mime.HttpMultipartMode;
import org.apache.http.entity.mime.MultipartEntity;

public class CustomMultiPartEntity
  extends MultipartEntity
{
  private ProgressListener listener = new ProgressListener()
  {
    public void transferred(int paramAnonymousInt) {}
  };
  
  public CustomMultiPartEntity() {}
  
  public CustomMultiPartEntity(ProgressListener paramProgressListener)
  {
    this.listener = paramProgressListener;
  }
  
  public CustomMultiPartEntity(HttpMultipartMode paramHttpMultipartMode, ProgressListener paramProgressListener)
  {
    super(paramHttpMultipartMode);
    this.listener = paramProgressListener;
  }
  
  public CustomMultiPartEntity(HttpMultipartMode paramHttpMultipartMode, String paramString, Charset paramCharset, ProgressListener paramProgressListener)
  {
    super(paramHttpMultipartMode, paramString, paramCharset);
    this.listener = paramProgressListener;
  }
  
  public void setProgressListener(ProgressListener paramProgressListener)
  {
    this.listener = paramProgressListener;
  }
  
  public void writeTo(OutputStream paramOutputStream)
    throws IOException
  {
    super.writeTo(new CountingOutputStream(paramOutputStream, this.listener, getContentLength()));
  }
  
  public static class CountingOutputStream
    extends FilterOutputStream
  {
    private int currentProgress;
    private final CustomMultiPartEntity.ProgressListener listener;
    private long totalSize;
    private long transferred;
    
    public CountingOutputStream(OutputStream paramOutputStream, CustomMultiPartEntity.ProgressListener paramProgressListener, long paramLong)
    {
      super();
      this.listener = paramProgressListener;
      this.transferred = 0L;
      this.totalSize = paramLong;
      this.currentProgress = 0;
    }
    
    public void handleProgress(long paramLong1, long paramLong2)
    {
      int i = (int)(100L * paramLong1 / paramLong2);
      if (i != this.currentProgress)
      {
        this.listener.transferred(i);
        this.currentProgress = i;
      }
    }
    
    public void write(int paramInt)
      throws IOException
    {
      this.out.write(paramInt);
      this.transferred += 1L;
      handleProgress(this.transferred, this.totalSize);
    }
    
    public void write(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
      throws IOException
    {
      this.out.write(paramArrayOfByte, paramInt1, paramInt2);
      this.transferred += paramInt2;
      handleProgress(this.transferred, this.totalSize);
    }
  }
  
  public static abstract interface ProgressListener
  {
    public abstract void transferred(int paramInt);
  }
}
