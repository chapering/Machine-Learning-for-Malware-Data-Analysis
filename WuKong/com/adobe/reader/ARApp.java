package com.adobe.reader;

import android.app.ActivityManager;
import android.app.Application;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.Build;
import android.os.Build.VERSION;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class ARApp
  extends Application
{
  private static final String ADOBE_READER_VERSION = "adobeReaderVersion";
  private static final int HONEYCOMB = 11;
  private static final String LAST_NIGHT_MODE = "lastNightMode";
  private static final String LAST_VIEW_MODE = "lastViewMode";
  private static final String NEXUS_7 = "Nexus 7";
  private static final double POST_HONEYCOMB_MAX_HEAP_LIMIT = 0.8D;
  private static final double PRE_HONEYCOMB_MAX_HEAP_LIMIT = 0.7D;
  private static ARApp sARApp;
  private static double sMaxHeapLimit = 0.0D;
  private ARBitmapPool mBitmapPool = new ARBitmapPool();
  
  public ARApp() {}
  
  public static boolean checkAndUpdateFirstLaunch()
  {
    boolean bool = false;
    Object localObject = getAppContext();
    try
    {
      String str1 = ((Context)localObject).getPackageName();
      str1 = ((Context)localObject).getPackageManager().getPackageInfo(str1, 0).versionName;
      localObject = ((Context)localObject).getSharedPreferences("com.adobe.reader.preferences", 0);
      String str2 = ((SharedPreferences)localObject).getString("adobeReaderVersion", "-1");
      if ((str2.equals("-1")) || (!str2.equals(str1)))
      {
        localObject = new ARPrefsEditor((SharedPreferences)localObject);
        ((ARPrefsEditor)localObject).putString("adobeReaderVersion", str1);
        ((ARPrefsEditor)localObject).apply();
        ARAnalytics.sShouldUpdateSystemInfo = true;
        bool = true;
      }
      return bool;
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException) {}
    return false;
  }
  
  public static final ARApp getARApp()
  {
    return sARApp;
  }
  
  public static final Context getAppContext()
  {
    return sARApp.getApplicationContext();
  }
  
  public static double getCurrentMemoryUsage()
  {
    return Runtime.getRuntime().totalMemory() / 1024L - Runtime.getRuntime().freeMemory() / 1024L;
  }
  
  public static double getMaxHeapLimit()
  {
    int i;
    if (sMaxHeapLimit == 0.0D)
    {
      i = getMemoryClass();
      if (!runningOnHoneycombOrAbove()) {
        break label35;
      }
    }
    label35:
    for (sMaxHeapLimit = i * 1024 * 0.8D;; sMaxHeapLimit = i * 1024 * 0.7D) {
      return sMaxHeapLimit;
    }
  }
  
  private static int getMemoryClass()
  {
    ActivityManager localActivityManager = (ActivityManager)getAppContext().getSystemService("activity");
    int i = localActivityManager.getMemoryClass();
    if (runningOnHoneycombOrAbove()) {
      try
      {
        int j = ((Integer)ActivityManager.class.getMethod("getLargeMemoryClass", new Class[0]).invoke(localActivityManager, new Object[0])).intValue();
        return j;
      }
      catch (NoSuchMethodException localNoSuchMethodException)
      {
        return i;
      }
      catch (IllegalArgumentException localIllegalArgumentException)
      {
        return i;
      }
      catch (IllegalAccessException localIllegalAccessException)
      {
        return i;
      }
      catch (InvocationTargetException localInvocationTargetException) {}
    }
    return i;
  }
  
  public static boolean getNightModePreference()
  {
    return getAppContext().getSharedPreferences("com.adobe.reader.preferences", 0).getBoolean("lastNightMode", false);
  }
  
  public static int getViewModePreference()
  {
    int i = getAppContext().getSharedPreferences("com.adobe.reader.preferences", 0).getInt("lastViewMode", 1);
    if (i <= 0) {
      return 1;
    }
    return i;
  }
  
  public static boolean isNexus7()
  {
    return Build.MODEL.equalsIgnoreCase("Nexus 7");
  }
  
  public static boolean runningOnHoneycombOrAbove()
  {
    return Build.VERSION.SDK_INT >= 11;
  }
  
  public static void setNightModePreference(boolean paramBoolean)
  {
    ARPrefsEditor localARPrefsEditor = new ARPrefsEditor(getAppContext().getSharedPreferences("com.adobe.reader.preferences", 0));
    localARPrefsEditor.putBoolean("lastNightMode", paramBoolean);
    localARPrefsEditor.apply();
  }
  
  public static void setViewModePreference(int paramInt)
  {
    int i = paramInt;
    if (paramInt <= 0) {
      i = 1;
    }
    ARPrefsEditor localARPrefsEditor = new ARPrefsEditor(getAppContext().getSharedPreferences("com.adobe.reader.preferences", 0));
    localARPrefsEditor.putInt("lastViewMode", i);
    localARPrefsEditor.apply();
  }
  
  public ARBitmapPool getBitmapPool()
  {
    return this.mBitmapPool;
  }
  
  public void onCreate()
  {
    super.onCreate();
    sARApp = this;
  }
}
