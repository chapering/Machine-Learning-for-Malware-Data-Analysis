package com.adobe.reader;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Typeface;
import android.text.Editable;
import android.text.TextPaint;
import android.util.DisplayMetrics;
import android.widget.EditText;

public abstract class AREditText
  extends EditText
  implements ARTextBasedView
{
  protected static final String BOLD = "Bold";
  protected static final String BOLD_ITALIC = "BoldItalic";
  protected static final int CENTER = 1;
  protected static final String DROID_SANS_MONO = "DroidSansMono";
  protected static final String DROID_SERIF = "DroidSerif";
  protected static final String ITALIC = "Italic";
  protected static final int LEFT = 0;
  protected static final float PAGE_UNIT = 0.013888889F;
  protected static final int RIGHT = 2;
  
  static
  {
    if (!AREditText.class.desiredAssertionStatus()) {}
    for (boolean bool = true;; bool = false)
    {
      $assertionsDisabled = bool;
      return;
    }
  }
  
  public AREditText(Context paramContext)
  {
    super(paramContext);
    setImeOptions(getImeOptions() | 0x10000000 | 0x1);
  }
  
  public static Typeface getTypefaceForFontName(String paramString)
  {
    Typeface localTypeface = Typeface.SANS_SERIF;
    String[] arrayOfString = paramString.split("-");
    Object localObject = localTypeface;
    int i;
    if (arrayOfString.length > 0) {
      if (arrayOfString[0].equals("DroidSerif"))
      {
        paramString = Typeface.SERIF;
        localObject = paramString;
        if (arrayOfString.length != 2) {
          break label122;
        }
        if (!arrayOfString[1].equals("Bold")) {
          break label86;
        }
        i = 1;
      }
    }
    for (;;)
    {
      return Typeface.create(paramString, i);
      paramString = localTypeface;
      if (!arrayOfString[0].equals("DroidSansMono")) {
        break;
      }
      paramString = Typeface.MONOSPACE;
      break;
      label86:
      if (arrayOfString[1].equals("BoldItalic"))
      {
        i = 3;
      }
      else
      {
        localObject = paramString;
        if (arrayOfString[1].equals("Italic"))
        {
          i = 2;
        }
        else
        {
          label122:
          paramString = (String)localObject;
          i = 0;
        }
      }
    }
  }
  
  public void adjustPadding(long paramLong, boolean paramBoolean)
  {
    DisplayMetrics localDisplayMetrics = getContext().getResources().getDisplayMetrics();
    int j = (int)Math.round(ARUIView.getFieldBorderPadding(paramLong) * 2.0D);
    if (!paramBoolean) {}
    for (int i = (int)(Math.round((int)((int)(j + getTextSize() / 5.0F) * localDisplayMetrics.density)) / localDisplayMetrics.density);; i = j)
    {
      setPadding(j, i, j, j);
      return;
    }
  }
  
  public void commit() {}
  
  public float getTextWidth(String paramString)
  {
    float f = 0.0F;
    TextPaint localTextPaint = getPaint();
    if (localTextPaint != null) {
      f = localTextPaint.measureText(paramString);
    }
    return f;
  }
  
  public String getValueProperty()
  {
    return getText().toString();
  }
  
  public void setCursor(int paramInt)
  {
    setSelection(paramInt);
  }
  
  public void setFontProperty(String paramString, float paramFloat)
  {
    setTypeface(getTypefaceForFontName(paramString));
    if (paramFloat > 0.0F)
    {
      paramString = (PageView)((ARViewer)getContext()).findViewById(2131492873);
      if (paramString != null) {
        setTextSize(4, (float)paramString.getCurrentZoomLevel() * (0.013888889F * paramFloat));
      }
    }
  }
  
  public void setFormatProperty(int paramInt)
  {
    switch (paramInt)
    {
    default: 
      if (!$assertionsDisabled) {
        throw new AssertionError();
      }
    case 1: 
    case 3: 
      setInputType(4098);
    case 0: 
    case 5: 
    case 6: 
    case 11: 
    case 12: 
      return;
    case 2: 
    case 4: 
      setInputType(12290);
      return;
    case 7: 
    case 8: 
    case 10: 
      setInputType(2);
      return;
    }
    setInputType(3);
  }
  
  public void setPaddingProperty(int paramInt)
  {
    setPadding(paramInt, paramInt, paramInt, paramInt);
  }
  
  public void setQuaddingProperty(int paramInt)
  {
    switch (paramInt)
    {
    default: 
      setGravity(getGravity() & 0x70 | 0x3);
      return;
    case 1: 
      setGravity(getGravity() & 0x70 | 0x1);
      return;
    }
    setGravity(getGravity() & 0x70 | 0x5);
  }
  
  public void setRotationProperty(int paramInt) {}
  
  public void setTextColorProperty(float paramFloat1, float paramFloat2, float paramFloat3)
  {
    setTextColor(Color.rgb((int)(paramFloat1 * 255.0F), (int)(paramFloat2 * 255.0F), (int)(255.0F * paramFloat3)));
  }
  
  public void setValueProperty(String paramString)
  {
    setText(paramString);
  }
}
