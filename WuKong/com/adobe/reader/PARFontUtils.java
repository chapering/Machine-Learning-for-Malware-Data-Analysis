package com.adobe.reader;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.Typeface;
import java.util.HashMap;

public final class PARFontUtils
{
  private static final String DEFAULT_FONT_FILE_PATH = "fonts/AdobeSansF2-Regular.otf";
  public static final String DEFAULT_FONT_NAME = "Helvetica";
  private static Typeface mDefaultTypeface = null;
  private static HashMap<String, String> mFontNameMap = new HashMap();
  
  public PARFontUtils() {}
  
  public static String getFontNameForPlatform(String paramString, boolean paramBoolean)
  {
    String str = null;
    if (!paramBoolean)
    {
      if (mFontNameMap.size() == 0) {
        setupFontNameMapping();
      }
      str = (String)mFontNameMap.get(paramString);
    }
    paramString = str;
    if (str == null) {
      paramString = "Helvetica";
    }
    return paramString;
  }
  
  public static float getPlatformFontDescent(Paint paramPaint, float paramFloat, String paramString)
  {
    if (paramPaint != null) {}
    for (paramPaint = new Paint(paramPaint);; paramPaint = new Paint())
    {
      paramPaint.setTextSize(paramFloat);
      paramPaint.setTypeface(getTypeface(paramString));
      return paramPaint.descent();
    }
  }
  
  public static float getPlatformFontTextLineHeight(float paramFloat, String paramString)
  {
    Paint localPaint = new Paint();
    localPaint.setTextSize(paramFloat);
    localPaint.setTypeface(getTypeface(paramString));
    return localPaint.getFontSpacing();
  }
  
  public static float getPlatformTextWidth(String paramString1, float paramFloat, String paramString2)
  {
    Paint localPaint = new Paint();
    localPaint.setTextSize(paramFloat);
    localPaint.setTypeface(getTypeface(paramString2));
    return localPaint.measureText(paramString1);
  }
  
  public static Rect getRectForText(String paramString1, Paint paramPaint, float paramFloat, String paramString2)
  {
    int j;
    int i;
    if (paramPaint != null)
    {
      paramPaint = new Paint(paramPaint);
      paramPaint.setTextSize(paramFloat);
      paramPaint.setTypeface(getTypeface(paramString2));
      if ((paramString1 == null) || (paramString1.length() <= 0)) {
        break label133;
      }
      paramString1 = paramString1.split("\n");
      int k = paramString1.length;
      j = 0;
      i = 0;
      label55:
      if (j < k) {
        break label108;
      }
      paramFloat = k;
      k = (int)(paramPaint.getFontSpacing() * paramFloat);
      j = i;
      i = k;
    }
    for (;;)
    {
      return new Rect(0, 0, j, i);
      paramPaint = new Paint();
      break;
      label108:
      i = Math.max(i, (int)paramPaint.measureText(paramString1[j]));
      j += 1;
      break label55;
      label133:
      i = 0;
      j = 0;
    }
  }
  
  public static Typeface getTypeface(String paramString)
  {
    if (paramString.equals("Helvetica"))
    {
      if (mDefaultTypeface == null) {}
      try
      {
        mDefaultTypeface = Typeface.createFromAsset(ARViewer.getCurrentActivity().getApplicationContext().getResources().getAssets(), "fonts/AdobeSansF2-Regular.otf");
        return mDefaultTypeface;
      }
      catch (Exception paramString)
      {
        for (;;)
        {
          mDefaultTypeface = Typeface.create("Helvetica", 0);
        }
      }
    }
    return Typeface.create(paramString, 0);
  }
  
  private static void setupFontNameMapping()
  {
    mFontNameMap.put("Times New Roman", "Times New Roman");
    mFontNameMap.put("Times-Roman", "Times New Roman");
    mFontNameMap.put("TimesNewRoman", "Times New Roman");
    mFontNameMap.put("TimesNewRomanPSMT", "Times New Roman");
    mFontNameMap.put("Helvetica", "Helvetica");
    mFontNameMap.put("Arial", "Helvetica");
    mFontNameMap.put("Courier", "Courier");
    mFontNameMap.put("CourierNew", "Courier");
    mFontNameMap.put("Courier New", "Courier");
  }
}
