package com.adobe.reader;

import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnCancelListener;
import android.content.DialogInterface.OnClickListener;
import android.content.res.Resources;
import android.text.Editable;
import android.text.InputFilter;
import android.text.Spanned;
import android.text.TextWatcher;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class ARFileListViewManager
  implements AdapterView.OnItemClickListener
{
  private ARFileListLoader mARFileListLoader;
  private ARSplitPane mARSplitPaneActivity;
  private ARFileEntryAdapter.ADAPTER_TYPE mAdapterType;
  private boolean mMoveOperationSuccessful;
  private ARFileEntryAdapter mPdfFilesAdapter;
  private ListView mPdfFilesListView;
  
  public ARFileListViewManager(ListView paramListView, ARSplitPane paramARSplitPane, ARFileEntryAdapter.ADAPTER_TYPE paramADAPTER_TYPE, String paramString)
  {
    this.mARSplitPaneActivity = paramARSplitPane;
    this.mPdfFilesListView = paramListView;
    this.mPdfFilesAdapter = new ARFileEntryAdapter(this.mARSplitPaneActivity, 2130903054, paramADAPTER_TYPE);
    this.mPdfFilesListView.setAdapter(this.mPdfFilesAdapter);
    if ((paramADAPTER_TYPE == ARFileEntryAdapter.ADAPTER_TYPE.FOLDER_VIEW) || (paramADAPTER_TYPE == ARFileEntryAdapter.ADAPTER_TYPE.MOVE_FILES))
    {
      this.mARFileListLoader = new ARFolderViewListLoader(this.mARSplitPaneActivity, this.mPdfFilesAdapter);
      paramListView = paramString;
      if (paramString == null) {
        paramListView = ARFileBrowserUtils.getFileManagerDefaultDirectoryPath(this.mARSplitPaneActivity);
      }
      ((ARFolderViewListLoader)this.mARFileListLoader).setCurrentDirectory(paramListView);
    }
    for (;;)
    {
      this.mARFileListLoader.showFiles();
      this.mPdfFilesListView.setOnItemClickListener(this);
      this.mPdfFilesAdapter.setNotifyOnChange(true);
      this.mAdapterType = paramADAPTER_TYPE;
      if ((this.mAdapterType == ARFileEntryAdapter.ADAPTER_TYPE.ALL_PDFS) || (this.mAdapterType == ARFileEntryAdapter.ADAPTER_TYPE.FOLDER_VIEW)) {
        paramARSplitPane.registerForContextMenu(this.mPdfFilesListView);
      }
      return;
      this.mARFileListLoader = new ARAllPDFListLoader(this.mARSplitPaneActivity, this.mPdfFilesAdapter);
    }
  }
  
  private void openFile(File paramFile)
  {
    this.mARFileListLoader.mFileSelected = true;
    this.mARFileListLoader.stopEnumeratingFiles();
    this.mARSplitPaneActivity.openFile(paramFile);
  }
  
  public void deleteFileAtIndex(int paramInt)
  {
    this.mPdfFilesAdapter.resetCheckedEntries();
    ((ARFileEntry)this.mPdfFilesAdapter.getItem(paramInt)).setChecked(true);
    deleteSelectedFiles(true);
  }
  
  public void deleteSelectedFiles()
  {
    deleteSelectedFiles(false);
  }
  
  public void deleteSelectedFiles(final boolean paramBoolean)
  {
    final ArrayList localArrayList = new ArrayList();
    localArrayList.addAll(this.mPdfFilesAdapter.getCheckedFileEntrylist());
    localArrayList.addAll(this.mPdfFilesAdapter.getCheckedDirectoryEntrylist());
    int i = localArrayList.size();
    if (i == 0) {
      return;
    }
    int j = this.mPdfFilesAdapter.getCheckedDirectoryEntrylist().size();
    AlertDialog.Builder localBuilder;
    String str1;
    if (i == 1)
    {
      i = 1;
      localBuilder = new AlertDialog.Builder(this.mARSplitPaneActivity);
      if (i == 0) {
        break label227;
      }
      localBuilder.setTitle(2131362200);
      str1 = this.mARSplitPaneActivity.getString(2131362201);
      label108:
      str2 = str1;
      if (j > 0) {
        if (j != 1) {
          break label249;
        }
      }
    }
    label227:
    label249:
    for (String str2 = str1 + "\n" + this.mARSplitPaneActivity.getString(2131362202);; str2 = str1 + "\n" + this.mARSplitPaneActivity.getString(2131362205))
    {
      localBuilder.setMessage(str2);
      localBuilder.setPositiveButton(2131361831, new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          paramAnonymousDialogInterface.dismiss();
          paramAnonymousDialogInterface = localArrayList.iterator();
          paramAnonymousInt = 1;
          if (!paramAnonymousDialogInterface.hasNext())
          {
            if (paramAnonymousInt == 0) {
              Toast.makeText(ARFileListViewManager.this.mARSplitPaneActivity, ARFileListViewManager.this.mARSplitPaneActivity.getString(2131361822), 0).show();
            }
          }
          else
          {
            boolean bool = ARFileBrowserUtils.deleteFile(new File(((ARFileEntry)paramAnonymousDialogInterface.next()).getFilePath()));
            if ((paramAnonymousInt != 0) && (bool)) {}
            for (paramAnonymousInt = 1;; paramAnonymousInt = 0) {
              break;
            }
          }
          ARFileListViewManager.this.mARSplitPaneActivity.getRightPaneFragment().refreshFileListViewManagers();
        }
      });
      localBuilder.setNegativeButton(17039360, new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          paramAnonymousDialogInterface.dismiss();
          if (paramBoolean) {
            ARFileListViewManager.this.mPdfFilesAdapter.resetCheckedEntries();
          }
        }
      });
      localBuilder.setOnCancelListener(new DialogInterface.OnCancelListener()
      {
        public void onCancel(DialogInterface paramAnonymousDialogInterface)
        {
          paramAnonymousDialogInterface.dismiss();
          if (paramBoolean) {
            ARFileListViewManager.this.mPdfFilesAdapter.resetCheckedEntries();
          }
        }
      });
      localBuilder.create().show();
      return;
      i = 0;
      break;
      localBuilder.setTitle(2131362203);
      str1 = this.mARSplitPaneActivity.getString(2131362204);
      break label108;
    }
  }
  
  public void duplicateSelectedFiles()
  {
    Object localObject1 = new ArrayList();
    ((List)localObject1).addAll(this.mPdfFilesAdapter.getCheckedFileEntrylist());
    localObject1 = ((List)localObject1).iterator();
    int i = 1;
    do
    {
      if (!((Iterator)localObject1).hasNext())
      {
        if (i == 0) {
          Toast.makeText(this.mARSplitPaneActivity, this.mARSplitPaneActivity.getString(2131361822), 0).show();
        }
        this.mARSplitPaneActivity.getRightPaneFragment().refreshFileListViewManagers();
        return;
      }
      localObject2 = new File(((ARFileEntry)((Iterator)localObject1).next()).getFilePath());
    } while (((File)localObject2).isDirectory());
    Object localObject2 = ((File)localObject2).getAbsolutePath();
    if ((i != 0) && (ARFileBrowserUtils.duplicateFile((String)localObject2))) {}
    for (i = 1;; i = 0) {
      break;
    }
  }
  
  public void enterDocumentEditMode()
  {
    ((Button)this.mARSplitPaneActivity.findViewById(2131493110)).setText(this.mARSplitPaneActivity.getResources().getString(2131361907));
    ((LinearLayout)this.mARSplitPaneActivity.findViewById(2131493099)).setVisibility(8);
    if (this.mARSplitPaneActivity.isRunningOnTablet()) {
      this.mARSplitPaneActivity.findViewById(2131493117).setVisibility(8);
    }
    this.mARSplitPaneActivity.setEditModeToolBarVisibility(true);
    this.mARSplitPaneActivity.invalidateRightPaneToolBar(0, 0);
    ((LinearLayout)this.mARSplitPaneActivity.findViewById(2131493057)).setEnabled(false);
    ((TextView)this.mARSplitPaneActivity.findViewById(2131493059)).setTextColor(this.mARSplitPaneActivity.getResources().getColor(2131230831));
    this.mARSplitPaneActivity.findViewById(2131493058).setVisibility(8);
    this.mPdfFilesAdapter.beginSelectionMode();
    this.mPdfFilesAdapter.notifyDataSetChanged();
    if ((this.mAdapterType == ARFileEntryAdapter.ADAPTER_TYPE.ALL_PDFS) || (this.mAdapterType == ARFileEntryAdapter.ADAPTER_TYPE.FOLDER_VIEW)) {
      this.mARSplitPaneActivity.unregisterForContextMenu(this.mPdfFilesListView);
    }
  }
  
  public void exitDocumentEditMode()
  {
    ((Button)this.mARSplitPaneActivity.findViewById(2131493110)).setText(this.mARSplitPaneActivity.getResources().getString(2131361908));
    ((LinearLayout)this.mARSplitPaneActivity.findViewById(2131493099)).setVisibility(0);
    if (this.mARSplitPaneActivity.isRunningOnTablet()) {
      this.mARSplitPaneActivity.findViewById(2131493117).setVisibility(0);
    }
    this.mARSplitPaneActivity.setEditModeToolBarVisibility(false);
    this.mARSplitPaneActivity.findViewById(2131493058).setVisibility(0);
    ((LinearLayout)this.mARSplitPaneActivity.findViewById(2131493057)).setEnabled(true);
    ((TextView)this.mARSplitPaneActivity.findViewById(2131493059)).setTextColor(this.mARSplitPaneActivity.getResources().getColor(2131230721));
    this.mPdfFilesAdapter.resetCheckedEntries();
    this.mPdfFilesAdapter.endSelectionMode();
    this.mPdfFilesAdapter.notifyDataSetChanged();
    if ((this.mAdapterType == ARFileEntryAdapter.ADAPTER_TYPE.ALL_PDFS) || (this.mAdapterType == ARFileEntryAdapter.ADAPTER_TYPE.FOLDER_VIEW)) {
      this.mARSplitPaneActivity.registerForContextMenu(this.mPdfFilesListView);
    }
  }
  
  public ARFileListLoader getFileListLoader()
  {
    return this.mARFileListLoader;
  }
  
  public boolean isSelectionModeON()
  {
    return this.mPdfFilesAdapter.isSelectionModeON();
  }
  
  public void makeViewVisible()
  {
    this.mARSplitPaneActivity.findViewById(2131493055).setVisibility(0);
  }
  
  public void moveFile(final String paramString, final List<ARFileEntry> paramList, final Context paramContext)
  {
    if ((paramList == null) || (paramList.size() == 0))
    {
      this.mARSplitPaneActivity.getRightPaneFragment().refreshFileListViewManagers();
      if (!this.mMoveOperationSuccessful) {
        Toast.makeText(this.mARSplitPaneActivity, this.mARSplitPaneActivity.getString(2131361822), 0).show();
      }
      return;
    }
    final File localFile1 = new File(((ARFileEntry)paramList.remove(0)).getFilePath());
    final File localFile2 = new File(paramString + File.separatorChar + localFile1.getName());
    if (localFile2.exists())
    {
      AlertDialog.Builder localBuilder = new AlertDialog.Builder(paramContext);
      localBuilder.setTitle(paramContext.getString(2131361915, new Object[] { localFile2.getName() }));
      localBuilder.setPositiveButton(2131361831, new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          for (;;)
          {
            try
            {
              paramAnonymousDialogInterface.dismiss();
              paramAnonymousDialogInterface = ARFileListViewManager.this;
              if ((!ARFileBrowserUtils.moveFileInternal(localFile1, localFile2)) || (!ARFileListViewManager.this.mMoveOperationSuccessful)) {
                continue;
              }
              bool = true;
              paramAnonymousDialogInterface.mMoveOperationSuccessful = bool;
            }
            catch (SecurityException paramAnonymousDialogInterface)
            {
              boolean bool;
              ARFileListViewManager.this.mMoveOperationSuccessful = false;
              continue;
            }
            ARFileListViewManager.this.moveFile(paramString, paramList, paramContext);
            return;
            bool = false;
          }
        }
      });
      localBuilder.setNegativeButton(17039360, new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          paramAnonymousDialogInterface.dismiss();
          ARFileListViewManager.this.moveFile(paramString, paramList, paramContext);
        }
      });
      localBuilder.setOnCancelListener(new DialogInterface.OnCancelListener()
      {
        public void onCancel(DialogInterface paramAnonymousDialogInterface)
        {
          paramAnonymousDialogInterface.dismiss();
          ARFileListViewManager.this.moveFile(paramString, paramList, paramContext);
        }
      });
      localBuilder.create().show();
      return;
    }
    for (;;)
    {
      try
      {
        if ((!ARFileBrowserUtils.moveFileInternal(localFile1, localFile2)) || (!this.mMoveOperationSuccessful)) {
          continue;
        }
        bool = true;
        this.mMoveOperationSuccessful = bool;
      }
      catch (SecurityException localSecurityException)
      {
        boolean bool;
        this.mMoveOperationSuccessful = false;
        continue;
      }
      moveFile(paramString, paramList, paramContext);
      return;
      bool = false;
    }
  }
  
  public void moveSelectedFiles(String paramString)
  {
    ArrayList localArrayList = new ArrayList();
    localArrayList.addAll(this.mPdfFilesAdapter.getCheckedFileEntrylist());
    this.mMoveOperationSuccessful = true;
    moveFile(paramString, localArrayList, this.mARSplitPaneActivity);
  }
  
  public void onItemClick(AdapterView<?> paramAdapterView, View paramView, int paramInt, long paramLong)
  {
    paramInt = (int)paramLong;
    if ((paramInt < 0) || (paramInt > this.mPdfFilesAdapter.getCount() - 1)) {
      return;
    }
    if (this.mAdapterType == ARFileEntryAdapter.ADAPTER_TYPE.ALL_PDFS) {
      ARFileBrowserUtils.addPDFContainingDirectoriesToPreferences(this.mARSplitPaneActivity.getApplicationContext(), this.mARFileListLoader.getDirectoriesContainingPDFs());
    }
    paramAdapterView = (ARFileEntry)this.mPdfFilesAdapter.getItem((int)paramLong);
    paramView = new File(paramAdapterView.getFilePath());
    if (paramAdapterView.getFileEntryType() == ARFileEntry.FILE_ENTRY_TYPE.DIRECTORY)
    {
      openDirectory(paramView);
      return;
    }
    openFile(paramView);
  }
  
  public void openDirectory(File paramFile)
  {
    if ((paramFile == null) || (((ARFolderViewListLoader)this.mARFileListLoader).isDirectoryParentOfMountPoint(paramFile.getAbsolutePath()))) {
      if (this.mAdapterType == ARFileEntryAdapter.ADAPTER_TYPE.MOVE_FILES)
      {
        this.mARSplitPaneActivity.findViewById(2131493005).setVisibility(8);
        this.mARSplitPaneActivity.findViewById(2131493004).setVisibility(8);
      }
    }
    for (;;)
    {
      this.mARFileListLoader.mFileSelected = true;
      this.mPdfFilesAdapter.clear();
      this.mARFileListLoader.resetState();
      this.mARFileListLoader.stopEnumeratingFiles();
      if ((this.mAdapterType == ARFileEntryAdapter.ADAPTER_TYPE.FOLDER_VIEW) || (this.mAdapterType == ARFileEntryAdapter.ADAPTER_TYPE.MOVE_FILES)) {
        ((ARFolderViewListLoader)this.mARFileListLoader).setCurrentDirectory(paramFile);
      }
      this.mARFileListLoader.showFiles();
      return;
      this.mARSplitPaneActivity.findViewById(2131493110).setVisibility(8);
      this.mARSplitPaneActivity.unregisterForContextMenu(this.mPdfFilesListView);
      continue;
      if (this.mAdapterType == ARFileEntryAdapter.ADAPTER_TYPE.MOVE_FILES)
      {
        this.mARSplitPaneActivity.findViewById(2131493005).setVisibility(0);
        this.mARSplitPaneActivity.findViewById(2131493004).setVisibility(0);
      }
      else
      {
        this.mARSplitPaneActivity.findViewById(2131493110).setVisibility(0);
        this.mARSplitPaneActivity.registerForContextMenu(this.mPdfFilesListView);
      }
    }
  }
  
  public void refreshFileListViewManager()
  {
    this.mARFileListLoader.resetState();
    this.mARSplitPaneActivity.getRightPaneFragment().exitDocumentEditMode();
    this.mARFileListLoader.showFiles();
  }
  
  public void releaseFileEntries()
  {
    if (this.mARFileListLoader != null) {
      this.mARFileListLoader.releaseFileEntries();
    }
  }
  
  public void renameSelectedFile()
  {
    Object localObject = new ArrayList();
    ((List)localObject).addAll(this.mPdfFilesAdapter.getCheckedFileEntrylist());
    ((List)localObject).addAll(this.mPdfFilesAdapter.getCheckedDirectoryEntrylist());
    if (((List)localObject).size() != 1) {
      return;
    }
    final ARFileEntry localARFileEntry = (ARFileEntry)((List)localObject).get(0);
    final boolean bool;
    label97:
    final EditText localEditText;
    if (localARFileEntry.getFileEntryType() == ARFileEntry.FILE_ENTRY_TYPE.DIRECTORY)
    {
      bool = true;
      if (!bool) {
        break label286;
      }
      localObject = localARFileEntry.getFilePath();
      localObject = ((String)localObject).substring(((String)localObject).lastIndexOf(File.separator) + 1, ((String)localObject).length());
      localEditText = new EditText(this.mARSplitPaneActivity);
      localEditText.setSingleLine();
      if (bool) {
        break label294;
      }
      localEditText.setText(((String)localObject).substring(0, ((String)localObject).toLowerCase().indexOf(".pdf")));
    }
    for (;;)
    {
      localEditText.setSelectAllOnFocus(true);
      localEditText.setFilters(new InputFilter[] { new InputFilter()
      {
        public CharSequence filter(CharSequence paramAnonymousCharSequence, int paramAnonymousInt1, int paramAnonymousInt2, Spanned paramAnonymousSpanned, int paramAnonymousInt3, int paramAnonymousInt4)
        {
          for (;;)
          {
            if (paramAnonymousInt1 >= paramAnonymousInt2) {
              return null;
            }
            if ("|\\?*<\":>/".contains(String.valueOf(paramAnonymousCharSequence.charAt(paramAnonymousInt1)))) {
              return "";
            }
            paramAnonymousInt1 += 1;
          }
        }
      } });
      localObject = new AlertDialog.Builder(this.mARSplitPaneActivity);
      ((AlertDialog.Builder)localObject).setTitle(2131361903);
      ((AlertDialog.Builder)localObject).setView(localEditText);
      ARUtils.showKeyboard(localEditText);
      ((AlertDialog.Builder)localObject).setPositiveButton(2131361907, new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          String str2 = localARFileEntry.getFilePath().substring(0, localARFileEntry.getFilePath().lastIndexOf(File.separator) + 1) + localEditText.getText().toString();
          String str1 = str2;
          if (!bool)
          {
            str1 = str2;
            if (!str2.toLowerCase().endsWith(".pdf")) {
              str1 = str2 + ".pdf";
            }
          }
          if (ARFileBrowserUtils.renameFile(localARFileEntry.getFilePath(), str1)) {
            ARFileListViewManager.this.mARSplitPaneActivity.getRightPaneFragment().refreshFileListViewManagers();
          }
          for (;;)
          {
            ARUtils.hideKeyboard(localEditText);
            paramAnonymousDialogInterface.dismiss();
            return;
            Toast.makeText(ARFileListViewManager.this.mARSplitPaneActivity, ARFileListViewManager.this.mARSplitPaneActivity.getString(2131361822), 0).show();
          }
        }
      });
      ((AlertDialog.Builder)localObject).setNegativeButton(17039360, new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
        {
          ARUtils.hideKeyboard(localEditText);
          paramAnonymousDialogInterface.dismiss();
        }
      });
      ((AlertDialog.Builder)localObject).setOnCancelListener(new DialogInterface.OnCancelListener()
      {
        public void onCancel(DialogInterface paramAnonymousDialogInterface)
        {
          ARUtils.hideKeyboard(localEditText);
          paramAnonymousDialogInterface.dismiss();
        }
      });
      localObject = ((AlertDialog.Builder)localObject).create();
      localEditText.addTextChangedListener(new TextWatcher()
      {
        public void afterTextChanged(Editable paramAnonymousEditable)
        {
          if (paramAnonymousEditable.length() == 0)
          {
            this.val$renameDialog.getButton(-1).setEnabled(false);
            return;
          }
          this.val$renameDialog.getButton(-1).setEnabled(true);
        }
        
        public void beforeTextChanged(CharSequence paramAnonymousCharSequence, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3) {}
        
        public void onTextChanged(CharSequence paramAnonymousCharSequence, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3) {}
      });
      localEditText.setHint(2131362207);
      ((AlertDialog)localObject).show();
      return;
      bool = false;
      break;
      label286:
      localObject = localARFileEntry.getFileName();
      break label97;
      label294:
      localEditText.setText((CharSequence)localObject);
    }
  }
  
  public void updateSearchString(String paramString)
  {
    this.mPdfFilesAdapter.updateSearchString(paramString);
  }
}
