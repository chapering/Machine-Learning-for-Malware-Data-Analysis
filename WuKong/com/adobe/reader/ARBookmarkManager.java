package com.adobe.reader;

import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.ListView;

public class ARBookmarkManager
{
  private ARViewer mARContext = null;
  private ARBookmarkEntryAdapter mBookmarkEntryAdapter = null;
  private boolean mHasBookmarks = false;
  private long mNativeBookmarkManagerObj;
  
  public ARBookmarkManager(ARViewer paramARViewer, long paramLong)
  {
    this.mARContext = paramARViewer;
    this.mNativeBookmarkManagerObj = getNativeBookmarkManager(paramLong);
    this.mHasBookmarks = hasBookmarks(this.mNativeBookmarkManagerObj);
    this.mBookmarkEntryAdapter = new ARBookmarkEntryAdapter(this.mARContext, this.mNativeBookmarkManagerObj);
    ((ListView)this.mARContext.findViewById(2131492926)).setAdapter(this.mBookmarkEntryAdapter);
    if (!this.mARContext.isRunningOnTablet())
    {
      paramARViewer = this.mARContext.findViewById(2131492925);
      paramARViewer.setVisibility(0);
      paramARViewer.setOnClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          ARBookmarkManager.this.mARContext.hideBookmarks();
        }
      });
    }
  }
  
  private native void cancelFetching(long paramLong);
  
  private void checkBookmarkManager()
  {
    if (this.mNativeBookmarkManagerObj == 0L) {
      throw new IllegalStateException();
    }
  }
  
  private void getCurrentLevelBookmarks()
  {
    checkBookmarkManager();
    this.mBookmarkEntryAdapter.getChildBookmarks();
  }
  
  private native long getNativeBookmarkManager(long paramLong);
  
  private native boolean hasBookmarks(long paramLong);
  
  public void addBookmark(long paramLong1, long paramLong2, int paramInt)
  {
    this.mBookmarkEntryAdapter.addBookmark(paramLong1, paramLong2, paramInt);
  }
  
  public void displayBookmarks()
  {
    ARDocViewManager localARDocViewManager = this.mARContext.getPageView().getDocViewManager();
    if (localARDocViewManager != null) {
      localARDocViewManager.setAnalyticsFlagStatus(2, true);
    }
    getCurrentLevelBookmarks();
    setPanelHeight();
    this.mARContext.findViewById(2131492923).setVisibility(0);
    this.mARContext.findViewById(2131492882).setVisibility(0);
  }
  
  public boolean hasBookmarks()
  {
    return this.mHasBookmarks;
  }
  
  public void hideBookmarks()
  {
    cancelFetching(this.mNativeBookmarkManagerObj);
    this.mARContext.findViewById(2131492923).setVisibility(4);
    this.mARContext.findViewById(2131492882).setVisibility(8);
  }
  
  public void release()
  {
    if (this.mBookmarkEntryAdapter != null)
    {
      this.mBookmarkEntryAdapter.release();
      this.mBookmarkEntryAdapter.notifyDataSetChanged();
      this.mBookmarkEntryAdapter = null;
      this.mNativeBookmarkManagerObj = 0L;
    }
  }
  
  public void setPanelHeight()
  {
    if (this.mARContext.isRunningOnTablet())
    {
      int j = this.mARContext.getScreenHeight();
      int k = this.mARContext.getScreenWidth();
      int i = k;
      if (j >= k) {
        i = j;
      }
      ((ViewGroup)this.mARContext.findViewById(2131492926)).getLayoutParams().height = ((int)(i * 0.45D + 0.5D));
    }
  }
}
