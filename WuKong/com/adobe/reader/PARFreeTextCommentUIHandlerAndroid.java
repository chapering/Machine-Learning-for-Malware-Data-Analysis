package com.adobe.reader;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.res.Resources;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint.FontMetrics;
import android.graphics.Point;
import android.graphics.Rect;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.text.Editable;
import android.text.Selection;
import android.text.TextPaint;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.EditText;
import android.widget.TextView;

public class PARFreeTextCommentUIHandlerAndroid
  implements PopupNoteViewInterface
{
  private static final int DEFAULT_FONT_SIZE = 16;
  private static final int DEFAULT_RECT_WIDTH_BUFFER = 5;
  private String mCachedFontName = null;
  private String mContent;
  private ARViewer mContext = null;
  private float mDocFontDescent;
  private float mDocLineHeight;
  private FreeTextView mFreeTextView = null;
  private long mJNIObj;
  private float mLineHeight;
  private Point mLocation = new Point();
  private int mPageNum = -1;
  private PageView mPageView = null;
  private Paint mPaint = new Paint();
  private PopupNoteView mPopupNoteView = null;
  
  public PARFreeTextCommentUIHandlerAndroid(long paramLong, ARViewer paramARViewer)
  {
    this.mJNIObj = createFreeTextCommentHandler(paramLong);
    this.mContext = paramARViewer;
    this.mPageView = this.mContext.getPageView();
  }
  
  private native long createFreeTextCommentHandler(long paramLong);
  
  private void exitEditMode()
  {
    hidePopupWidget();
    this.mPageView.getDocViewManager().getCommentManager().notifyUIDismissedWithoutChanges();
  }
  
  private Rect getRectForText(String paramString, Paint paramPaint)
  {
    return PARFontUtils.getRectForText(paramString, paramPaint, paramPaint.getTextSize(), this.mCachedFontName);
  }
  
  private String sanitizeContent(String paramString)
  {
    String str = paramString;
    if (paramString != null) {
      str = paramString.replace('\r', '\n');
    }
    return str;
  }
  
  public static native void updateFreeTextComment(long paramLong1, long paramLong2, String paramString, float paramFloat1, float paramFloat2);
  
  public static void updateFreeTextWrapper(long paramLong1, long paramLong2, String paramString, float paramFloat1, float paramFloat2)
  {
    updateFreeTextComment(paramLong1, paramLong2, paramString, paramFloat1, paramFloat2);
  }
  
  public void CancelPressedOnPopup()
  {
    ARUtils.hideKeyboard((EditText)this.mPopupNoteView.getPopupNoteWidgetView().findViewById(2131493033));
    ARCommentManager.COMMENTMODE localCOMMENTMODE = getMode();
    if (localCOMMENTMODE == ARCommentManager.COMMENTMODE.ADD_COMMENT_MODE) {
      cancelCreateWorkflow();
    }
    while (localCOMMENTMODE != ARCommentManager.COMMENTMODE.EDIT_COMMENT_MODE) {
      return;
    }
    exitEditMode();
  }
  
  public void ClosePressedOnPopup() {}
  
  public void DeletePressedOnPopup() {}
  
  public void DonePressedOnPopup()
  {
    EditText localEditText = (EditText)this.mPopupNoteView.getPopupNoteWidgetView().findViewById(2131493033);
    String str = localEditText.getText().toString();
    ARCommentManager localARCommentManager = this.mPageView.getDocViewManager().getCommentManager();
    ARUtils.hideKeyboard(localEditText);
    switch (getMode())
    {
    }
    for (;;)
    {
      hidePopupWidget();
      localARCommentManager.resetActiveTool();
      return;
      createFreeTextCommentWrapper(str, this.mPaint.getFontSpacing());
      continue;
      updateFreeTextWrapper(this.mJNIObj, localARCommentManager.getCurrentEditComment(), str, this.mDocLineHeight, this.mDocFontDescent);
      exitEditMode();
    }
  }
  
  public void EditPressedOnPopup() {}
  
  void addFreeText(int paramInt1, int paramInt2, int paramInt3)
  {
    this.mLocation.x = paramInt1;
    this.mLocation.y = paramInt2;
    this.mPageNum = paramInt3;
    this.mCachedFontName = "Helvetica";
    setMode(ARCommentManager.COMMENTMODE.ADD_COMMENT_MODE);
    showPopup(null);
  }
  
  public void addFreeTextFromContextMenu(int paramInt1, int paramInt2, int paramInt3)
  {
    addFreeTextFromContextMenu(this.mJNIObj, paramInt1, paramInt2, paramInt3);
  }
  
  public native void addFreeTextFromContextMenu(long paramLong, int paramInt1, int paramInt2, int paramInt3);
  
  public void cancelCreateWorkflow()
  {
    hidePopupWidget();
    this.mPageView.getDocViewManager().getCommentManager().resetActiveTool();
  }
  
  public boolean clearUI()
  {
    if ((this.mPopupNoteView != null) && (this.mPopupNoteView.isPopupVisible()) && (getMode() != ARCommentManager.COMMENTMODE.INVALID_MODE))
    {
      ARUtils.hideKeyboard((EditText)this.mPopupNoteView.getPopupNoteWidgetView().findViewById(2131493033));
      hidePopupWidget();
      return true;
    }
    return false;
  }
  
  public void continueCreation()
  {
    String str1 = this.mContent;
    if (str1.length() == 0) {
      return;
    }
    Object localObject = this.mPageView.getDocViewManager().getCommentManager();
    String str2 = ((ARCommentManager)localObject).getAuthorNameFromPreferences();
    int i = ((ARCommentManager)localObject).getAnnotColorFromPreferences(5);
    float f1 = Color.red(i) / 255.0F;
    float f2 = Color.green(i) / 255.0F;
    float f3 = Color.blue(i) / 255.0F;
    float f4 = this.mPaint.getTextSize();
    localObject = getRectForText(str1, this.mPaint);
    createFreeTextComment(this.mJNIObj, str1, str2, this.mLocation.x, this.mLocation.y, this.mPageNum, this.mLineHeight, this.mPaint.descent(), ((Rect)localObject).width() + 5, ((Rect)localObject).height(), "Helvetica", f4, f1, f2, f3);
  }
  
  public native void createFreeTextComment(long paramLong, String paramString1, String paramString2, int paramInt1, int paramInt2, int paramInt3, float paramFloat1, float paramFloat2, int paramInt4, int paramInt5, String paramString3, float paramFloat3, float paramFloat4, float paramFloat5, float paramFloat6);
  
  public void createFreeTextCommentWrapper(String paramString, float paramFloat)
  {
    this.mContent = paramString;
    this.mLineHeight = paramFloat;
    if (this.mPageView.getDocViewManager().getCommentManager().verifyAuthorName(5)) {
      continueCreation();
    }
  }
  
  void editText(long paramLong, String paramString, float paramFloat)
  {
    ARDocViewManager localARDocViewManager;
    if (paramLong != 0L)
    {
      localARDocViewManager = this.mPageView.getDocViewManager();
      if (localARDocViewManager != null) {}
    }
    else
    {
      return;
    }
    localARDocViewManager.getCommentManager().setCurrentEditComment(paramLong);
    setMode(ARCommentManager.COMMENTMODE.EDIT_COMMENT_MODE);
    float f = paramFloat;
    if (paramFloat <= 0.0F) {
      f = 16.0F;
    }
    this.mDocLineHeight = getPlatformFontTextLineHeight(f);
    this.mDocFontDescent = getPlatformFontDescent(f);
    showPopup(sanitizeContent(paramString));
  }
  
  String getFontNameForPlatform(String paramString)
  {
    return PARFontUtils.getFontNameForPlatform(paramString, false);
  }
  
  public ARCommentManager.COMMENTMODE getMode()
  {
    return this.mPageView.getDocViewManager().getCommentManager().getMode();
  }
  
  public float getPlatformFontDescent(float paramFloat)
  {
    return PARFontUtils.getPlatformFontDescent(this.mPaint, paramFloat, this.mCachedFontName);
  }
  
  public String getPlatformFontName()
  {
    return this.mCachedFontName;
  }
  
  public float getPlatformFontTextLineHeight(float paramFloat)
  {
    return PARFontUtils.getPlatformFontTextLineHeight(paramFloat, this.mCachedFontName);
  }
  
  public float getPlatformTextWidth(String paramString, float paramFloat)
  {
    return PARFontUtils.getPlatformTextWidth(paramString, paramFloat, this.mCachedFontName);
  }
  
  public TextView getUIViewForMoveResize(String paramString1, String paramString2, float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4, int paramInt1, int paramInt2)
  {
    paramInt1 = 0;
    this.mFreeTextView = new FreeTextView(this.mContext);
    paramString1 = sanitizeContent(paramString1);
    this.mFreeTextView.setText(paramString1);
    paramString1 = getFontNameForPlatform(paramString2);
    paramString2 = PARFontUtils.getTypeface(paramString1);
    this.mFreeTextView.setTypeface(paramString2);
    this.mFreeTextView.setTextSize(0, paramFloat1);
    int i = Color.argb(255, (int)(paramFloat2 * 255.0F), (int)(paramFloat3 * 255.0F), (int)(255.0F * paramFloat4));
    this.mFreeTextView.setTextColor(i);
    if (paramString1.equals("Helvetica")) {
      paramInt1 = (int)this.mFreeTextView.getPaint().getFontMetrics().leading;
    }
    this.mFreeTextView.initializeFreeTextView(paramInt2, paramInt1);
    this.mCachedFontName = paramString1;
    return this.mFreeTextView;
  }
  
  public void hidePopupWidget()
  {
    if (this.mPopupNoteView.isPopupVisible())
    {
      this.mContext.popBackButtonHandler();
      setMode(ARCommentManager.COMMENTMODE.INVALID_MODE);
      this.mContext.resetTimerHandlerForUIElems();
      this.mPopupNoteView.hidePopupNoteView();
      CommentingToolbar localCommentingToolbar = (CommentingToolbar)this.mContext.getToolbar().findViewById(2131493133);
      if (this.mContext.isToolbarTopView(localCommentingToolbar))
      {
        this.mContext.showUIElems();
        this.mContext.lockToolbar();
      }
    }
  }
  
  public boolean isPopupVisible()
  {
    if (this.mPopupNoteView != null) {
      return this.mPopupNoteView.isPopupVisible();
    }
    return false;
  }
  
  public void setMode(ARCommentManager.COMMENTMODE paramCOMMENTMODE)
  {
    this.mPageView.getDocViewManager().getCommentManager().setMode(paramCOMMENTMODE);
  }
  
  public void setPopupNoteWidgetPosition(int paramInt)
  {
    if (this.mPopupNoteView != null) {
      this.mPopupNoteView.setPopupNoteWidgetPosition(paramInt);
    }
  }
  
  public void showPopup(String paramString)
  {
    Object localObject = PARFontUtils.getTypeface("Helvetica");
    this.mPaint.setTypeface((Typeface)localObject);
    localObject = this.mPageView.getContext().getSharedPreferences("com.adobe.reader.preferences", 0);
    this.mPaint.setTextSize(((SharedPreferences)localObject).getInt("freetextFontSize", 16));
    localObject = this.mContext.getResources().getDrawable(2130837550);
    int i = this.mContext.getResources().getColor(2131230802);
    this.mPopupNoteView = new PopupNoteView(this.mContext, this, (Drawable)localObject, i, i);
    this.mPopupNoteView.setPopupNoteWidgetUIControls(false, paramString);
    this.mContext.unlockToolbar();
    this.mContext.fadeOutUIElems(true);
    localObject = (EditText)this.mPopupNoteView.getPopupNoteWidgetView().findViewById(2131493033);
    ((EditText)localObject).requestFocus();
    ARUtils.showKeyboard((View)localObject);
    if (paramString != null) {
      ((EditText)localObject).setText(paramString);
    }
    paramString = ((EditText)localObject).getText();
    Selection.setSelection(paramString, paramString.length());
    paramString = ((LayoutInflater)this.mContext.getSystemService("layout_inflater")).inflate(2130903050, null);
    ((TextView)paramString.findViewById(2131492940)).setVisibility(8);
    ((TextView)paramString.findViewById(2131492941)).setVisibility(8);
    this.mContext.pushBackButtonHandler(new ARViewer.BackButtonHandler()
    {
      public void onBackPressed()
      {
        PARFreeTextCommentUIHandlerAndroid.this.CancelPressedOnPopup();
      }
    });
    this.mPageView.addOnCloseDocumentListener(new PageView.OnCloseDocumentListener()
    {
      public void onCloseDocument()
      {
        if (PARFreeTextCommentUIHandlerAndroid.this.isPopupVisible()) {
          PARFreeTextCommentUIHandlerAndroid.this.CancelPressedOnPopup();
        }
      }
    });
  }
}
