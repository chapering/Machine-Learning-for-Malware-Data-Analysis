package com.adobe.reader;

import android.app.Activity;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Point;
import android.graphics.Rect;
import android.os.SystemClock;
import android.util.AttributeSet;
import android.view.GestureDetector;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewParent;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.view.animation.ScaleAnimation;
import android.widget.LinearLayout;
import android.widget.Toast;

public class ReflowView
  extends View
  implements ARGestureHandler, Animation.AnimationListener
{
  private static final int LIMIT_ANIMATION_DURATION = 350;
  private static final int PINCH_DISTANCE_THRESHOLD = 20;
  private static final float START_SCALE_FOR_ZOOMIN_ANIMATION = 1.1F;
  private static final float START_SCALE_FOR_ZOOMOUT_ANIMATION = 0.9F;
  private static final int TIME_BEFORE_ALLOWING_ZOOM_AFTER_FLING = 1000;
  private static final float kDefaultFontSize = 2.0F;
  private GestureDetector mGestureDetector;
  private Point mInitialPointer1 = new Point(0, 0);
  private Point mInitialPointer2 = new Point(0, 0);
  private float mInitialPointerDistance;
  private boolean mInitialViewPainted = false;
  private long mLastFlingGestureTime = 0L;
  private long mLastPinchGestureTime = 0L;
  private ARReflowViewManager mReflowViewManager;
  private Toast mToast = null;
  
  public ReflowView(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public ReflowView(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    initialize();
  }
  
  private boolean handleHorizontalFling(FlingDirection paramFlingDirection)
  {
    if (this.mReflowViewManager == null) {
      return true;
    }
    if (paramFlingDirection == FlingDirection.kLeft) {
      this.mReflowViewManager.gotoPreviousScreen();
    }
    for (;;)
    {
      this.mLastFlingGestureTime = SystemClock.uptimeMillis();
      ((ARViewer)getContext()).resetTimerHandlerForUIElems();
      return true;
      this.mReflowViewManager.gotoNextScreen();
    }
  }
  
  private void initialize()
  {
    setFocusable(true);
    setFocusableInTouchMode(true);
    this.mGestureDetector = new GestureDetector((Activity)getContext(), new ARGestureListener((ARViewer)getContext(), this));
  }
  
  private void runLimitAnimation(float paramFloat)
  {
    ScaleAnimation localScaleAnimation = new ScaleAnimation(paramFloat, 1.0F, paramFloat, 1.0F, 1, 0.5F, 1, 0.5F);
    localScaleAnimation.setDuration(350L);
    localScaleAnimation.setFillAfter(true);
    localScaleAnimation.setInterpolator(getContext(), 17432587);
    startAnimation(localScaleAnimation);
    localScaleAnimation.setAnimationListener(this);
  }
  
  private void switchToReflowModeInternal()
  {
    ((LinearLayout)((ARViewer)getContext()).findViewById(2131492880)).setVisibility(0);
    setVisibility(0);
    ViewParent localViewParent = getParent();
    if ((localViewParent instanceof ViewGroup)) {
      ((ViewGroup)localViewParent).setBackgroundColor(-4144960);
    }
  }
  
  public boolean canDecreaseFontSize()
  {
    if (this.mReflowViewManager == null) {
      return false;
    }
    return this.mReflowViewManager.canDecreaseFontSize();
  }
  
  public boolean canIncreaseFontSize()
  {
    if (this.mReflowViewManager == null) {
      return false;
    }
    return this.mReflowViewManager.canIncreaseFontSize();
  }
  
  public void cleanup()
  {
    switchFromReflowMode();
    this.mInitialViewPainted = false;
  }
  
  public void decreaseFontSize()
  {
    if (this.mReflowViewManager != null) {
      this.mReflowViewManager.decreaseFontSize();
    }
  }
  
  int getCurrentPageNum()
  {
    if (this.mReflowViewManager != null) {
      return this.mReflowViewManager.getCurrentPageNum();
    }
    return 0;
  }
  
  public long getLastPinchGestureTime()
  {
    return this.mLastPinchGestureTime;
  }
  
  public void gotoFirstScreenOfPage(int paramInt)
  {
    if (this.mReflowViewManager != null) {
      this.mReflowViewManager.gotoFirstScreenOfPage(paramInt);
    }
  }
  
  public void handleCurrentScreenChange(int paramInt)
  {
    if (this.mReflowViewManager != null) {
      this.mReflowViewManager.handleCurrentScreenChange(paramInt);
    }
  }
  
  public boolean handleDoubleTap(float paramFloat1, float paramFloat2)
  {
    if (this.mReflowViewManager == null) {}
    while (SystemClock.uptimeMillis() - this.mLastFlingGestureTime < 1000L) {
      return true;
    }
    this.mReflowViewManager.handleDoubleTap();
    return true;
  }
  
  public void handleDown(float paramFloat1, float paramFloat2)
  {
    ((ARViewer)getContext()).hideBookmarks();
  }
  
  public boolean handleFling(float paramFloat1, float paramFloat2)
  {
    return false;
  }
  
  public boolean handleLeftFling()
  {
    return handleHorizontalFling(FlingDirection.kLeft);
  }
  
  public void handleLongPress(MotionEvent paramMotionEvent) {}
  
  public boolean handleRightFling()
  {
    return handleHorizontalFling(FlingDirection.kRight);
  }
  
  public void handleScreenSizeChange(int paramInt1, int paramInt2)
  {
    if (this.mReflowViewManager != null) {
      this.mReflowViewManager.handleScreenSizeChange(paramInt1, paramInt2);
    }
  }
  
  public boolean handleScroll(MotionEvent paramMotionEvent1, MotionEvent paramMotionEvent2)
  {
    return false;
  }
  
  public boolean handleTapForDocument(float paramFloat1, float paramFloat2)
  {
    return false;
  }
  
  public boolean handleTapForView(ARGestureHandler.TapZone paramTapZone)
  {
    if (this.mReflowViewManager == null) {
      return true;
    }
    if (paramTapZone == ARGestureHandler.TapZone.kTapLeftZone) {
      this.mReflowViewManager.gotoPreviousScreen();
    }
    ARViewer localARViewer;
    for (;;)
    {
      localARViewer = (ARViewer)getContext();
      if (paramTapZone != ARGestureHandler.TapZone.kNormal) {
        break;
      }
      localARViewer.showOrHideUIElemsForTap();
      return true;
      if (paramTapZone == ARGestureHandler.TapZone.kTapRightZone) {
        this.mReflowViewManager.gotoNextScreen();
      }
    }
    localARViewer.resetTimerHandlerForUIElems();
    return true;
  }
  
  public void increaseFontSize()
  {
    if (this.mReflowViewManager != null) {
      this.mReflowViewManager.increaseFontSize();
    }
  }
  
  public void onAnimationEnd(Animation paramAnimation)
  {
    invalidate();
  }
  
  public void onAnimationRepeat(Animation paramAnimation) {}
  
  public void onAnimationStart(Animation paramAnimation) {}
  
  protected void onDraw(Canvas paramCanvas)
  {
    if (this.mReflowViewManager == null) {}
    do
    {
      return;
      Rect localRect = paramCanvas.getClipBounds();
      this.mReflowViewManager.paintCanvas(paramCanvas, localRect, localRect);
    } while (this.mInitialViewPainted);
    ((ARViewer)getContext()).initialDocViewPainted();
    this.mInitialViewPainted = true;
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    boolean bool = false;
    this.mGestureDetector.onTouchEvent(paramMotionEvent);
    int i = paramMotionEvent.getActionMasked();
    int j = paramMotionEvent.getActionIndex();
    switch (i)
    {
    }
    for (;;)
    {
      bool = true;
      long l;
      do
      {
        return bool;
        this.mInitialPointer1.set((int)paramMotionEvent.getX(0), (int)paramMotionEvent.getY(0));
        break;
        ((ARViewer)getContext()).resetScreenLockTimer();
        break;
        if (paramMotionEvent.getPointerCount() <= 1) {
          break;
        }
        l = SystemClock.uptimeMillis();
      } while (l - this.mLastFlingGestureTime < 1000L);
      this.mLastPinchGestureTime = l;
      ((ARViewer)getContext()).fadeOutUIElems(true);
      continue;
      if (j == 0) {
        this.mInitialPointer1.set((int)paramMotionEvent.getX(0), (int)paramMotionEvent.getY(0));
      }
      for (;;)
      {
        this.mInitialPointerDistance = ((float)Math.sqrt(Math.pow(this.mInitialPointer2.x - this.mInitialPointer1.x, 2.0D) + Math.pow(this.mInitialPointer2.y - this.mInitialPointer1.y, 2.0D)));
        break;
        if (j == 1) {
          this.mInitialPointer2.set((int)paramMotionEvent.getX(1), (int)paramMotionEvent.getY(1));
        }
      }
      i = (int)paramMotionEvent.getX(0);
      j = (int)paramMotionEvent.getY(0);
      int k = (int)paramMotionEvent.getX(1);
      int m = (int)paramMotionEvent.getY(1);
      float f = (float)Math.sqrt(Math.pow(k - i, 2.0D) + Math.pow(m - j, 2.0D)) - this.mInitialPointerDistance;
      if (Math.abs(f) >= 20.0F) {
        if (f > 0.0F)
        {
          if (canIncreaseFontSize()) {
            increaseFontSize();
          } else {
            runLimitAnimation(1.1F);
          }
        }
        else if (canDecreaseFontSize()) {
          decreaseFontSize();
        } else {
          runLimitAnimation(0.9F);
        }
      }
    }
  }
  
  public void openInReflowMode(ARDocViewManager paramARDocViewManager, float paramFloat)
  {
    this.mReflowViewManager = new ARReflowViewManager(paramARDocViewManager, this, paramFloat);
    switchToReflowModeInternal();
  }
  
  public void switchFromReflowMode()
  {
    ((LinearLayout)((ARViewer)getContext()).findViewById(2131492880)).setVisibility(4);
    if (this.mReflowViewManager != null)
    {
      this.mReflowViewManager.release();
      this.mReflowViewManager = null;
    }
    if (this.mToast != null)
    {
      this.mToast.cancel();
      this.mToast = null;
    }
  }
  
  public void switchToReflowMode(ARDocViewManager paramARDocViewManager)
  {
    this.mReflowViewManager = new ARReflowViewManager(paramARDocViewManager, this, 2.0F);
    switchToReflowModeInternal();
    this.mToast = Toast.makeText(getContext(), 2131361922, 1);
    this.mToast.show();
  }
  
  private static enum FlingDirection
  {
    kLeft,  kRight;
  }
}
