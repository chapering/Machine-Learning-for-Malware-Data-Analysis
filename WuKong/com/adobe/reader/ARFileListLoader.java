package com.adobe.reader;

import android.app.Activity;
import android.content.Context;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.TextView;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class ARFileListLoader
{
  private static final int BACKGROUND_THREAD_PRIORITY = Math.max(1, 3);
  private static final int THREAD_MAX_PRIORITY = 10;
  private static final int THRESHOLD_COUNT = 5;
  private Runnable addFilesToAdapter = new Runnable()
  {
    public void run()
    {
      synchronized (ARFileListLoader.this.mPdfFileList)
      {
        if (!ARFileListLoader.this.mPdfFileList.isEmpty())
        {
          if (!ARFileListLoader.this.mThreadTerminationRequested.get())
          {
            ARFileListLoader.this.mPdfFilesAdapter.addAll(ARFileListLoader.this.mPdfFileList, true);
            ARFileListLoader.this.mPdfFilesAdapter.notifyDataSetChanged();
          }
          ARFileListLoader.this.mPdfFileList.clear();
        }
        return;
      }
    }
  };
  private Runnable enumerateFile = new Runnable()
  {
    public void run()
    {
      ARFileListLoader.this.addFiles();
      if (!ARFileListLoader.this.mThreadTerminationRequested.get())
      {
        ARFileListLoader.this.mFullScanCompleted = true;
        if (ARFileListLoader.this.mPdfFilesAdapter.getAdapterType() == ARFileEntryAdapter.ADAPTER_TYPE.ALL_PDFS) {
          ARFileBrowserUtils.addPDFContainingDirectoriesToPreferences(ARFileListLoader.this.mContext, ARFileListLoader.this.mDirectoriesContainingPDFs);
        }
        ((Activity)ARFileListLoader.this.mContext).runOnUiThread(ARFileListLoader.this.postScanComplete);
      }
      ARFileListLoader.this.mBackgroundThread = null;
    }
  };
  private Thread mBackgroundThread = null;
  private Context mContext;
  private List<String> mDirectoriesContainingPDFs = null;
  public boolean mFileSelected;
  private boolean mFullScanCompleted;
  private List<ARFileEntry> mPdfFileList = new ArrayList();
  private ARFileEntryAdapter mPdfFilesAdapter;
  public AtomicBoolean mThreadTerminationRequested = new AtomicBoolean(false);
  private Thread mUiThread;
  private int mUiThreadInitialPriority;
  private Runnable postScanComplete = new Runnable()
  {
    public void run()
    {
      ARFileListLoader.this.destroyBackgroundThread();
    }
  };
  protected Runnable removeUpDirectoryEntry = new Runnable()
  {
    public void run()
    {
      if (ARFileListLoader.this.mPdfFilesAdapter.getAdapterType() == ARFileEntryAdapter.ADAPTER_TYPE.FOLDER_VIEW) {
        ((Activity)ARFileListLoader.this.mContext).findViewById(2131493057).setVisibility(8);
      }
      while (ARFileListLoader.this.mPdfFilesAdapter.getAdapterType() != ARFileEntryAdapter.ADAPTER_TYPE.MOVE_FILES) {
        return;
      }
      ((Activity)ARFileListLoader.this.mContext).findViewById(2131493006).setVisibility(8);
    }
  };
  
  public ARFileListLoader(Context paramContext, ARFileEntryAdapter paramARFileEntryAdapter)
  {
    this.mContext = paramContext;
    this.mPdfFilesAdapter = paramARFileEntryAdapter;
    this.mUiThread = Thread.currentThread();
    this.mUiThreadInitialPriority = this.mUiThread.getPriority();
    resetState();
  }
  
  protected void addAllPDFFiles(File arg1)
  {
    if (this.mThreadTerminationRequested.get()) {
      synchronized (this.mPdfFileList)
      {
        this.mPdfFileList.clear();
        return;
      }
    }
    if (!???.isHidden())
    {
      File[] arrayOfFile;
      if ((this.mPdfFilesAdapter.getAdapterType() == ARFileEntryAdapter.ADAPTER_TYPE.ALL_PDFS) && ((this.mDirectoriesContainingPDFs == null) || (!this.mDirectoriesContainingPDFs.contains(???.getAbsolutePath()))))
      {
        arrayOfFile = ???.listFiles(ARFileBrowserUtils.PDF_FILE_FILTER);
        if ((arrayOfFile != null) && (arrayOfFile.length != 0))
        {
          ARFileBrowserUtils.sortFileList(arrayOfFile);
          if (this.mDirectoriesContainingPDFs == null) {
            this.mDirectoriesContainingPDFs = new ArrayList();
          }
          this.mDirectoriesContainingPDFs.add(???.getAbsolutePath());
          addGivenFiles(arrayOfFile);
        }
      }
      ??? = ???.listFiles(ARFileBrowserUtils.DIRECTORY_FILTER);
      if ((??? != null) && (???.length != 0))
      {
        ARFileBrowserUtils.sortFileList(???);
        int j = ???.length;
        int i = 0;
        while (i < j)
        {
          arrayOfFile = ???[i];
          if (this.mThreadTerminationRequested.get()) {
            synchronized (this.mPdfFileList)
            {
              this.mPdfFileList.clear();
              return;
            }
          }
          addAllPDFFiles(localFile);
          i += 1;
        }
      }
    }
  }
  
  protected void addCurrentDirectoryFiles(File arg1, int paramInt)
  {
    if (this.mThreadTerminationRequested.get()) {
      synchronized (this.mPdfFileList)
      {
        this.mPdfFileList.clear();
        return;
      }
    }
    if ((paramInt & 0x2) != 0)
    {
      File[] arrayOfFile = ???.listFiles(ARFileBrowserUtils.DIRECTORY_FILTER);
      if ((arrayOfFile != null) && (arrayOfFile.length != 0))
      {
        ARFileBrowserUtils.sortFileList(arrayOfFile);
        addGivenFiles(arrayOfFile);
      }
    }
    if ((paramInt & 0x1) != 0)
    {
      ??? = ???.listFiles(ARFileBrowserUtils.PDF_FILE_FILTER);
      if ((??? != null) && (???.length != 0))
      {
        ARFileBrowserUtils.sortFileList(???);
        addGivenFiles(???);
      }
    }
  }
  
  protected abstract void addFiles();
  
  protected void addGivenFiles(File[] arg1)
  {
    if (this.mThreadTerminationRequested.get()) {
      synchronized (this.mPdfFileList)
      {
        this.mPdfFileList.clear();
        return;
      }
    }
    if ((??? != null) && (???.length != 0))
    {
      int i = 0;
      int m = ???.length;
      int j = 0;
      if (j >= m)
      {
        if ((!this.mPdfFileList.isEmpty()) && (!this.mThreadTerminationRequested.get())) {
          ((Activity)this.mContext).runOnUiThread(this.addFilesToAdapter);
        }
      }
      else
      {
        File localFile = ???[j];
        if (this.mThreadTerminationRequested.get()) {
          synchronized (this.mPdfFileList)
          {
            this.mPdfFileList.clear();
            return;
          }
        }
        if ((localFile != null) && (localFile.exists()) && (localFile.canRead())) {
          if (!localFile.isHidden()) {}
        }
        for (;;)
        {
          j += 1;
          break;
          synchronized (this.mPdfFileList)
          {
            if (localFile.isDirectory())
            {
              this.mPdfFileList.add(new ARFileEntry(localFile.getAbsolutePath()));
              int k = i + 1;
              i = k;
              if (5 == k)
              {
                i = k;
                if (!this.mThreadTerminationRequested.get())
                {
                  ((Activity)this.mContext).runOnUiThread(this.addFilesToAdapter);
                  i = 0;
                }
              }
            }
            else
            {
              ARLastViewedPosition localARLastViewedPosition = new ARLastViewedPosition();
              this.mPdfFileList.add(new ARFileEntry(localFile.getName(), localFile.getAbsolutePath(), localFile.lastModified(), localFile.length(), localARLastViewedPosition, ARFileEntry.THUMBNAIL_STATUS.NO_THUMBNAIL));
            }
          }
        }
      }
    }
  }
  
  public void destroyBackgroundThread()
  {
    if ((this.mFullScanCompleted) && (this.mPdfFilesAdapter.isEmpty()) && ((this.mContext instanceof ARSplitPane)) && (this.mPdfFilesAdapter.getAdapterType() == ARFileEntryAdapter.ADAPTER_TYPE.ALL_PDFS))
    {
      if (this.mPdfFilesAdapter.getSearchString() != null) {
        break label107;
      }
      ((Activity)this.mContext).findViewById(2131493064).setVisibility(0);
    }
    for (;;)
    {
      if ((this.mThreadTerminationRequested.get()) && (!this.mFileSelected))
      {
        this.mPdfFilesAdapter.clear();
        this.mFullScanCompleted = false;
      }
      this.mUiThread.setPriority(this.mUiThreadInitialPriority);
      return;
      label107:
      ((Activity)this.mContext).findViewById(2131493063).setVisibility(0);
    }
  }
  
  public List<String> getDirectoriesContainingPDFs()
  {
    return this.mDirectoriesContainingPDFs;
  }
  
  public boolean isFullScanComplete()
  {
    return this.mFullScanCompleted;
  }
  
  public void releaseFileEntries()
  {
    if (this.mPdfFileList != null) {
      this.mPdfFileList.clear();
    }
    if (this.mPdfFilesAdapter != null) {
      this.mPdfFilesAdapter.clear();
    }
  }
  
  public void resetState()
  {
    this.mFullScanCompleted = false;
    this.mFileSelected = false;
    if (this.mDirectoriesContainingPDFs == null) {
      this.mDirectoriesContainingPDFs = ARFileBrowserUtils.getDirectoriesContainingPDFs(this.mContext);
    }
  }
  
  public void showFiles()
  {
    if ((this.mBackgroundThread != null) && (this.mBackgroundThread.isAlive()) && (this.mThreadTerminationRequested.get())) {}
    try
    {
      this.mBackgroundThread.join();
      if (this.mBackgroundThread == null)
      {
        if (!this.mFullScanCompleted) {
          break label134;
        }
        if (((this.mContext instanceof ARSplitPane)) && (this.mPdfFilesAdapter.getAdapterType() == ARFileEntryAdapter.ADAPTER_TYPE.ALL_PDFS))
        {
          View localView = ((Activity)this.mContext).findViewById(2131493064);
          localView.setVisibility(8);
          if (this.mPdfFilesAdapter.isEmpty())
          {
            if (this.mPdfFilesAdapter.getSearchString() != null) {
              break label116;
            }
            localView.setVisibility(0);
          }
        }
      }
      return;
      label116:
      ((Activity)this.mContext).findViewById(2131493063).setVisibility(0);
      return;
      label134:
      this.mUiThread.setPriority(10);
      this.mThreadTerminationRequested.set(false);
      this.mPdfFileList.clear();
      this.mPdfFilesAdapter.resetAdapter();
      this.mBackgroundThread = new Thread(null, this.enumerateFile);
      this.mBackgroundThread.setPriority(BACKGROUND_THREAD_PRIORITY);
      this.mBackgroundThread.start();
      return;
    }
    catch (InterruptedException localInterruptedException)
    {
      for (;;) {}
    }
  }
  
  public void stopEnumeratingFiles()
  {
    this.mThreadTerminationRequested.set(true);
    destroyBackgroundThread();
  }
  
  protected class AddUpDirectoryRunnable
    implements Runnable
  {
    private String mDirectoryName;
    
    public AddUpDirectoryRunnable(String paramString)
    {
      this.mDirectoryName = paramString;
    }
    
    public void run()
    {
      if (ARFileListLoader.this.mPdfFilesAdapter.getAdapterType() == ARFileEntryAdapter.ADAPTER_TYPE.FOLDER_VIEW)
      {
        localObject = (LinearLayout)((Activity)ARFileListLoader.this.mContext).findViewById(2131493057);
        ((LinearLayout)localObject).setVisibility(0);
        ((TextView)((LinearLayout)localObject).findViewById(2131493059)).setText(this.mDirectoryName);
      }
      while (ARFileListLoader.this.mPdfFilesAdapter.getAdapterType() != ARFileEntryAdapter.ADAPTER_TYPE.MOVE_FILES) {
        return;
      }
      Object localObject = ((Activity)ARFileListLoader.this.mContext).findViewById(2131493006);
      ((View)localObject).setVisibility(0);
      ((TextView)((View)localObject).findViewById(2131493008)).setText(this.mDirectoryName);
    }
  }
  
  public static class FETCH_CURRENT_DIRECTORY_FILES
  {
    public static final int FETCH_DIRECTORIES = 2;
    public static final int FETCH_PDFS = 1;
    
    public FETCH_CURRENT_DIRECTORY_FILES() {}
  }
}
