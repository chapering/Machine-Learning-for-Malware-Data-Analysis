package com.adobe.reader;

import android.graphics.Canvas;
import android.graphics.Rect;
import android.text.Editable;
import android.text.InputFilter;
import android.text.InputFilter.LengthFilter;
import android.text.TextWatcher;
import android.text.method.PasswordTransformationMethod;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnKeyListener;
import android.view.Window;
import android.widget.RelativeLayout.LayoutParams;

public class ARUITextView
  extends AREditText
  implements ARTextView, ARUIDatePickerView.ARUIDatePickerViewListener, IPlatformView, View.OnKeyListener, TextWatcher
{
  private int mAfterCount;
  private int mAfterStart;
  private String mAfterString;
  private int mBeforeCount;
  private int mBeforeStart;
  private String mBeforeString;
  private ARUIDatePickerView mDateView;
  private boolean mDoNotScroll;
  private long mField;
  private boolean mFirstDraw;
  private boolean mHandlingTextChange = false;
  private int mHeight;
  private int mMaxLines;
  private boolean mNeedsTextAutoSize;
  private boolean mSingleLine;
  private int mWidth;
  
  public ARUITextView(ARViewer paramARViewer, int paramInt1, int paramInt2, int paramInt3, int paramInt4, long paramLong)
  {
    super(paramARViewer);
    this.mField = paramLong;
    this.mMaxLines = 0;
    this.mFirstDraw = true;
    this.mNeedsTextAutoSize = true;
    this.mSingleLine = false;
    this.mDoNotScroll = false;
    this.mWidth = paramInt1;
    this.mHeight = paramInt2;
    this.mDateView = null;
    this.mBeforeString = null;
    this.mBeforeStart = -1;
    this.mBeforeCount = -1;
    this.mAfterString = null;
    this.mAfterStart = -1;
    this.mAfterCount = -1;
    paramARViewer = new RelativeLayout.LayoutParams(this.mWidth, this.mHeight);
    paramARViewer.setMargins(paramInt3, paramInt4, 0, 0);
    setLayoutParams(paramARViewer);
    setGravity(16);
    setInputType(49153);
    setFocusable(true);
    setFocusableInTouchMode(true);
    setBackgroundResource(0);
    setOnKeyListener(this);
    addTextChangedListener(this);
  }
  
  private native void commit(long paramLong, String paramString);
  
  private native String getDateFormatString(long paramLong);
  
  private native float getScaledFontSize(long paramLong, float paramFloat);
  
  private boolean showDatePickerIfFieldIsDate()
  {
    boolean bool2 = false;
    boolean bool1 = bool2;
    if (this.mField != 0L)
    {
      String str = getDateFormatString(this.mField);
      bool1 = bool2;
      if (str.length() > 0)
      {
        this.mDateView = new ARUIDatePickerView((ARViewer)getContext(), this);
        this.mDateView.display(getText().toString(), str);
        bool1 = true;
      }
    }
    return bool1;
  }
  
  public void adjustToTheNewScroll() {}
  
  public void adjustToTheNewZoom()
  {
    if (this.mField != 0L)
    {
      Rect localRect = ARUIView.updateViewBounds(this, this.mField);
      if (localRect != null)
      {
        this.mWidth = Math.abs(localRect.right - localRect.left);
        this.mHeight = Math.abs(localRect.bottom - localRect.top);
      }
      setTextSize(0, getScaledFontSize(this.mField, 0.0F));
    }
  }
  
  public void afterTextChanged(Editable paramEditable)
  {
    if (!this.mHandlingTextChange)
    {
      this.mHandlingTextChange = true;
      if ((this.mBeforeString != null) && (this.mBeforeStart != -1) && (this.mBeforeCount != -1) && (this.mAfterString != null) && (this.mAfterStart != -1) && (this.mAfterCount != -1)) {
        ARUITextBasedView.onTextWillChange(this, this.mField, new String(this.mBeforeString), this.mBeforeStart, this.mBeforeCount, new String(this.mAfterString), this.mAfterStart, this.mAfterCount);
      }
      if ((this.mDoNotScroll) && (this.mBeforeCount <= this.mAfterCount))
      {
        paramEditable = ((ARViewer)getContext()).getWindow();
        if (paramEditable != null)
        {
          paramEditable = paramEditable.getCurrentFocus();
          if ((paramEditable != null) && ((paramEditable instanceof ARUITextView)))
          {
            paramEditable = (ARUITextView)paramEditable;
            if (paramEditable.getLineCount() > paramEditable.getMaxLineCount())
            {
              paramEditable.setText(this.mAfterString.subSequence(0, paramEditable.getSelectionStart() - (this.mAfterCount - this.mBeforeCount)));
              paramEditable.setSelection(paramEditable.getText().length());
            }
          }
        }
      }
      this.mHandlingTextChange = false;
    }
  }
  
  public void beforeTextChanged(CharSequence paramCharSequence, int paramInt1, int paramInt2, int paramInt3)
  {
    if (paramCharSequence != null)
    {
      this.mBeforeString = paramCharSequence.toString();
      this.mBeforeStart = paramInt1;
      this.mBeforeCount = paramInt2;
    }
  }
  
  public void commit()
  {
    String str = getText().toString();
    commit(this.mField, str);
  }
  
  public void finalZoomLevel(double paramDouble) {}
  
  public int getMaxLineCount()
  {
    return this.mMaxLines;
  }
  
  public void initialZoomLevel(double paramDouble) {}
  
  protected void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    post(new Runnable()
    {
      public void run()
      {
        ARUITextView.this.requestFocus();
      }
    });
  }
  
  public void onDateSet(String paramString)
  {
    this.mDateView = null;
    setText(paramString);
  }
  
  protected void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    if (this.mDateView != null) {
      this.mDateView.dismiss();
    }
  }
  
  protected void onDraw(Canvas paramCanvas)
  {
    int j = 0;
    super.onDraw(paramCanvas);
    if (this.mFirstDraw)
    {
      this.mFirstDraw = false;
      if (this.mNeedsTextAutoSize)
      {
        i = Math.max(getHeight() - getPaddingTop() - getPaddingBottom(), getWidth() - getPaddingLeft() - getPaddingRight());
        if (i < 0) {
          break label105;
        }
      }
    }
    int k;
    for (;;)
    {
      setTextSize(1, i);
      k = getHeight() - getPaddingTop() - getPaddingBottom();
      if (this.mMaxLines == 0)
      {
        if (!this.mSingleLine) {
          break;
        }
        this.mMaxLines = 1;
      }
      return;
      label105:
      i = 0;
    }
    int m = getLineHeight();
    int i = j;
    if (m > 0)
    {
      i = j;
      if (k > 0) {
        i = k / m;
      }
    }
    this.mMaxLines = i;
  }
  
  protected void onFocusChanged(boolean paramBoolean, int paramInt, Rect paramRect)
  {
    super.onFocusChanged(paramBoolean, paramInt, paramRect);
    if (paramBoolean)
    {
      setSelection(getText().length());
      if (!showDatePickerIfFieldIsDate()) {
        ARUtils.showKeyboard(this);
      }
    }
  }
  
  public boolean onKey(View paramView, int paramInt, KeyEvent paramKeyEvent)
  {
    if (this.mSingleLine) {}
    for (boolean bool = false;; bool = true) {
      return ARWidgetToolbars.onKey(paramView, paramInt, paramKeyEvent, bool);
    }
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    super.onLayout(paramBoolean, paramInt1, paramInt2, paramInt3, paramInt4);
    adjustPadding(this.mField, this.mSingleLine);
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    setMeasuredDimension(this.mWidth, this.mHeight);
  }
  
  public void onTextChanged(CharSequence paramCharSequence, int paramInt1, int paramInt2, int paramInt3)
  {
    if (paramCharSequence != null)
    {
      this.mAfterString = paramCharSequence.toString();
      this.mAfterStart = paramInt1;
      this.mAfterCount = paramInt3;
    }
  }
  
  public void panEnded() {}
  
  public void panStarted() {}
  
  public void setDoNotScrollProperty(boolean paramBoolean)
  {
    this.mDoNotScroll = paramBoolean;
    if (this.mDoNotScroll) {
      setHorizontallyScrolling(false);
    }
  }
  
  public void setFormatProperty(int paramInt)
  {
    super.setFormatProperty(paramInt);
  }
  
  public void setMaxLenProperty(int paramInt)
  {
    if (paramInt > 0) {
      setFilters(new InputFilter[] { new InputFilter.LengthFilter(paramInt) });
    }
  }
  
  public void setMultilineProperty(boolean paramBoolean)
  {
    if (paramBoolean)
    {
      setSingleLine(false);
      setGravity(getGravity() & 0x7 | 0x30);
      return;
    }
    setSingleLine(true);
    setGravity(getGravity() & 0x7 | 0x10);
  }
  
  public void setPasswordProperty(boolean paramBoolean)
  {
    if (paramBoolean) {
      setTransformationMethod(new PasswordTransformationMethod());
    }
  }
  
  public void setSingleLine(boolean paramBoolean)
  {
    super.setSingleLine(paramBoolean);
    this.mSingleLine = paramBoolean;
  }
  
  public void setSpellCheckProperty(boolean paramBoolean) {}
  
  public void setTextSize(int paramInt, float paramFloat)
  {
    super.setTextSize(paramInt, paramFloat);
    if (paramFloat > 0.0F) {
      this.mNeedsTextAutoSize = false;
    }
  }
}
