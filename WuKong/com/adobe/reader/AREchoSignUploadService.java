package com.adobe.reader;

import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.res.Resources;
import android.os.AsyncTask;
import android.os.AsyncTask.Status;
import android.os.Bundle;
import android.os.IBinder;
import android.util.Base64OutputStream;
import android.util.Pair;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.entity.FileEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.params.HttpProtocolParams;
import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;

public class AREchoSignUploadService
  extends Service
{
  public static final String BROADCAST_ACTION_COMPLETE = "com.adobe.adobereader.AREchoSignUploadService.complete";
  public static final int ECHOSIGNUPLOAD_ERROR = 2;
  public static final int ECHOSIGNUPLOAD_OFFLINE = 1;
  public static final int ECHOSIGNUPLOAD_SUCCESS = 0;
  public static final String RESULT_KEY = "Result";
  public static final String URL_KEY = "URL";
  private AsyncTask<Void, Integer, Void> mAsyncTask;
  private Service mContext;
  private String mFileURL;
  private Intent mIntent;
  private File mPDFFile;
  private File mTempFile = null;
  
  public AREchoSignUploadService() {}
  
  public IBinder onBind(Intent paramIntent)
  {
    return null;
  }
  
  public void onCreate()
  {
    super.onCreate();
    this.mContext = this;
  }
  
  public void onDestroy()
  {
    super.onDestroy();
    if ((this.mAsyncTask != null) && (this.mAsyncTask.getStatus() == AsyncTask.Status.RUNNING)) {
      this.mAsyncTask.cancel(true);
    }
  }
  
  public void onStart(Intent paramIntent, int paramInt)
  {
    super.onStart(paramIntent, paramInt);
    try
    {
      this.mIntent = paramIntent;
      paramIntent = paramIntent.getExtras();
      if (paramIntent != null)
      {
        this.mFileURL = ((String)paramIntent.getCharSequence("URL"));
        this.mPDFFile = new File(new URI(this.mFileURL));
        this.mAsyncTask = new UploadTask(this).execute(new Void[0]);
      }
      return;
    }
    catch (URISyntaxException paramIntent)
    {
      stopService(this.mIntent);
    }
  }
  
  private class UploadTask
    extends AsyncTask<Void, Integer, Void>
  {
    private static final int NOTIFICATION_ID = 1;
    private static final int READBUFFERSIZE = 524288;
    private static final int READTIMEOUT = 10000;
    private static final int SOCKETTIMEOUT = 15000;
    private BroadcastReceiver broadcastReceiver_restart = new BroadcastReceiver()
    {
      public void onReceive(Context paramAnonymousContext, Intent paramAnonymousIntent)
      {
        if (AREchoSignUploadService.UploadTask.this.mThread != null) {
          AREchoSignUploadService.UploadTask.this.mThread.setPriority(10);
        }
        AREchoSignUploadService.UploadTask.this.setActivityStopped(false);
      }
    };
    private BroadcastReceiver broadcastReceiver_stop = new BroadcastReceiver()
    {
      public void onReceive(Context paramAnonymousContext, Intent paramAnonymousIntent)
      {
        if (AREchoSignUploadService.UploadTask.this.mThread != null) {
          AREchoSignUploadService.UploadTask.this.mThread.setPriority(5);
        }
        AREchoSignUploadService.UploadTask.this.setActivityStopped(true);
      }
    };
    private boolean mActivityStopped = false;
    private HttpPost mHttppost = null;
    private String mResponse;
    private int mResult;
    private Service mServiceContext;
    private Thread mThread = null;
    
    public UploadTask(Service paramService)
    {
      this.mServiceContext = paramService;
    }
    
    private void deleteTempFile()
    {
      if (AREchoSignUploadService.this.mTempFile != null) {
        AREchoSignUploadService.this.mTempFile.delete();
      }
    }
    
    private boolean isActivityStopped()
    {
      try
      {
        boolean bool = this.mActivityStopped;
        return bool;
      }
      finally
      {
        localObject = finally;
        throw localObject;
      }
    }
    
    private void setActivityStopped(boolean paramBoolean)
    {
      try
      {
        this.mActivityStopped = paramBoolean;
        notify();
        return;
      }
      finally
      {
        localObject = finally;
        throw localObject;
      }
    }
    
    protected void createAndOpenTemporaryFileContainingBase64EncodedPDFInSOAPWrapper()
      throws IOException
    {
      Pair localPair = getSOAPEnvelopePrefixAndPostfix();
      AREchoSignUploadService.this.mTempFile = File.createTempFile("SendForSignature-", ".xml");
      FileOutputStream localFileOutputStream = new FileOutputStream(AREchoSignUploadService.this.mTempFile);
      localFileOutputStream.write(((String)localPair.first).getBytes("UTF-8"));
      writeBase64EncodedPDF(localFileOutputStream);
      localFileOutputStream.write(((String)localPair.second).getBytes("UTF-8"));
    }
    
    /* Error */
    protected Void doInBackground(Void... paramVarArgs)
    {
      // Byte code:
      //   0: aload_0
      //   1: getfield 46	com/adobe/reader/AREchoSignUploadService$UploadTask:this$0	Lcom/adobe/reader/AREchoSignUploadService;
      //   4: invokestatic 163	com/adobe/reader/AREchoSignUploadService:access$3	(Lcom/adobe/reader/AREchoSignUploadService;)Landroid/app/Service;
      //   7: ldc -91
      //   9: invokevirtual 171	android/app/Service:getSystemService	(Ljava/lang/String;)Ljava/lang/Object;
      //   12: checkcast 173	android/net/ConnectivityManager
      //   15: invokevirtual 177	android/net/ConnectivityManager:getActiveNetworkInfo	()Landroid/net/NetworkInfo;
      //   18: astore_1
      //   19: aload_1
      //   20: ifnull +249 -> 269
      //   23: aload_1
      //   24: invokevirtual 182	android/net/NetworkInfo:isConnected	()Z
      //   27: ifeq +242 -> 269
      //   30: aload_0
      //   31: invokestatic 188	java/lang/Thread:currentThread	()Ljava/lang/Thread;
      //   34: putfield 59	com/adobe/reader/AREchoSignUploadService$UploadTask:mThread	Ljava/lang/Thread;
      //   37: aload_0
      //   38: getfield 59	com/adobe/reader/AREchoSignUploadService$UploadTask:mThread	Ljava/lang/Thread;
      //   41: bipush 10
      //   43: invokevirtual 192	java/lang/Thread:setPriority	(I)V
      //   46: aload_0
      //   47: invokevirtual 194	com/adobe/reader/AREchoSignUploadService$UploadTask:createAndOpenTemporaryFileContainingBase64EncodedPDFInSOAPWrapper	()V
      //   50: aload_0
      //   51: invokevirtual 197	com/adobe/reader/AREchoSignUploadService$UploadTask:upload	()V
      //   54: aload_0
      //   55: invokespecial 199	com/adobe/reader/AREchoSignUploadService$UploadTask:isActivityStopped	()Z
      //   58: ifeq +200 -> 258
      //   61: aload_0
      //   62: invokevirtual 202	com/adobe/reader/AREchoSignUploadService$UploadTask:isCancelled	()Z
      //   65: ifne +193 -> 258
      //   68: aload_0
      //   69: getfield 59	com/adobe/reader/AREchoSignUploadService$UploadTask:mThread	Ljava/lang/Thread;
      //   72: iconst_5
      //   73: invokevirtual 192	java/lang/Thread:setPriority	(I)V
      //   76: aload_0
      //   77: getfield 46	com/adobe/reader/AREchoSignUploadService$UploadTask:this$0	Lcom/adobe/reader/AREchoSignUploadService;
      //   80: ldc -52
      //   82: invokevirtual 205	com/adobe/reader/AREchoSignUploadService:getSystemService	(Ljava/lang/String;)Ljava/lang/Object;
      //   85: checkcast 207	android/app/NotificationManager
      //   88: astore_2
      //   89: aload_0
      //   90: getfield 84	com/adobe/reader/AREchoSignUploadService$UploadTask:mResult	I
      //   93: tableswitch	default:+27->120, 0:+184->277, 1:+220->313, 2:+237->330
      //   120: aload_0
      //   121: getfield 46	com/adobe/reader/AREchoSignUploadService$UploadTask:this$0	Lcom/adobe/reader/AREchoSignUploadService;
      //   124: invokestatic 163	com/adobe/reader/AREchoSignUploadService:access$3	(Lcom/adobe/reader/AREchoSignUploadService;)Landroid/app/Service;
      //   127: ldc -48
      //   129: invokevirtual 212	android/app/Service:getString	(I)Ljava/lang/String;
      //   132: astore_1
      //   133: aload_0
      //   134: getfield 46	com/adobe/reader/AREchoSignUploadService$UploadTask:this$0	Lcom/adobe/reader/AREchoSignUploadService;
      //   137: invokestatic 163	com/adobe/reader/AREchoSignUploadService:access$3	(Lcom/adobe/reader/AREchoSignUploadService;)Landroid/app/Service;
      //   140: ldc -43
      //   142: invokevirtual 212	android/app/Service:getString	(I)Ljava/lang/String;
      //   145: astore_3
      //   146: new 215	android/content/Intent
      //   149: dup
      //   150: aload_0
      //   151: getfield 65	com/adobe/reader/AREchoSignUploadService$UploadTask:mServiceContext	Landroid/app/Service;
      //   154: ldc -39
      //   156: invokespecial 220	android/content/Intent:<init>	(Landroid/content/Context;Ljava/lang/Class;)V
      //   159: astore 4
      //   161: aload 4
      //   163: ldc -34
      //   165: invokevirtual 226	android/content/Intent:setAction	(Ljava/lang/String;)Landroid/content/Intent;
      //   168: pop
      //   169: aload 4
      //   171: ldc -29
      //   173: invokevirtual 231	android/content/Intent:addFlags	(I)Landroid/content/Intent;
      //   176: pop
      //   177: aload 4
      //   179: ldc -24
      //   181: invokevirtual 231	android/content/Intent:addFlags	(I)Landroid/content/Intent;
      //   184: pop
      //   185: aload_0
      //   186: getfield 65	com/adobe/reader/AREchoSignUploadService$UploadTask:mServiceContext	Landroid/app/Service;
      //   189: iconst_0
      //   190: aload 4
      //   192: ldc -23
      //   194: invokestatic 239	android/app/PendingIntent:getActivity	(Landroid/content/Context;ILandroid/content/Intent;I)Landroid/app/PendingIntent;
      //   197: astore 4
      //   199: new 241	android/app/Notification
      //   202: dup
      //   203: ldc -14
      //   205: aload_1
      //   206: invokestatic 248	java/lang/System:currentTimeMillis	()J
      //   209: invokespecial 251	android/app/Notification:<init>	(ILjava/lang/CharSequence;J)V
      //   212: astore 5
      //   214: aload 5
      //   216: aload 5
      //   218: getfield 254	android/app/Notification:flags	I
      //   221: bipush 16
      //   223: ior
      //   224: putfield 254	android/app/Notification:flags	I
      //   227: aload 5
      //   229: aload_0
      //   230: getfield 65	com/adobe/reader/AREchoSignUploadService$UploadTask:mServiceContext	Landroid/app/Service;
      //   233: aload_3
      //   234: aload_1
      //   235: aload 4
      //   237: invokevirtual 258	android/app/Notification:setLatestEventInfo	(Landroid/content/Context;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Landroid/app/PendingIntent;)V
      //   240: aload_2
      //   241: iconst_1
      //   242: aload 5
      //   244: invokevirtual 261	android/app/NotificationManager:notify	(ILandroid/app/Notification;)V
      //   247: aload_0
      //   248: monitorenter
      //   249: aload_0
      //   250: invokespecial 199	com/adobe/reader/AREchoSignUploadService$UploadTask:isActivityStopped	()Z
      //   253: ifne +93 -> 346
      //   256: aload_0
      //   257: monitorexit
      //   258: aconst_null
      //   259: areturn
      //   260: astore_1
      //   261: aload_0
      //   262: iconst_2
      //   263: putfield 84	com/adobe/reader/AREchoSignUploadService$UploadTask:mResult	I
      //   266: goto -212 -> 54
      //   269: aload_0
      //   270: iconst_1
      //   271: putfield 84	com/adobe/reader/AREchoSignUploadService$UploadTask:mResult	I
      //   274: goto -220 -> 54
      //   277: aload_0
      //   278: getfield 46	com/adobe/reader/AREchoSignUploadService$UploadTask:this$0	Lcom/adobe/reader/AREchoSignUploadService;
      //   281: invokestatic 163	com/adobe/reader/AREchoSignUploadService:access$3	(Lcom/adobe/reader/AREchoSignUploadService;)Landroid/app/Service;
      //   284: ldc_w 262
      //   287: invokevirtual 212	android/app/Service:getString	(I)Ljava/lang/String;
      //   290: ldc_w 264
      //   293: aload_0
      //   294: getfield 46	com/adobe/reader/AREchoSignUploadService$UploadTask:this$0	Lcom/adobe/reader/AREchoSignUploadService;
      //   297: invokestatic 267	com/adobe/reader/AREchoSignUploadService:access$4	(Lcom/adobe/reader/AREchoSignUploadService;)Ljava/lang/String;
      //   300: invokestatic 273	android/net/Uri:parse	(Ljava/lang/String;)Landroid/net/Uri;
      //   303: invokevirtual 277	android/net/Uri:getLastPathSegment	()Ljava/lang/String;
      //   306: invokevirtual 281	java/lang/String:replaceAll	(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      //   309: astore_1
      //   310: goto -177 -> 133
      //   313: aload_0
      //   314: getfield 46	com/adobe/reader/AREchoSignUploadService$UploadTask:this$0	Lcom/adobe/reader/AREchoSignUploadService;
      //   317: invokestatic 163	com/adobe/reader/AREchoSignUploadService:access$3	(Lcom/adobe/reader/AREchoSignUploadService;)Landroid/app/Service;
      //   320: ldc_w 282
      //   323: invokevirtual 212	android/app/Service:getString	(I)Ljava/lang/String;
      //   326: astore_1
      //   327: goto -194 -> 133
      //   330: aload_0
      //   331: getfield 46	com/adobe/reader/AREchoSignUploadService$UploadTask:this$0	Lcom/adobe/reader/AREchoSignUploadService;
      //   334: invokestatic 163	com/adobe/reader/AREchoSignUploadService:access$3	(Lcom/adobe/reader/AREchoSignUploadService;)Landroid/app/Service;
      //   337: ldc -48
      //   339: invokevirtual 212	android/app/Service:getString	(I)Ljava/lang/String;
      //   342: astore_1
      //   343: goto -210 -> 133
      //   346: aload_0
      //   347: invokevirtual 285	java/lang/Object:wait	()V
      //   350: goto -101 -> 249
      //   353: astore_1
      //   354: goto -105 -> 249
      //   357: astore_1
      //   358: aload_0
      //   359: monitorexit
      //   360: aload_1
      //   361: athrow
      // Local variable table:
      //   start	length	slot	name	signature
      //   0	362	0	this	UploadTask
      //   0	362	1	paramVarArgs	Void[]
      //   88	153	2	localNotificationManager	android.app.NotificationManager
      //   145	89	3	str	String
      //   159	77	4	localObject	Object
      //   212	31	5	localNotification	android.app.Notification
      // Exception table:
      //   from	to	target	type
      //   30	54	260	java/io/IOException
      //   346	350	353	java/lang/InterruptedException
      //   249	258	357	finally
      //   346	350	357	finally
      //   358	360	357	finally
    }
    
    protected String escapeForXML(String paramString)
    {
      paramString.replaceAll("&", "&amp;").replaceAll("<", "&lt;").replaceAll(">", "&gt;").replaceAll("\"", "&quot;").replaceAll("'", "&apos;");
      return paramString;
    }
    
    protected Pair<String, String> getSOAPEnvelopePrefixAndPostfix()
      throws IOException, UnsupportedEncodingException
    {
      String str1 = "";
      InputStream localInputStream = AREchoSignUploadService.this.getResources().openRawResource(2131034116);
      BufferedReader localBufferedReader = new BufferedReader(new InputStreamReader(localInputStream, "UTF-8"));
      int i;
      for (;;)
      {
        String str2 = localBufferedReader.readLine();
        if (str2 == null)
        {
          localInputStream.close();
          localBufferedReader.close();
          str1 = str1.replace("%2", escapeForXML(AREchoSignUploadService.this.mPDFFile.getName()));
          i = str1.indexOf("%1");
          if (i != -1) {
            break;
          }
          throw new IOException();
        }
        str1 = str1 + str2;
      }
      return new Pair(str1.substring(0, i), str1.substring(i + 2, str1.length()));
    }
    
    protected void onCancelled()
    {
      if (this.mHttppost != null) {
        this.mHttppost.abort();
      }
      deleteTempFile();
    }
    
    protected void onPostExecute(Void paramVoid)
    {
      deleteTempFile();
      LocalBroadcastManager.getInstance(this.mServiceContext).unregisterReceiver(this.broadcastReceiver_stop);
      LocalBroadcastManager.getInstance(this.mServiceContext).unregisterReceiver(this.broadcastReceiver_restart);
      paramVoid = new Intent("com.adobe.adobereader.AREchoSignUploadService.complete");
      paramVoid.putExtra("Result", this.mResult);
      if (this.mResult == 0) {
        paramVoid.putExtra("URL", this.mResponse);
      }
      LocalBroadcastManager.getInstance(this.mServiceContext).sendBroadcast(paramVoid);
    }
    
    protected void onPreExecute()
    {
      this.mResult = 0;
      LocalBroadcastManager.getInstance(this.mServiceContext).registerReceiver(this.broadcastReceiver_stop, new IntentFilter("com.adobe.adobereader.ARSendForSignature.onStop"));
      LocalBroadcastManager.getInstance(this.mServiceContext).registerReceiver(this.broadcastReceiver_restart, new IntentFilter("com.adobe.adobereader.ARSendForSignature.onRestart"));
    }
    
    protected void onProgressUpdate(Integer... paramVarArgs) {}
    
    protected void upload()
      throws IOException
    {
      DefaultHttpClient localDefaultHttpClient = new DefaultHttpClient();
      Object localObject = localDefaultHttpClient.getParams();
      HttpConnectionParams.setConnectionTimeout((HttpParams)localObject, 10000);
      HttpConnectionParams.setSoTimeout((HttpParams)localObject, 15000);
      HttpProtocolParams.setUseExpectContinue(localDefaultHttpClient.getParams(), true);
      this.mHttppost = new HttpPost("https://secure.echosign.com/services/EchoSignDocumentService11");
      this.mHttppost.setHeader("soapaction", "https://secure.echosign.com/services/initiateInteractiveSendDocument");
      this.mHttppost.setHeader("Content-Type", "text/xml; charset=utf-8");
      localObject = new FileEntity(AREchoSignUploadService.this.mTempFile, "application/xml");
      this.mHttppost.setEntity((HttpEntity)localObject);
      localObject = new ResponseHandler()
      {
        public String handleResponse(HttpResponse paramAnonymousHttpResponse)
          throws ClientProtocolException, IOException
        {
          try
          {
            paramAnonymousHttpResponse = paramAnonymousHttpResponse.getEntity();
            XMLReader localXMLReader = SAXParserFactory.newInstance().newSAXParser().getXMLReader();
            localXMLReader.setContentHandler(new AREchoSignUploadService.UploadTask.EchoSignResponseHandler(AREchoSignUploadService.UploadTask.this));
            localXMLReader.parse(new InputSource(new InputStreamReader(paramAnonymousHttpResponse.getContent(), "UTF-8")));
            return "";
          }
          catch (SAXException paramAnonymousHttpResponse)
          {
            for (;;)
            {
              AREchoSignUploadService.UploadTask.this.mResult = 2;
            }
          }
          catch (ParserConfigurationException paramAnonymousHttpResponse)
          {
            for (;;)
            {
              AREchoSignUploadService.UploadTask.this.mResult = 2;
            }
          }
          catch (Exception paramAnonymousHttpResponse)
          {
            for (;;)
            {
              AREchoSignUploadService.UploadTask.this.mResult = 2;
            }
          }
        }
      };
      localDefaultHttpClient.execute(this.mHttppost, (ResponseHandler)localObject);
      localDefaultHttpClient.getConnectionManager().shutdown();
    }
    
    protected void writeBase64EncodedPDF(FileOutputStream paramFileOutputStream)
      throws IOException
    {
      FileInputStream localFileInputStream = new FileInputStream(AREchoSignUploadService.this.mPDFFile);
      paramFileOutputStream = new Base64OutputStream(paramFileOutputStream, 0);
      int i = localFileInputStream.available();
      if (i == 0) {
        throw new IOException();
      }
      byte[] arrayOfByte = new byte[524288];
      int j;
      do
      {
        j = Math.min(524288, i);
        paramFileOutputStream.write(arrayOfByte, 0, localFileInputStream.read(arrayOfByte, 0, j));
        j = i - j;
        i = j;
      } while (j > 0);
      paramFileOutputStream.flush();
    }
    
    public class EchoSignResponseHandler
      extends DefaultHandler
    {
      private static final String sSendDocumentURLElement = "sendDocumentURL";
      private StringBuffer mStringBuffer = null;
      
      public EchoSignResponseHandler() {}
      
      public void characters(char[] paramArrayOfChar, int paramInt1, int paramInt2)
      {
        if (this.mStringBuffer != null) {
          this.mStringBuffer.append(paramArrayOfChar, paramInt1, paramInt2);
        }
      }
      
      public void endDocument()
        throws SAXException
      {
        if (AREchoSignUploadService.UploadTask.this.mResponse == null) {
          AREchoSignUploadService.UploadTask.this.mResult = 2;
        }
      }
      
      public void endElement(String paramString1, String paramString2, String paramString3)
        throws SAXException
      {
        if (paramString2.equals("sendDocumentURL"))
        {
          AREchoSignUploadService.UploadTask.this.mResponse = this.mStringBuffer.toString();
          this.mStringBuffer = null;
        }
      }
      
      public void startDocument()
        throws SAXException
      {
        AREchoSignUploadService.UploadTask.this.mResponse = null;
      }
      
      public void startElement(String paramString1, String paramString2, String paramString3, Attributes paramAttributes)
        throws SAXException
      {
        if (paramString2.equals("sendDocumentURL")) {
          this.mStringBuffer = new StringBuffer("");
        }
      }
    }
  }
}
