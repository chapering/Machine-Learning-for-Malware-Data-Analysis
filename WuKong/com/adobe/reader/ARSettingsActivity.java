package com.adobe.reader;

import android.app.Application;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.OnSharedPreferenceChangeListener;
import android.content.res.Resources;
import android.os.Bundle;
import android.preference.CheckBoxPreference;
import android.preference.EditTextPreference;
import android.preference.PreferenceActivity;
import android.preference.PreferenceCategory;
import android.preference.PreferenceManager;
import android.preference.PreferenceScreen;
import com.adobe.reader.cloud.network.BlueHeronAPI;
import com.adobe.reader.cloud.network.CloudNetworkManager;
import com.adobe.reader.cloud.ui.CloudUIHandler;

public class ARSettingsActivity
  extends PreferenceActivity
  implements SharedPreferences.OnSharedPreferenceChangeListener
{
  static final String DISPLAY_ON_KEY = "displayOnKey";
  private final String P_OPTIN_KEY = "optInKey";
  private ARAnalytics mARAnalytics = null;
  private EditTextPreference mAuthorNamePreference;
  private CheckBoxPreference mCloudMasterUriPreference;
  private CheckBoxPreference mDisplayAlwaysOn;
  private CheckBoxPreference mOptInPreference;
  
  public ARSettingsActivity() {}
  
  private PreferenceScreen createPreferenceHierarchy()
  {
    boolean bool = true;
    PreferenceScreen localPreferenceScreen = getPreferenceManager().createPreferenceScreen(this);
    Resources localResources = getApplicationContext().getResources();
    PreferenceCategory localPreferenceCategory = new PreferenceCategory(this);
    localPreferenceCategory.setTitle(localResources.getString(2131361830));
    localPreferenceScreen.addPreference(localPreferenceCategory);
    this.mAuthorNamePreference = new EditTextPreference(this);
    this.mAuthorNamePreference.setDialogTitle(localResources.getString(2131362042));
    this.mAuthorNamePreference.setKey("commentAuthorName");
    this.mAuthorNamePreference.setTitle(localResources.getString(2131362042));
    setupAuthorNameSummary(getApplicationContext().getSharedPreferences("com.adobe.reader.preferences", 0));
    localPreferenceCategory.addPreference(this.mAuthorNamePreference);
    this.mARAnalytics = new ARAnalytics(this, true);
    this.mOptInPreference = new CheckBoxPreference(this);
    this.mOptInPreference.setKey("optInKey");
    CheckBoxPreference localCheckBoxPreference = this.mOptInPreference;
    int i = this.mARAnalytics.readOptInLocal();
    this.mARAnalytics.getClass();
    if (i == 1) {}
    for (;;)
    {
      localCheckBoxPreference.setChecked(bool);
      this.mOptInPreference.setTitle(localResources.getString(2131362190));
      this.mOptInPreference.setSummary(localResources.getString(2131362191));
      localPreferenceCategory.addPreference(this.mOptInPreference);
      this.mDisplayAlwaysOn = new CheckBoxPreference(this);
      this.mDisplayAlwaysOn.setKey("displayOnKey");
      this.mDisplayAlwaysOn.setTitle(localResources.getString(2131362192));
      this.mDisplayAlwaysOn.setSummary(localResources.getString(2131362193));
      localPreferenceCategory.addPreference(this.mDisplayAlwaysOn);
      return localPreferenceScreen;
      bool = false;
    }
  }
  
  private void handleCloudMasterUriChange()
  {
    BlueHeronAPI.invalidateBaseURI();
    CloudNetworkManager.removeCloudAccount();
    CloudUIHandler.resetAccountGlobalState();
  }
  
  private void setupAuthorNameSummary(SharedPreferences paramSharedPreferences)
  {
    paramSharedPreferences = paramSharedPreferences.getString("commentAuthorName", null);
    String str = getApplicationContext().getResources().getString(2131362041);
    if ((paramSharedPreferences == null) || (paramSharedPreferences.equals(str)))
    {
      this.mAuthorNamePreference.setSummary(getApplication().getResources().getString(2131362043));
      return;
    }
    this.mAuthorNamePreference.setSummary(paramSharedPreferences);
  }
  
  private void updateOptIn(SharedPreferences paramSharedPreferences)
  {
    int j = 1;
    boolean bool = paramSharedPreferences.getBoolean("optInKey", false);
    paramSharedPreferences = this.mARAnalytics;
    if (bool)
    {
      this.mARAnalytics.getClass();
      i = 1;
      paramSharedPreferences.updateOptInFromSettings(i);
      if (ARViewer.getCurrentActivity() != null)
      {
        paramSharedPreferences = ARViewer.getCurrentActivity().getARAnalytics();
        if (paramSharedPreferences != null)
        {
          if (!bool) {
            break label89;
          }
          this.mARAnalytics.getClass();
        }
      }
    }
    for (int i = j;; i = 0)
    {
      paramSharedPreferences.updateTrackerOptIn(i);
      return;
      this.mARAnalytics.getClass();
      i = 0;
      break;
      label89:
      this.mARAnalytics.getClass();
    }
  }
  
  protected void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    paramBundle = getPreferenceManager();
    paramBundle.setSharedPreferencesName("com.adobe.reader.preferences");
    paramBundle.setSharedPreferencesMode(0);
    setPreferenceScreen(createPreferenceHierarchy());
    getPreferenceScreen().getSharedPreferences().registerOnSharedPreferenceChangeListener(this);
  }
  
  protected void onDestroy()
  {
    getPreferenceScreen().getSharedPreferences().unregisterOnSharedPreferenceChangeListener(this);
    this.mARAnalytics = null;
    super.onDestroy();
  }
  
  public void onSharedPreferenceChanged(SharedPreferences paramSharedPreferences, String paramString)
  {
    if ((paramString != null) && (paramString.equals("commentAuthorName"))) {
      setupAuthorNameSummary(paramSharedPreferences);
    }
    if ((paramString != null) && (paramString.equals("optInKey"))) {
      updateOptIn(paramSharedPreferences);
    }
    if ((paramString != null) && (paramString.equals("MasterUriKey"))) {
      handleCloudMasterUriChange();
    }
  }
}
