package com.adobe.reader;

import android.view.MotionEvent;
import android.widget.Toast;

public class ARPageViewGestureHandler
  implements ARGestureHandler
{
  private boolean mDoNotShowUIElemsOnTap = false;
  private float mMouseDownX;
  private float mMouseDownY;
  private PageView mPageView;
  
  public ARPageViewGestureHandler(PageView paramPageView)
  {
    this.mPageView = paramPageView;
  }
  
  private boolean ignoreFling()
  {
    if ((this.mPageView.areGesturesOnPageBlocked()) || (this.mPageView.isDoubleTapAnimRunning())) {}
    Object localObject;
    do
    {
      return true;
      localObject = this.mPageView.getDocViewManager().getCommentManager();
      if (localObject == null) {
        break;
      }
      localObject = ((ARCommentManager)localObject).getTextMarkupHandler();
    } while ((localObject != null) && (((PARTextMarkupCommentUIHandlerAndroid)localObject).isInTextMarkupDrawMode()));
    return false;
  }
  
  public long getLastPinchGestureTime()
  {
    return this.mPageView.getLastPinchGestureTime();
  }
  
  public boolean handleDoubleTap(float paramFloat1, float paramFloat2)
  {
    if (this.mPageView.areGesturesOnPageBlocked()) {
      return true;
    }
    this.mPageView.handleDoubleTap(paramFloat1, paramFloat2);
    return false;
  }
  
  public void handleDown(float paramFloat1, float paramFloat2)
  {
    Object localObject = (ARViewer)this.mPageView.getContext();
    ((ARViewer)localObject).hideBookmarks();
    localObject = (CommentingToolbar)((ARViewer)localObject).getToolbar().findViewById(2131493133);
    if (localObject != null)
    {
      localObject = ((CommentingToolbar)localObject).getInstructionToast();
      if (localObject != null) {
        ((Toast)localObject).cancel();
      }
    }
    if (this.mPageView.isScrolling()) {
      this.mDoNotShowUIElemsOnTap = true;
    }
    if (this.mPageView.areGesturesOnPageBlocked()) {
      return;
    }
    this.mMouseDownX = paramFloat1;
    this.mMouseDownY = paramFloat2;
    this.mPageView.notifyGestureInitiated();
  }
  
  public boolean handleFling(float paramFloat1, float paramFloat2)
  {
    if (ignoreFling()) {
      return true;
    }
    this.mPageView.notifyPanStateToChildViews(false);
    this.mPageView.handleFling(paramFloat1, paramFloat2);
    ARViewer localARViewer = (ARViewer)this.mPageView.getContext();
    localARViewer.hideTopAndBottomBar();
    localARViewer.resetTimerHandlerForUIElems();
    return true;
  }
  
  public boolean handleLeftFling()
  {
    if (ignoreFling()) {
      return true;
    }
    return this.mPageView.handleLeftFling();
  }
  
  public void handleLongPress(MotionEvent paramMotionEvent)
  {
    if (this.mPageView.areGesturesOnPageBlocked()) {}
    int i;
    float f1;
    float f2;
    do
    {
      return;
      i = paramMotionEvent.getAction();
      f1 = paramMotionEvent.getX();
      f2 = paramMotionEvent.getY();
      if (i == 0)
      {
        this.mPageView.handleLongPressBegin(f1, f2);
        return;
      }
      if (i == 2)
      {
        this.mPageView.handleLongPressMove(f1, f2);
        return;
      }
      if (i == 1)
      {
        this.mPageView.handleLongPressEnd(f1, f2);
        return;
      }
    } while (i != 3);
    this.mPageView.handleLongPressCancel(f1, f2);
  }
  
  public boolean handleRightFling()
  {
    if (ignoreFling()) {
      return true;
    }
    return this.mPageView.handleRightFling();
  }
  
  public boolean handleScroll(MotionEvent paramMotionEvent1, MotionEvent paramMotionEvent2)
  {
    Object localObject = this.mPageView.getDocViewManager();
    if (localObject == null) {
      return true;
    }
    localObject = ((ARDocViewManager)localObject).getCommentManager();
    if (localObject != null)
    {
      localObject = ((ARCommentManager)localObject).getTextMarkupHandler();
      if ((localObject != null) && (((PARTextMarkupCommentUIHandlerAndroid)localObject).isInTextMarkupDrawMode()))
      {
        if (!this.mPageView.isDraggingInAnnotDrawMode()) {
          this.mPageView.handleDragBegin(paramMotionEvent1.getX(), paramMotionEvent1.getY());
        }
        for (;;)
        {
          return true;
          this.mPageView.handleDragMove(paramMotionEvent2.getX(), paramMotionEvent2.getY());
        }
      }
    }
    if ((this.mPageView.areGesturesOnPageBlocked()) || (this.mPageView.isDoubleTapAnimRunning())) {
      return true;
    }
    float f1 = paramMotionEvent2.getX();
    float f2 = paramMotionEvent2.getY();
    int i = (int)(this.mMouseDownX - f1);
    int j = (int)(this.mMouseDownY - f2);
    this.mPageView.notifyGestureInitiated();
    if (this.mPageView.handleScroll(i, j))
    {
      this.mMouseDownX = f1;
      this.mMouseDownY = f2;
      paramMotionEvent1 = (ARViewer)this.mPageView.getContext();
      paramMotionEvent1.hideTopAndBottomBar();
      paramMotionEvent1.resetTimerHandlerForUIElems();
      return true;
    }
    return false;
  }
  
  public boolean handleTapForDocument(float paramFloat1, float paramFloat2)
  {
    Object localObject = this.mPageView.getDocViewManager();
    if (localObject == null) {}
    do
    {
      do
      {
        do
        {
          return true;
          localObject = ((ARDocViewManager)localObject).getCommentManager();
        } while (localObject == null);
        if (!this.mPageView.areGesturesOnPageBlocked()) {
          break;
        }
        localObject = ((ARCommentManager)localObject).getStickyNoteHandler();
      } while ((localObject != null) && (!((PARStickyNoteCommentUIHandlerAndroid)localObject).isTapAllowedOnBackground()));
    } while (this.mPageView.exitDocContextMenuMode());
    return this.mPageView.handleSingleTap(paramFloat1, paramFloat2);
  }
  
  public boolean handleTapForView(ARGestureHandler.TapZone paramTapZone)
  {
    if (this.mPageView.areGesturesOnPageBlocked()) {
      return true;
    }
    boolean bool;
    if ((paramTapZone == ARGestureHandler.TapZone.kTapLeftZone) && (this.mPageView.getViewMode() == 2))
    {
      this.mPageView.gotoPrevPage();
      bool = true;
    }
    for (;;)
    {
      if ((bool) || (this.mDoNotShowUIElemsOnTap))
      {
        this.mDoNotShowUIElemsOnTap = false;
        return true;
        if ((paramTapZone == ARGestureHandler.TapZone.kTapRightZone) && (this.mPageView.getViewMode() == 2))
        {
          this.mPageView.gotoNextPage();
          bool = true;
        }
      }
      else
      {
        ((ARViewer)this.mPageView.getContext()).showOrHideUIElemsForTap();
        return bool;
      }
      bool = false;
    }
  }
}
