package com.adobe.reader;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Color;
import android.graphics.PointF;
import android.graphics.Rect;
import android.text.ClipboardManager;
import android.util.DisplayMetrics;
import android.widget.Toast;

class PARTextSelectorAndroid
{
  static final int HIGHLIGHT_ANNOT = 1;
  static final int STRIKEOUT_ANNOT = 2;
  static final int UNDERLINE_ANNOT = 3;
  private int mContextMenuMargin = 25;
  private PARUITextGrabberHandle mEndGrabberHandle;
  private boolean mIsCopyOperationPermitted = true;
  private boolean mIsTextMarkupCreationPermitted = true;
  private boolean mIsTextSelectionActive;
  private long mNativeTextSelector;
  private int mPageNum;
  private PageView mPageView;
  private PARUITextGrabberHandle mStartGrabberHandle;
  private TextSelectionMenu mTextSelectorCtxMenu = null;
  
  public PARTextSelectorAndroid(PageView paramPageView, long paramLong)
  {
    this.mNativeTextSelector = create(paramLong);
    register(this.mNativeTextSelector);
    this.mPageView = paramPageView;
    this.mIsCopyOperationPermitted = isCopyOperationPermitted(this.mNativeTextSelector);
    this.mIsTextMarkupCreationPermitted = isTextMarkupCreationPermitted(this.mNativeTextSelector);
    this.mContextMenuMargin = ((int)(this.mPageView.getContext().getResources().getDisplayMetrics().density * this.mContextMenuMargin + 0.5F));
  }
  
  private native void copyText(long paramLong);
  
  private native long create(long paramLong);
  
  private void createHandle(int paramInt, boolean paramBoolean)
  {
    PARUITextGrabberHandle localPARUITextGrabberHandle = new PARUITextGrabberHandle(this.mPageView.getContext());
    localPARUITextGrabberHandle.setTextSelectorAndroid(this);
    localPARUITextGrabberHandle.setPageView(this.mPageView);
    localPARUITextGrabberHandle.setIsStartGrabber(paramBoolean);
    localPARUITextGrabberHandle.setPageNum(paramInt);
    if (paramBoolean) {
      this.mStartGrabberHandle = localPARUITextGrabberHandle;
    }
    for (;;)
    {
      this.mPageView.addViewAtLocation(localPARUITextGrabberHandle, 0, 0, 0, 0);
      return;
      this.mEndGrabberHandle = localPARUITextGrabberHandle;
    }
  }
  
  private native void createTextMarkupComment(long paramLong, int paramInt1, int paramInt2);
  
  private native void getHandleNextPosition(long paramLong, double paramDouble1, double paramDouble2, int paramInt, boolean paramBoolean);
  
  private native void getHighlightBounds(long paramLong, int[] paramArrayOfInt);
  
  private native boolean isCopyOperationPermitted(long paramLong);
  
  private native boolean isTextMarkupCreationPermitted(long paramLong);
  
  private native void register(long paramLong);
  
  private native void removeHandlesAndClearSelection(long paramLong);
  
  public void copyTextToClipBoard()
  {
    if (!this.mIsCopyOperationPermitted)
    {
      String str = this.mPageView.getContext().getResources().getString(2131361868);
      Toast.makeText(this.mPageView.getContext(), str, 0).show();
      removeHandlesAndClearSelection();
      return;
    }
    copyText(this.mNativeTextSelector);
  }
  
  public void createTextMarkupComment(int paramInt)
  {
    createTextMarkupComment(this.mNativeTextSelector, paramInt, this.mPageNum);
  }
  
  public void createTextSelectorHandles(int paramInt)
  {
    createHandle(paramInt, true);
    createHandle(paramInt, false);
    this.mPageNum = paramInt;
    if (this.mTextSelectorCtxMenu == null)
    {
      this.mTextSelectorCtxMenu = new TextSelectionMenu(this, this.mPageView);
      this.mTextSelectorCtxMenu.setFocusable(false);
    }
    this.mIsTextSelectionActive = true;
  }
  
  public void drawContextualMenu()
  {
    drawContextualMenu(this.mPageNum);
  }
  
  public void drawContextualMenu(int paramInt)
  {
    Object localObject2 = this.mStartGrabberHandle.getGrabberPoints();
    Object localObject1 = this.mEndGrabberHandle.getGrabberPoints();
    if ((localObject2 == null) || (localObject1 == null)) {
      return;
    }
    localObject2 = this.mPageView.getDocViewManager().convertPointFromDocumentSpaceToDeviceSpace(localObject2[0], localObject2[1], paramInt);
    localObject1 = this.mPageView.getDocViewManager().convertPointFromDocumentSpaceToDeviceSpace(localObject1[2], localObject1[3], paramInt);
    int i = this.mPageView.getScrollX();
    int j = this.mPageView.getScrollY();
    float f;
    if (i > 0)
    {
      ((PointF)localObject2).x += i;
      f = ((PointF)localObject1).x;
      ((PointF)localObject1).x = (i + f);
    }
    if (j > 0)
    {
      ((PointF)localObject2).y += j;
      ((PointF)localObject1).y += j;
    }
    if (((PointF)localObject2).x > ((PointF)localObject1).x)
    {
      f = ((PointF)localObject1).x;
      ((PointF)localObject1).x = ((PointF)localObject2).x;
      ((PointF)localObject2).x = f;
    }
    if (((PointF)localObject2).y > ((PointF)localObject1).y)
    {
      f = ((PointF)localObject1).y;
      ((PointF)localObject1).y = ((PointF)localObject2).y;
      ((PointF)localObject2).y = f;
    }
    ((PointF)localObject2).x -= this.mContextMenuMargin;
    ((PointF)localObject2).y -= this.mContextMenuMargin;
    ((PointF)localObject1).x += this.mContextMenuMargin;
    ((PointF)localObject1).y += this.mContextMenuMargin;
    localObject2 = this.mPageView.getDocViewManager().convertPointFromScrollSpaceToDocumentSpace((int)((PointF)localObject2).x, (int)((PointF)localObject2).y, this.mPageView.getDocViewManager().getPageAtOffset((int)((PointF)localObject2).y));
    localObject1 = this.mPageView.getDocViewManager().convertPointFromScrollSpaceToDocumentSpace((int)((PointF)localObject1).x, (int)((PointF)localObject1).y, this.mPageView.getDocViewManager().getPageAtOffset((int)((PointF)localObject1).y));
    this.mTextSelectorCtxMenu.showAtDocLocation(new Rect((int)((PointF)localObject2).x, (int)((PointF)localObject2).y, (int)((PointF)localObject1).x, (int)((PointF)localObject1).y), paramInt);
  }
  
  public String getAuthorName()
  {
    return this.mPageView.getDocViewManager().getCommentManager().getAuthorNameFromPreferences();
  }
  
  public float[] getDefaultColorAndOpacity(int paramInt)
  {
    float f;
    switch (paramInt)
    {
    default: 
      return null;
    case 1: 
      paramInt = this.mPageView.getDocViewManager().getCommentManager().getAnnotColorFromPreferences(2);
      f = this.mPageView.getDocViewManager().getCommentManager().getAnnotOpacityFromPreferences(2);
    }
    for (;;)
    {
      return new float[] { (float)(Color.red(paramInt) / 255.0D), (float)(Color.green(paramInt) / 255.0D), (float)(Color.blue(paramInt) / 255.0D), f };
      paramInt = this.mPageView.getDocViewManager().getCommentManager().getAnnotColorFromPreferences(3);
      f = this.mPageView.getDocViewManager().getCommentManager().getAnnotOpacityFromPreferences(3);
      continue;
      paramInt = this.mPageView.getDocViewManager().getCommentManager().getAnnotColorFromPreferences(4);
      f = this.mPageView.getDocViewManager().getCommentManager().getAnnotOpacityFromPreferences(4);
    }
  }
  
  public void getHandlesNextPosition(double paramDouble1, double paramDouble2, boolean paramBoolean, int paramInt)
  {
    getHandleNextPosition(this.mNativeTextSelector, paramDouble1, paramDouble2, paramInt, paramBoolean);
  }
  
  public int[] getHighlightBounds()
  {
    int[] arrayOfInt = new int[4];
    getHighlightBounds(this.mNativeTextSelector, arrayOfInt);
    return arrayOfInt;
  }
  
  public boolean isTextMarkupCreationPermitted()
  {
    return this.mIsTextMarkupCreationPermitted;
  }
  
  public boolean isTextSelectionActive()
  {
    return this.mIsTextSelectionActive;
  }
  
  public void releaseTextSelectorHandles()
  {
    if ((this.mTextSelectorCtxMenu != null) && (this.mTextSelectorCtxMenu.isShowing())) {
      this.mTextSelectorCtxMenu.dismiss();
    }
    this.mPageView.removeView(this.mStartGrabberHandle);
    this.mPageView.removeView(this.mEndGrabberHandle);
    this.mIsTextSelectionActive = false;
  }
  
  public void removeHandlesAndClearSelection()
  {
    if ((this.mTextSelectorCtxMenu != null) && (this.mTextSelectorCtxMenu.isShowing())) {
      this.mTextSelectorCtxMenu.dismiss();
    }
    removeHandlesAndClearSelection(this.mNativeTextSelector);
  }
  
  public void setGrabberPosition(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4, boolean paramBoolean)
  {
    double[] arrayOfDouble = new double[4];
    arrayOfDouble[0] = paramDouble1;
    arrayOfDouble[1] = paramDouble2;
    arrayOfDouble[2] = paramDouble3;
    arrayOfDouble[3] = paramDouble4;
    if (paramBoolean)
    {
      this.mStartGrabberHandle.setGrabberDocLocation(arrayOfDouble);
      return;
    }
    this.mEndGrabberHandle.setGrabberDocLocation(arrayOfDouble);
  }
  
  public void setTextOnClipboard(String paramString)
  {
    ((ClipboardManager)this.mPageView.getContext().getSystemService("clipboard")).setText(paramString);
  }
}
