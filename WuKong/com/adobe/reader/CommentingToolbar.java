package com.adobe.reader;

import android.content.Context;
import android.content.SharedPreferences;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.view.OrientationEventListener;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

public class CommentingToolbar
  extends LinearLayout
  implements View.OnClickListener
{
  private static int NO_ACTIVE_TOOL = -1;
  private ARViewer mARContext = (ARViewer)getContext();
  private int mActiveTool = NO_ACTIVE_TOOL;
  private Toast mInstructionToast = new Toast(getContext().getApplicationContext());
  private OrientationEventListener mOrientationListener = new OrientationEventListener(getContext())
  {
    public void onOrientationChanged(int paramAnonymousInt)
    {
      CommentingToolbar.this.setCommentingToolbarUI(true);
    }
  };
  private ToolbarButtonDrawable mPressedDrawable;
  
  public CommentingToolbar(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    this.mOrientationListener.enable();
  }
  
  private void displayToast(String paramString)
  {
    View localView = ((LayoutInflater)this.mARContext.getSystemService("layout_inflater")).inflate(2130903085, (ViewGroup)findViewById(2131493131));
    ((TextView)localView.findViewById(2131493132)).setText(paramString);
    this.mInstructionToast.setGravity(16, 0, 0);
    this.mInstructionToast.setDuration(1);
    this.mInstructionToast.setView(localView);
    this.mInstructionToast.show();
  }
  
  private void handleInstructionToast(String paramString1, String paramString2)
  {
    SharedPreferences localSharedPreferences = this.mARContext.getSharedPreferences("com.adobe.reader.preferences", 0);
    int i = localSharedPreferences.getInt(paramString1, 0);
    if (i <= 3) {
      displayToast(paramString2);
    }
    paramString2 = new ARPrefsEditor(localSharedPreferences);
    i += 1;
    paramString2.putInt(paramString1, i);
    paramString2.apply();
    if (i > 3) {
      this.mInstructionToast.cancel();
    }
  }
  
  private void setCommentingToolButtonUI(int paramInt1, int paramInt2, int paramInt3, int paramInt4, boolean paramBoolean)
  {
    ImageButton localImageButton = (ImageButton)findViewById(paramInt1);
    localImageButton.setOnClickListener(this);
    ViewGroup.LayoutParams localLayoutParams = localImageButton.getLayoutParams();
    localLayoutParams.width = paramInt4;
    localImageButton.setLayoutParams(localLayoutParams);
    if (!paramBoolean) {
      localImageButton.setBackgroundDrawable(new ToolbarButtonDrawable(localImageButton, paramInt2, paramInt3));
    }
  }
  
  private void setCommentingToolbarUI(boolean paramBoolean)
  {
    int i = this.mARContext.getScreenWidth() / ((LinearLayout)findViewById(2131493134)).getChildCount();
    setCommentingToolButtonUI(2131493143, 2130837595, 2130837595, i, paramBoolean);
    setCommentingToolButtonUI(2131493135, 2130837606, 2130837607, i, paramBoolean);
    setCommentingToolButtonUI(2131493136, 2130837708, 2130837709, i, paramBoolean);
    setCommentingToolButtonUI(2131493137, 2130837828, 2130837829, i, paramBoolean);
    setCommentingToolButtonUI(2131493138, 2130837832, 2130837833, i, paramBoolean);
    setCommentingToolButtonUI(2131493139, 2130837563, 2130837564, i, paramBoolean);
    setCommentingToolButtonUI(2131493140, 2130837623, 2130837624, i, paramBoolean);
    setCommentingToolButtonUI(2131493141, 2130837818, 2130837819, i, paramBoolean);
  }
  
  public void closeToolbar()
  {
    this.mOrientationListener.disable();
    this.mARContext.popBackButtonHandler();
    this.mARContext.getToolbar().popView();
    this.mActiveTool = NO_ACTIVE_TOOL;
    this.mARContext.showBottomBar();
    this.mARContext.unlockToolbar();
  }
  
  public int getActiveTool()
  {
    return this.mActiveTool;
  }
  
  public Toast getInstructionToast()
  {
    return this.mInstructionToast;
  }
  
  public boolean isToolAlreadySelected()
  {
    if (this.mPressedDrawable != null) {
      return this.mPressedDrawable.getPressed();
    }
    return false;
  }
  
  public void onClick(View paramView)
  {
    if (!this.mARContext.isToolbarTopView(this)) {}
    ARCommentManager localARCommentManager;
    label70:
    label206:
    label228:
    do
    {
      boolean bool;
      do
      {
        return;
        ARDocViewManager localARDocViewManager = this.mARContext.getPageView().getDocViewManager();
        localARCommentManager = localARDocViewManager.getCommentManager();
        this.mPressedDrawable = ((ToolbarButtonDrawable)paramView.getBackground());
        bool = isToolAlreadySelected();
        resetSelectedState();
        int i = paramView.getId();
        if (!bool)
        {
          this.mActiveTool = i;
          localARDocViewManager.exitActiveHandlers();
          if ((i != 2131493143) && (this.mActiveTool != NO_ACTIVE_TOOL)) {
            break label206;
          }
          this.mARContext.enableClickOnPageNumberIndicator();
        }
        for (;;)
        {
          switch (i)
          {
          case 2131493142: 
          default: 
            return;
          case 2131493135: 
            if (bool) {
              break label228;
            }
            handleInstructionToast("stickyNoteHitCount", this.mARContext.getString(2131361869));
            localARCommentManager.notifyToolSelected(0);
            this.mPressedDrawable.setPressed(true);
            this.mARContext.hideBottomBar();
            return;
            this.mActiveTool = NO_ACTIVE_TOOL;
            this.mARContext.showBottomBar();
            break label70;
            this.mARContext.disableClickOnPageNumberIndicator();
          }
        }
        this.mInstructionToast.cancel();
        closeToolbar();
        return;
        this.mInstructionToast.cancel();
        return;
        if (!bool)
        {
          handleInstructionToast("highlightHitCount", this.mARContext.getString(2131361870));
          localARCommentManager.notifyToolSelected(2);
          this.mPressedDrawable.setPressed(true);
          this.mARContext.hideBottomBar();
          return;
        }
        this.mInstructionToast.cancel();
        return;
        if (!bool)
        {
          handleInstructionToast("strikeoutHitCount", this.mARContext.getString(2131361871));
          localARCommentManager.notifyToolSelected(3);
          this.mPressedDrawable.setPressed(true);
          this.mARContext.hideBottomBar();
          return;
        }
        this.mInstructionToast.cancel();
        return;
        if (!bool)
        {
          handleInstructionToast("underlineHitCount", this.mARContext.getString(2131361872));
          localARCommentManager.notifyToolSelected(4);
          this.mPressedDrawable.setPressed(true);
          this.mARContext.hideBottomBar();
          return;
        }
        this.mInstructionToast.cancel();
        return;
        if (!bool)
        {
          handleInstructionToast("addTextHitCount", this.mARContext.getString(2131361873));
          localARCommentManager.notifyToolSelected(5);
          this.mPressedDrawable.setPressed(true);
          this.mARContext.hideBottomBar();
          return;
        }
        this.mInstructionToast.cancel();
        return;
        paramView = localARCommentManager.getInkCommentHandler();
        if (bool) {
          break;
        }
        handleInstructionToast("pencilHitCount", this.mARContext.getString(2131361874));
      } while ((!localARCommentManager.notifyToolSelected(6)) || (!paramView.setInkToolMode(1)));
      paramView.enterFreeFormDrawingMode();
      this.mPressedDrawable.setPressed(true);
      return;
      this.mInstructionToast.cancel();
      paramView.clearUI();
      return;
      if (bool) {
        break;
      }
      handleInstructionToast("inkSignHitCount", this.mARContext.getString(2131361875));
      paramView = localARCommentManager.getInkCommentHandler();
    } while ((!localARCommentManager.notifyToolSelected(6)) || (!paramView.setInkToolMode(2)));
    this.mPressedDrawable.setPressed(true);
    return;
    this.mInstructionToast.cancel();
  }
  
  protected void onFinishInflate()
  {
    setCommentingToolbarUI(false);
    this.mARContext.pushBackButtonHandler(new ARViewer.BackButtonHandler()
    {
      public void onBackPressed()
      {
        CommentingToolbar localCommentingToolbar = (CommentingToolbar)CommentingToolbar.this.mARContext.getToolbar().findViewById(2131493133);
        if (CommentingToolbar.this.mARContext.isToolbarTopView(localCommentingToolbar))
        {
          if (CommentingToolbar.this.isToolAlreadySelected()) {
            CommentingToolbar.this.resetSelectedState();
          }
        }
        else {
          return;
        }
        CommentingToolbar.this.closeToolbar();
      }
    });
    this.mARContext.getPageView().addOnCloseDocumentListener(new PageView.OnCloseDocumentListener()
    {
      public void onCloseDocument()
      {
        Object localObject = CommentingToolbar.this.mARContext.getToolbar();
        View localView = ((DocumentToolbar)localObject).getChildAt(((DocumentToolbar)localObject).getChildCount() - 1);
        if ((localView instanceof PencilToolbar))
        {
          ((PencilToolbar)localView).commit();
          ((DocumentToolbar)localObject).popView();
        }
        localObject = (CommentingToolbar)CommentingToolbar.this.mARContext.getToolbar().findViewById(2131493133);
        if (CommentingToolbar.this.mARContext.isToolbarTopView(localObject)) {
          CommentingToolbar.this.closeToolbar();
        }
      }
    });
  }
  
  protected void onVisibilityChanged(View paramView, int paramInt) {}
  
  public void resetSelectedState()
  {
    if (this.mActiveTool == NO_ACTIVE_TOOL) {
      return;
    }
    this.mARContext.showUIElems();
    this.mARContext.lockToolbar();
    this.mARContext.enableClickOnPageNumberIndicator();
    ARCommentManager localARCommentManager = this.mARContext.getPageView().getDocViewManager().getCommentManager();
    ((ToolbarButtonDrawable)findViewById(this.mActiveTool).getBackground()).setPressed(false);
    switch (this.mActiveTool)
    {
    }
    for (;;)
    {
      this.mActiveTool = NO_ACTIVE_TOOL;
      return;
      if (localARCommentManager != null)
      {
        localARCommentManager.notifyToolDeselected();
        continue;
        if (localARCommentManager != null)
        {
          localARCommentManager.notifyToolDeselected();
          continue;
          if (localARCommentManager != null)
          {
            localARCommentManager.notifyToolDeselected();
            continue;
            if (localARCommentManager != null)
            {
              localARCommentManager.notifyToolDeselected();
              continue;
              if (localARCommentManager != null)
              {
                localARCommentManager.notifyToolDeselected();
                continue;
                if (localARCommentManager != null)
                {
                  localARCommentManager.notifyToolDeselected();
                  this.mActiveTool = NO_ACTIVE_TOOL;
                  localARCommentManager.getInkCommentHandler().clearUI();
                }
              }
            }
          }
        }
      }
    }
  }
}
