package com.adobe.reader.javascript;

import android.webkit.WebSettings;
import android.webkit.WebSettings.PluginState;
import android.webkit.WebSettings.RenderPriority;
import android.webkit.WebView;
import com.adobe.reader.ARViewer;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

public class ARJavaScript
{
  private static final long JAVASCRIPT_TIMEOUT_IN_SECONDS = 5L;
  private ARViewer mContext;
  private boolean mIsReady;
  private CountDownLatch mJSInitLatch;
  private CountDownLatch mLatch;
  private WebView mWebView;
  
  public ARJavaScript(ARViewer paramARViewer)
  {
    this.mContext = paramARViewer;
    this.mWebView = null;
    this.mIsReady = false;
    this.mLatch = null;
    this.mJSInitLatch = new CountDownLatch(1);
    this.mWebView = new WebView(this.mContext);
    paramARViewer = this.mWebView.getSettings();
    paramARViewer.setJavaScriptEnabled(true);
    paramARViewer.setAllowFileAccess(false);
    paramARViewer.setAppCacheEnabled(false);
    paramARViewer.setAppCacheMaxSize(0L);
    paramARViewer.setAppCachePath(null);
    paramARViewer.setBlockNetworkImage(true);
    paramARViewer.setBlockNetworkLoads(true);
    paramARViewer.setBuiltInZoomControls(false);
    paramARViewer.setCacheMode(2);
    paramARViewer.setDatabaseEnabled(false);
    paramARViewer.setDatabasePath(null);
    paramARViewer.setDomStorageEnabled(false);
    paramARViewer.setGeolocationDatabasePath(null);
    paramARViewer.setGeolocationEnabled(false);
    paramARViewer.setJavaScriptCanOpenWindowsAutomatically(false);
    paramARViewer.setLightTouchEnabled(false);
    paramARViewer.setLoadWithOverviewMode(false);
    paramARViewer.setLoadsImagesAutomatically(false);
    paramARViewer.setNeedInitialFocus(false);
    paramARViewer.setPluginState(WebSettings.PluginState.OFF);
    paramARViewer.setRenderPriority(WebSettings.RenderPriority.NORMAL);
    paramARViewer.setSaveFormData(false);
    paramARViewer.setSavePassword(false);
    paramARViewer.setSupportMultipleWindows(false);
    paramARViewer.setSupportZoom(false);
    paramARViewer.setUseWideViewPort(false);
    this.mWebView.addJavascriptInterface(new ARJavaScriptInterface(this), "_adobereader");
    this.mWebView.addJavascriptInterface(new ARJavaScriptApp(this.mContext), "_app");
    this.mWebView.addJavascriptInterface(new ARJavaScriptDoc(), "_doc");
    this.mWebView.addJavascriptInterface(new ARJavaScriptEScriptString(this.mContext), "_escriptString");
    this.mWebView.addJavascriptInterface(new ARJavaScriptEvent(), "_event");
    this.mWebView.addJavascriptInterface(new ARJavaScriptField(), "_field");
    this.mWebView.addJavascriptInterface(new ARJavaScriptUtil(), "_util");
    this.mWebView.loadUrl("file:///android_asset/javascript/index.html");
    try
    {
      this.mJSInitLatch.await(5L, TimeUnit.SECONDS);
      return;
    }
    catch (InterruptedException paramARViewer) {}
  }
  
  public void exec(String paramString)
  {
    if ((this.mIsReady) && (this.mLatch == null))
    {
      this.mLatch = new CountDownLatch(1);
      paramString = "javascript: try { " + paramString + " } catch (e) { window._adobereader.javaScript_error(e); } window._adobereader.javaScript_finished();";
      this.mWebView.loadUrl(paramString);
    }
    try
    {
      if (this.mLatch != null) {
        this.mLatch.await(5L, TimeUnit.SECONDS);
      }
      this.mLatch = null;
      return;
    }
    catch (InterruptedException paramString)
    {
      for (;;) {}
    }
  }
  
  public void javaScript_Initialized()
  {
    this.mIsReady = true;
    if (this.mJSInitLatch != null) {
      this.mJSInitLatch.countDown();
    }
  }
  
  public void javaScript_error(String paramString)
  {
    if (this.mLatch != null)
    {
      this.mLatch.countDown();
      this.mLatch = null;
    }
  }
  
  public void javaScript_finished()
  {
    if (this.mLatch != null)
    {
      this.mLatch.countDown();
      this.mLatch = null;
    }
  }
}
