package com.adobe.reader;

import android.content.SharedPreferences;
import android.content.res.Resources;
import android.graphics.PointF;
import android.graphics.RectF;
import android.os.Handler;
import android.os.Message;
import android.view.View;
import java.util.ArrayList;

public class PARInkSignatureCommentUIHandlerAndroid
  implements StrokeWidthChangedListener
{
  private static final int DEFAULT_INK_SIGNATURE_STROKE_WIDTH = 3;
  public static final int DISPLAY_BOUNDING_BOX = 1;
  private static final String SAVED_INK_SIGNATURE = "InkSignature";
  private static final String SAVED_INK_SIGNATURE_BOUNDING_BOX = "InkSignatureBoundingBox";
  private static final long SHOW_BOUNDING_BOX_DURATION = 2000L;
  private Handler mBoundingBoxHandler;
  ARViewer mContext;
  PARInkCommentUIHandlerAndroid mInkCommentUIHandler;
  private InkSignatureContextMenu mInkSignatureContextMenu;
  private InkSignatureCreationContextMenu mInkSignatureCreationContextMenu;
  private OverLayView mOverLayView;
  private int mPageNum;
  private boolean mShouldShowContextMenu = true;
  private View mSignatureCreationView;
  private StrokeWidthPickerWidget mStrokeWidthPickerInstance = null;
  private float mTouchXInDocSpace;
  private float mTouchYInDocSpace;
  
  public PARInkSignatureCommentUIHandlerAndroid(PARInkCommentUIHandlerAndroid paramPARInkCommentUIHandlerAndroid, ARViewer paramARViewer)
  {
    this.mInkCommentUIHandler = paramPARInkCommentUIHandlerAndroid;
    this.mContext = paramARViewer;
    this.mBoundingBoxHandler = new Handler()
    {
      public void handleMessage(Message paramAnonymousMessage)
      {
        switch (paramAnonymousMessage.what)
        {
        }
        for (;;)
        {
          super.handleMessage(paramAnonymousMessage);
          return;
          PARInkSignatureCommentUIHandlerAndroid.this.showBoundingBoxAndContextMenu();
        }
      }
    };
    this.mSignatureCreationView = this.mContext.findViewById(2131492874);
    this.mOverLayView = ((OverLayView)this.mSignatureCreationView.findViewById(2131492977));
    this.mInkSignatureContextMenu = new InkSignatureContextMenu(this, paramARViewer.getPageView());
    this.mInkSignatureContextMenu.setFocusable(false);
    this.mInkSignatureCreationContextMenu = new InkSignatureCreationContextMenu(paramARViewer, this);
    this.mInkSignatureCreationContextMenu.setFocusable(false);
  }
  
  private void adjustSignatureBoundsAndCreate(ArrayList<ArrayList<Float>> paramArrayList, RectF paramRectF, float paramFloat)
  {
    Object localObject = this.mContext.getPageView();
    PointF localPointF = ((PageView)localObject).getDocViewManager().convertPointFromDocumentSpaceToDeviceSpace(this.mTouchXInDocSpace, this.mTouchYInDocSpace, this.mPageNum);
    float f1 = localPointF.x + ((PageView)localObject).getScrollX();
    float f2 = localPointF.y + ((PageView)localObject).getScrollY();
    int i = (int)(localPointF.x - (paramRectF.right + paramRectF.left) / 2.0F);
    int j = (int)(localPointF.y - (paramRectF.bottom + paramRectF.top) / 2.0F);
    RectF localRectF1 = new RectF(paramRectF);
    localRectF1.offset(i + ((PageView)localObject).getScrollX(), j + ((PageView)localObject).getScrollY());
    localObject = new RectF(((PageView)localObject).getDocViewManager().getPageRect(this.mPageNum));
    RectF localRectF2 = new RectF();
    float f3;
    if (f1 < (((RectF)localObject).left + ((RectF)localObject).right) / 2.0F)
    {
      localRectF2.left = ((RectF)localObject).left;
      f3 = ((RectF)localObject).left;
      localRectF2.right = ((f1 - ((RectF)localObject).left) * 2.0F + f3);
      if (f2 >= (((RectF)localObject).top + ((RectF)localObject).bottom) / 2.0F) {
        break label440;
      }
      localRectF2.top = ((RectF)localObject).top;
    }
    for (localRectF2.bottom = (((RectF)localObject).top + (f2 - ((RectF)localObject).top) * 2.0F);; localRectF2.bottom = ((RectF)localObject).bottom)
    {
      f1 = localRectF1.width();
      f2 = this.mContext.getResources().getDimension(2131296460);
      f3 = localRectF1.height();
      localRectF1.intersect(localRectF2);
      f1 = Math.min(Math.min(Math.min(localRectF1.width(), f2) / f1, localRectF1.height() / f3), 1.0F);
      OverLayView.scaleAndTranslatePath(paramArrayList, paramRectF, f1, f1, 0.0F, 0.0F);
      i = (int)(localPointF.x - (paramRectF.right + paramRectF.left) / 2.0F);
      j = (int)(localPointF.y - (paramRectF.bottom + paramRectF.top) / 2.0F);
      this.mInkCommentUIHandler.createInkComment(paramArrayList, paramRectF, i, j, this.mPageNum, paramFloat, -16777216);
      return;
      localRectF2.left = (((RectF)localObject).right - (((RectF)localObject).right - f1) * 2.0F);
      localRectF2.right = ((RectF)localObject).right;
      break;
      label440:
      localRectF2.top = (((RectF)localObject).bottom - (((RectF)localObject).bottom - f2) * 2.0F);
    }
  }
  
  public void addExistingSignature()
  {
    adjustSignatureBoundsAndCreate(readSignature(), readSignatureBoundingBox(), 3.0F);
    this.mContext.getPageView().getDocViewManager().getCommentManager().resetActiveTool();
    this.mInkCommentUIHandler.setInkToolMode(0);
  }
  
  public void clearSignature()
  {
    this.mOverLayView.clear();
    this.mOverLayView.setEditable(true);
  }
  
  public void clearUI()
  {
    if (this.mSignatureCreationView.getVisibility() == 0)
    {
      this.mContext.getToolbar().popView();
      this.mContext.enableClickOnPageNumberIndicator();
      this.mContext.popBackButtonHandler();
    }
    hideContextMenu();
    this.mInkSignatureCreationContextMenu.dismiss();
    this.mSignatureCreationView.setVisibility(8);
    this.mOverLayView.clear();
    this.mContext.getPageView().getDocViewManager().getCommentManager().resetActiveTool();
  }
  
  public void continueCreation()
  {
    RectF localRectF = new RectF(this.mOverLayView.mRectLeft, this.mOverLayView.mRectTop, this.mOverLayView.mRectRight, this.mOverLayView.mRectBottom);
    adjustSignatureBoundsAndCreate(this.mOverLayView.mInkList, localRectF, this.mOverLayView.getStrokeWidthInDocSpace());
  }
  
  public void creationDone()
  {
    hideContextMenu();
    saveSignature();
    this.mSignatureCreationView.setVisibility(8);
    this.mContext.getToolbar().popView();
    this.mContext.enableClickOnPageNumberIndicator();
    this.mContext.popBackButtonHandler();
    continueCreation();
  }
  
  public void deleteStoredSignature()
  {
    ARPrefsEditor localARPrefsEditor = new ARPrefsEditor(this.mContext.getSharedPreferences("com.adobe.reader.preferences", 0));
    localARPrefsEditor.remove("InkSignature");
    localARPrefsEditor.remove("InkSignatureBoundingBox");
    localARPrefsEditor.apply();
  }
  
  public void editExistingSignature()
  {
    this.mShouldShowContextMenu = true;
    this.mContext.showUIElems();
    this.mContext.hideBottomBar();
    this.mContext.getToolbar().pushView(2130903079);
    this.mContext.pushBackButtonHandler(new ARViewer.BackButtonHandler()
    {
      public void onBackPressed()
      {
        PARInkSignatureCommentUIHandlerAndroid.this.clearUI();
      }
    });
    this.mContext.getPageView().addOnCloseDocumentListener(new PageView.OnCloseDocumentListener()
    {
      public void onCloseDocument()
      {
        PARInkSignatureCommentUIHandlerAndroid.this.clearUI();
      }
    });
    ArrayList localArrayList = readSignature();
    this.mOverLayView = ((OverLayView)this.mSignatureCreationView.findViewById(2131492977));
    this.mOverLayView.initializeOverlayView();
    this.mOverLayView.setStrokeColor(-16777216);
    this.mOverLayView.setStrokeWidthInDocSpace(3.0F);
    this.mOverLayView.setInkSignatureHandler(this);
    this.mOverLayView.initializeInkList(localArrayList);
    this.mOverLayView.setEditable(false);
    this.mSignatureCreationView.setVisibility(0);
    this.mOverLayView.invalidate();
  }
  
  public void enterInkSignatureDrawingMode()
  {
    if (readSignature().isEmpty())
    {
      this.mShouldShowContextMenu = true;
      this.mContext.showUIElems();
      this.mContext.hideBottomBar();
      this.mContext.getToolbar().pushView(2130903079);
      this.mContext.disableClickOnPageNumberIndicator();
      this.mContext.pushBackButtonHandler(new ARViewer.BackButtonHandler()
      {
        public void onBackPressed()
        {
          PARInkSignatureCommentUIHandlerAndroid.this.clearUI();
        }
      });
      this.mContext.getPageView().addOnCloseDocumentListener(new PageView.OnCloseDocumentListener()
      {
        public void onCloseDocument()
        {
          PARInkSignatureCommentUIHandlerAndroid.this.clearUI();
        }
      });
      this.mOverLayView.initializeOverlayView();
      this.mOverLayView.setStrokeColor(-16777216);
      this.mOverLayView.setStrokeWidthInDocSpace(3.0F);
      this.mOverLayView.setInkSignatureHandler(this);
      this.mSignatureCreationView.setVisibility(0);
      this.mOverLayView.invalidate();
      return;
    }
    PointF localPointF = this.mContext.getPageView().getDocViewManager().convertPointFromDocumentSpaceToDeviceSpace(this.mTouchXInDocSpace, this.mTouchYInDocSpace, this.mPageNum);
    this.mInkSignatureCreationContextMenu.showAtLocation(this.mContext.getPageView(), 0, (int)localPointF.x, (int)localPointF.y);
  }
  
  public int getColor()
  {
    return this.mOverLayView.getStrokeColor();
  }
  
  public void hideContextMenu()
  {
    this.mBoundingBoxHandler.removeMessages(1);
    if (this.mStrokeWidthPickerInstance != null) {
      this.mStrokeWidthPickerInstance.dismiss();
    }
    if (this.mInkSignatureContextMenu != null) {
      this.mInkSignatureContextMenu.dismiss();
    }
  }
  
  public void onDonePressed()
  {
    hideContextMenu();
    this.mShouldShowContextMenu = false;
  }
  
  public void onStrokeWidthChanged(int paramInt)
  {
    this.mOverLayView.setStrokeWidthInDocSpace(paramInt);
    this.mOverLayView.redrawPath();
    this.mOverLayView.invalidate();
  }
  
  public ArrayList<ArrayList<Float>> readSignature()
  {
    ArrayList localArrayList1 = new ArrayList();
    Object localObject = this.mContext.getSharedPreferences("com.adobe.reader.preferences", 0).getString("InkSignature", null);
    int i;
    if (localObject != null)
    {
      localObject = ((String)localObject).split("\t");
      i = 0;
      if (i < localObject.length) {}
    }
    else
    {
      return localArrayList1;
    }
    String[] arrayOfString = localObject[i].split(",");
    ArrayList localArrayList2 = new ArrayList();
    int j = 0;
    for (;;)
    {
      if (j >= arrayOfString.length)
      {
        localArrayList1.add(localArrayList2);
        i += 1;
        break;
      }
      localArrayList2.add(Float.valueOf(Float.parseFloat(arrayOfString[j])));
      j += 1;
    }
  }
  
  public RectF readSignatureBoundingBox()
  {
    Object localObject = this.mContext.getSharedPreferences("com.adobe.reader.preferences", 0).getString("InkSignatureBoundingBox", null);
    RectF localRectF = new RectF();
    if (localObject != null)
    {
      localObject = ((String)localObject).split(",");
      localRectF.left = Float.parseFloat(localObject[0]);
      localRectF.top = Float.parseFloat(localObject[1]);
      localRectF.right = Float.parseFloat(localObject[2]);
      localRectF.bottom = Float.parseFloat(localObject[3]);
    }
    return localRectF;
  }
  
  public void saveSignature()
  {
    ArrayList localArrayList1 = this.mOverLayView.mInkList;
    Object localObject = "";
    int m = localArrayList1.size();
    deleteStoredSignature();
    if (m == 0) {
      return;
    }
    ARPrefsEditor localARPrefsEditor = new ARPrefsEditor(this.mContext.getSharedPreferences("com.adobe.reader.preferences", 0));
    int j = 0;
    if (j >= m)
    {
      localARPrefsEditor.putString("InkSignature", (String)localObject);
      localARPrefsEditor.putString("InkSignatureBoundingBox", this.mOverLayView.mRectLeft + "," + this.mOverLayView.mRectTop + "," + this.mOverLayView.mRectRight + "," + this.mOverLayView.mRectBottom);
      localARPrefsEditor.apply();
      return;
    }
    ArrayList localArrayList2 = (ArrayList)localArrayList1.get(j);
    int i = 0;
    for (;;)
    {
      if (i >= localArrayList2.size())
      {
        localObject = localObject + "\t";
        j += 1;
        break;
      }
      localObject = new StringBuilder(String.valueOf(localObject));
      int k = i + 1;
      localObject = localArrayList2.get(i);
      if (k < localArrayList2.size())
      {
        localObject = localObject + ",";
        i = k;
      }
      else
      {
        i = k;
      }
    }
  }
  
  public void setSignatureCreationPoint(int paramInt1, int paramInt2, int paramInt3)
  {
    this.mPageNum = paramInt3;
    PointF localPointF = this.mContext.getPageView().getDocViewManager().convertPointFromScrollSpaceToDocumentSpace(paramInt1, paramInt2, this.mPageNum);
    this.mTouchXInDocSpace = localPointF.x;
    this.mTouchYInDocSpace = localPointF.y;
  }
  
  public void showBoundingBoxAndContextMenu()
  {
    if (this.mShouldShowContextMenu)
    {
      this.mOverLayView.drawBoundingRect();
      int j = (int)(this.mOverLayView.getLeft() + this.mOverLayView.mRectLeft);
      int i = Math.max(this.mOverLayView.getTop(), (int)(this.mOverLayView.getTop() + this.mOverLayView.mRectTop));
      j = (j + (int)(this.mOverLayView.getLeft() + this.mOverLayView.mRectRight)) / 2;
      int k = this.mInkSignatureContextMenu.getWidth() / 2;
      int m = this.mInkSignatureContextMenu.getHeight();
      this.mInkSignatureContextMenu.showAtLocation(this.mContext.getPageView(), 0, j - k, i - m - 5);
      this.mOverLayView.setEditable(false);
    }
  }
  
  public void startTimerForBoundingBox()
  {
    if (this.mShouldShowContextMenu)
    {
      Message localMessage = Message.obtain();
      localMessage.what = 1;
      this.mBoundingBoxHandler.removeMessages(1);
      this.mBoundingBoxHandler.sendMessageDelayed(localMessage, 2000L);
    }
  }
  
  public void updateThickness()
  {
    if (this.mStrokeWidthPickerInstance != null) {
      this.mStrokeWidthPickerInstance.dismiss();
    }
    this.mStrokeWidthPickerInstance = null;
    this.mStrokeWidthPickerInstance = new StrokeWidthPickerWidget(this.mContext, this);
    this.mStrokeWidthPickerInstance.setFocusable(false);
    this.mStrokeWidthPickerInstance.setOutsideTouchable(false);
    this.mStrokeWidthPickerInstance.setAnimationStyle(2131099661);
    int i = (int)(this.mOverLayView.getLeft() + this.mOverLayView.mRectLeft);
    int j = (int)(this.mOverLayView.getTop() + this.mOverLayView.mRectTop);
    int k = (int)this.mOverLayView.mRectRight;
    this.mStrokeWidthPickerInstance.showAtLocation(this.mContext.getPageView(), 0, (i + (k + i)) / 2 - this.mInkSignatureContextMenu.getWidth() / 2, j - this.mInkSignatureContextMenu.getHeight());
  }
}
