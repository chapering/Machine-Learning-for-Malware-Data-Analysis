package com.adobe.reader;

import android.graphics.Rect;
import android.text.Editable;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnKeyListener;
import android.view.ViewParent;
import android.widget.LinearLayout.LayoutParams;

public class ARUIComboTextView
  extends AREditText
  implements ARUIDatePickerView.ARUIDatePickerViewListener, View.OnKeyListener
{
  private ARUIDatePickerView mDateView;
  private long mField;
  private String mInitialValue;
  
  public ARUIComboTextView(ARViewer paramARViewer, long paramLong)
  {
    super(paramARViewer);
    this.mField = paramLong;
    this.mDateView = null;
    setGravity(16);
    setInputType(49153);
    paramARViewer = new LinearLayout.LayoutParams(-1, -1, 1.0F);
    paramARViewer.setMargins(0, 0, 0, 0);
    setLayoutParams(paramARViewer);
    setFocusable(true);
    setFocusableInTouchMode(true);
    setBackgroundResource(0);
    setOnKeyListener(this);
  }
  
  private native String getDateFormatString(long paramLong);
  
  private void showDatePickerViewIfFieldIsDate()
  {
    if (this.mField != 0L)
    {
      String str = getDateFormatString(this.mField);
      if (str.length() > 0)
      {
        this.mDateView = new ARUIDatePickerView((ARViewer)getContext(), this);
        this.mDateView.display(getText().toString(), str);
      }
    }
  }
  
  public void onDateSet(String paramString)
  {
    this.mDateView = null;
    setText(paramString);
  }
  
  protected void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    if (this.mDateView != null) {
      this.mDateView.dismiss();
    }
  }
  
  protected void onFocusChanged(boolean paramBoolean, int paramInt, Rect paramRect)
  {
    super.onFocusChanged(paramBoolean, paramInt, paramRect);
    if (paramBoolean)
    {
      ARUtils.showKeyboard(this);
      setSelection(getText().length());
      this.mInitialValue = getText().toString();
      showDatePickerViewIfFieldIsDate();
      paramRect = getParent();
      if ((paramRect instanceof ARUIComboView)) {
        ((ARUIComboView)paramRect).setFocusedChildView(this);
      }
    }
    ViewParent localViewParent;
    do
    {
      do
      {
        return;
        paramRect = getText().toString();
      } while (paramRect.equals(this.mInitialValue));
      localViewParent = getParent();
    } while (!(localViewParent instanceof ARUIComboView));
    ((ARUIComboView)localViewParent).clearSelectedItems();
    ((ARUIComboView)localViewParent).setCustomValue(paramRect);
  }
  
  public boolean onKey(View paramView, int paramInt, KeyEvent paramKeyEvent)
  {
    return ARWidgetToolbars.onKey(paramView, paramInt, paramKeyEvent, false);
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    int i = 0;
    super.onMeasure(paramInt1, paramInt2);
    ViewParent localViewParent = getParent();
    if ((localViewParent instanceof ARUIComboView))
    {
      paramInt2 = ((ARUIComboView)localViewParent).getMeasuredWidth();
      paramInt1 = ((ARUIComboView)localViewParent).getMeasuredHeight();
      paramInt2 = (int)Math.round(paramInt2 - ((ARUIComboView)localViewParent).getComboButtonPadding());
    }
    for (;;)
    {
      setMeasuredDimension(paramInt2, paramInt1);
      return;
      paramInt2 = 0;
      paramInt1 = i;
    }
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    if (paramMotionEvent.getAction() == 0)
    {
      if (isEnabled()) {
        if (hasFocus()) {
          ARUtils.showKeyboard(this);
        }
      }
      for (;;)
      {
        return true;
        requestFocus();
        continue;
        ViewParent localViewParent = getParent();
        if ((localViewParent instanceof View)) {
          ((View)localViewParent).onTouchEvent(paramMotionEvent);
        }
      }
    }
    return false;
  }
  
  public void setFormatProperty(int paramInt)
  {
    super.setFormatProperty(paramInt);
  }
}
