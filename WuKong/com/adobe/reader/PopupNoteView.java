package com.adobe.reader;

import android.content.Context;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.graphics.drawable.Drawable;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnFocusChangeListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.Window;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.TextView;
import android.widget.TextView.OnEditorActionListener;

public class PopupNoteView
  implements View.OnClickListener
{
  private static final int POPUP_WIDGET_TOP_MARGIN = 40;
  private final double PHONE_HEIGHT = 1.96D;
  private final double PHONE_HEIGHT_FACTOR = 0.4D;
  private final double PHONE_WIDTH = 2.08D;
  private final double PHONE_WIDTH_FACTOR = 0.8D;
  private final double TAB_HEIGHT = 1.96D;
  private final double TAB_HEIGHT_FACTOR = 0.2D;
  private final double TAB_WIDTH = 2.55D;
  private final double TAB_WIDTH_FACTOR = 0.45D;
  private PopupNoteViewInterface mCommentUIHandler = null;
  private ARViewer mContext = null;
  private View mGreyBackgroundView = null;
  private boolean mHasReply = false;
  private String mOldText = null;
  private PageView mPageView = null;
  private View mPopupNoteWidgetView = null;
  private boolean mShowingPopupNoteWidgetLayout = false;
  
  public PopupNoteView(Context paramContext, PopupNoteViewInterface paramPopupNoteViewInterface, Drawable paramDrawable, int paramInt1, int paramInt2)
  {
    this.mContext = ((ARViewer)paramContext);
    this.mPageView = this.mContext.getPageView();
    this.mCommentUIHandler = paramPopupNoteViewInterface;
    initPopupNoteView(paramDrawable, paramInt1, paramInt2);
  }
  
  public ARCommentManager.COMMENTMODE getMode()
  {
    return this.mPageView.getDocViewManager().getCommentManager().getMode();
  }
  
  public int getPopupNoteWidgetHeight()
  {
    float f = ARUtils.getScreenDPI(this.mContext);
    int i = Math.max(this.mContext.getScreenWidth(), this.mContext.getScreenHeight());
    if (this.mContext.isRunningOnTablet()) {
      return (int)Math.max(f * 1.96D, i * 0.2D);
    }
    return (int)Math.min(f * 1.96D, i * 0.4D);
  }
  
  public View getPopupNoteWidgetView()
  {
    return this.mPopupNoteWidgetView;
  }
  
  public int getPopupNoteWidgetWidth()
  {
    float f = ARUtils.getScreenDPI(this.mContext);
    int i = Math.min(this.mContext.getScreenWidth(), this.mContext.getScreenHeight());
    if (this.mContext.isRunningOnTablet()) {
      return (int)Math.max(2.55D * f, i * 0.45D);
    }
    return (int)Math.min(2.08D * f, i * 0.8D);
  }
  
  public void hidePopupNoteView()
  {
    if (this.mShowingPopupNoteWidgetLayout)
    {
      this.mPopupNoteWidgetView.setVisibility(8);
      this.mGreyBackgroundView.setVisibility(8);
      ViewGroup localViewGroup = (ViewGroup)this.mContext.findViewById(2131492871);
      localViewGroup.removeView(this.mPopupNoteWidgetView);
      localViewGroup.removeView(this.mGreyBackgroundView);
      this.mShowingPopupNoteWidgetLayout = false;
      this.mPageView.allowGesturesOnPage();
    }
  }
  
  public void initPopupNoteView(Drawable paramDrawable, int paramInt1, int paramInt2)
  {
    ViewGroup localViewGroup = (ViewGroup)this.mContext.findViewById(2131492871);
    Object localObject = (LayoutInflater)this.mContext.getSystemService("layout_inflater");
    this.mGreyBackgroundView = ((LayoutInflater)localObject).inflate(2130903058, localViewGroup, false);
    localViewGroup.addView(this.mGreyBackgroundView);
    this.mPopupNoteWidgetView = ((LayoutInflater)localObject).inflate(2130903073, localViewGroup, false);
    localObject = new RelativeLayout.LayoutParams(getPopupNoteWidgetWidth(), getPopupNoteWidgetHeight());
    ((RelativeLayout.LayoutParams)localObject).addRule(13);
    localViewGroup.addView(this.mPopupNoteWidgetView, (ViewGroup.LayoutParams)localObject);
    this.mShowingPopupNoteWidgetLayout = true;
    this.mPageView.blockGesturesOnPage();
    this.mPopupNoteWidgetView.setBackgroundDrawable(paramDrawable);
    ((RelativeLayout)this.mPopupNoteWidgetView.findViewById(2131493021)).setBackgroundColor(0xFF000000 | paramInt2);
    ((RelativeLayout)this.mPopupNoteWidgetView.findViewById(2131493027)).setBackgroundColor(0xFF000000 | paramInt1);
    this.mGreyBackgroundView.setVisibility(0);
    this.mPopupNoteWidgetView.setVisibility(0);
  }
  
  public boolean isPopupVisible()
  {
    return this.mShowingPopupNoteWidgetLayout;
  }
  
  public void onClick(View paramView)
  {
    switch (paramView.getId())
    {
    }
    do
    {
      return;
      this.mCommentUIHandler.DeletePressedOnPopup();
      return;
      this.mCommentUIHandler.ClosePressedOnPopup();
      return;
      this.mCommentUIHandler.CancelPressedOnPopup();
      return;
      this.mCommentUIHandler.DonePressedOnPopup();
      return;
      paramView = this.mPageView.getDocViewManager();
    } while ((paramView == null) || (!paramView.isOperationPermitted(1, 2)) || (this.mHasReply));
    this.mCommentUIHandler.EditPressedOnPopup();
  }
  
  public void resetPopupNoteWidgetPosition()
  {
    RelativeLayout.LayoutParams localLayoutParams = new RelativeLayout.LayoutParams(getPopupNoteWidgetWidth(), getPopupNoteWidgetHeight());
    localLayoutParams.addRule(13);
    this.mPopupNoteWidgetView.setLayoutParams(localLayoutParams);
    this.mPopupNoteWidgetView.invalidate();
  }
  
  public void setPopupNoteWidgetPosition(int paramInt)
  {
    Object localObject = getMode();
    boolean bool = this.mContext.isRunningOnTablet();
    if (((localObject == ARCommentManager.COMMENTMODE.ADD_COMMENT_MODE) || (localObject == ARCommentManager.COMMENTMODE.EDIT_COMMENT_MODE)) && (((paramInt == 1) && (!bool)) || ((paramInt == 2) && (bool))))
    {
      localObject = (RelativeLayout.LayoutParams)this.mPopupNoteWidgetView.getLayoutParams();
      ((RelativeLayout.LayoutParams)localObject).addRule(10);
      ((RelativeLayout.LayoutParams)localObject).topMargin = 40;
      this.mPopupNoteWidgetView.setLayoutParams((ViewGroup.LayoutParams)localObject);
      this.mPopupNoteWidgetView.invalidate();
      return;
    }
    resetPopupNoteWidgetPosition();
  }
  
  public void setPopupNoteWidgetUIControls(boolean paramBoolean)
  {
    this.mHasReply = paramBoolean;
    if (this.mPopupNoteWidgetView == null) {
      return;
    }
    this.mPopupNoteWidgetView.findViewById(2131493022).setVisibility(0);
    Object localObject = getMode();
    if (localObject == ARCommentManager.COMMENTMODE.VIEW_COMMENT_MODE)
    {
      localObject = this.mPageView.getDocViewManager();
      if (localObject == null) {
        break label421;
      }
    }
    label421:
    for (paramBoolean = ((ARDocViewManager)localObject).isOperationPermitted(1, 1);; paramBoolean = false)
    {
      this.mPopupNoteWidgetView.findViewById(2131493023).setVisibility(8);
      this.mPopupNoteWidgetView.findViewById(2131493024).setVisibility(8);
      localObject = this.mPopupNoteWidgetView.findViewById(2131493025);
      ((View)localObject).setVisibility(0);
      ((View)localObject).setOnClickListener(this);
      localObject = this.mPopupNoteWidgetView.findViewById(2131493026);
      ((View)localObject).setVisibility(0);
      if (paramBoolean)
      {
        ((View)localObject).setEnabled(true);
        ((View)localObject).setOnClickListener(this);
      }
      for (;;)
      {
        this.mPopupNoteWidgetView.findViewById(2131493032).setVisibility(8);
        localObject = this.mPopupNoteWidgetView.findViewById(2131493029);
        ((View)localObject).setVisibility(0);
        ((View)localObject).setOnClickListener(this);
        this.mPopupNoteWidgetView.findViewById(2131493022).setOnClickListener(this);
        this.mGreyBackgroundView.setBackgroundColor(this.mContext.getResources().getColor(2131230799));
        return;
        ((View)localObject).setEnabled(false);
      }
      if ((localObject != ARCommentManager.COMMENTMODE.ADD_COMMENT_MODE) && (localObject != ARCommentManager.COMMENTMODE.EDIT_COMMENT_MODE)) {
        break;
      }
      this.mPopupNoteWidgetView.findViewById(2131493025).setVisibility(8);
      this.mPopupNoteWidgetView.findViewById(2131493026).setVisibility(8);
      localObject = this.mPopupNoteWidgetView.findViewById(2131493023);
      ((View)localObject).setVisibility(0);
      ((View)localObject).setOnClickListener(this);
      localObject = this.mPopupNoteWidgetView.findViewById(2131493024);
      ((View)localObject).setVisibility(0);
      ((View)localObject).setOnClickListener(this);
      ((View)localObject).setEnabled(false);
      this.mPopupNoteWidgetView.findViewById(2131493029).setVisibility(8);
      this.mPopupNoteWidgetView.findViewById(2131493032).setVisibility(0);
      localObject = (EditText)this.mPopupNoteWidgetView.findViewById(2131493033);
      ((EditText)localObject).setText("");
      ((EditText)localObject).addTextChangedListener(new TextWatcher()
      {
        public void afterTextChanged(Editable paramAnonymousEditable) {}
        
        public void beforeTextChanged(CharSequence paramAnonymousCharSequence, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3) {}
        
        public void onTextChanged(CharSequence paramAnonymousCharSequence, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3)
        {
          View localView = PopupNoteView.this.mPopupNoteWidgetView.findViewById(2131493024);
          Object localObject = PopupNoteView.this.getMode();
          if (localObject == ARCommentManager.COMMENTMODE.EDIT_COMMENT_MODE)
          {
            localObject = PopupNoteView.this.mOldText;
            if ((paramAnonymousCharSequence.toString().equals(localObject)) || (paramAnonymousCharSequence.length() == 0)) {
              localView.setEnabled(false);
            }
          }
          while (localObject != ARCommentManager.COMMENTMODE.ADD_COMMENT_MODE)
          {
            return;
            localView.setEnabled(true);
            return;
          }
          if (paramAnonymousCharSequence.length() == 0)
          {
            localView.setEnabled(false);
            return;
          }
          localView.setEnabled(true);
        }
      });
      ((EditText)localObject).setOnFocusChangeListener(new View.OnFocusChangeListener()
      {
        public void onFocusChange(View paramAnonymousView, boolean paramAnonymousBoolean)
        {
          if (paramAnonymousBoolean)
          {
            paramAnonymousView.setBackgroundColor(PopupNoteView.this.mContext.getResources().getColor(2131230720));
            PopupNoteView.this.mContext.getWindow().setSoftInputMode(4);
            paramAnonymousView = (EditText)PopupNoteView.this.mPopupNoteWidgetView.findViewById(2131493033);
            ((InputMethodManager)PopupNoteView.this.mContext.getSystemService("input_method")).showSoftInput(paramAnonymousView, 1);
            int i = PopupNoteView.this.mContext.getResources().getConfiguration().orientation;
            PopupNoteView.this.setPopupNoteWidgetPosition(i);
            return;
          }
          PopupNoteView.this.mContext.getWindow().setSoftInputMode(2);
        }
      });
      ((EditText)localObject).setOnEditorActionListener(new TextView.OnEditorActionListener()
      {
        public boolean onEditorAction(TextView paramAnonymousTextView, int paramAnonymousInt, KeyEvent paramAnonymousKeyEvent)
        {
          if (paramAnonymousInt == 6)
          {
            PopupNoteView.this.mCommentUIHandler.DonePressedOnPopup();
            return true;
          }
          return false;
        }
      });
      ((EditText)localObject).requestFocus();
      this.mGreyBackgroundView.setBackgroundColor(this.mContext.getResources().getColor(2131230800));
      return;
    }
  }
  
  public void setPopupNoteWidgetUIControls(boolean paramBoolean, String paramString)
  {
    String str = paramString;
    if (paramString == null) {
      str = "";
    }
    this.mOldText = str;
    setPopupNoteWidgetUIControls(paramBoolean);
  }
}
