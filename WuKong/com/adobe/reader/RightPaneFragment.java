package com.adobe.reader;

import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.content.DialogInterface;
import android.content.DialogInterface.OnCancelListener;
import android.content.DialogInterface.OnClickListener;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.text.Editable;
import android.text.InputFilter;
import android.text.Spanned;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import com.adobe.reader.cloud.CloudCacheManager;
import com.adobe.reader.cloud.CloudTransferManager;
import com.adobe.reader.cloud.async.RefreshCloudCacheFilesAsyncTask;
import com.adobe.reader.cloud.network.CloudNetworkManager;
import com.adobe.reader.cloud.ui.CloudTransferListViewManager;
import com.adobe.reader.cloud.ui.CloudUIHandler;
import java.io.File;
import java.util.List;

public class RightPaneFragment
  extends Fragment
{
  private final String WHATS_NEW_URLPATH = "file:///android_res/raw/whatsnew.html";
  private ARSplitPane mARSplitPaneActivity;
  private ARFileListViewManager mAllPDFListManager = null;
  private CloudUIHandler mCloudUIHandler = null;
  private ARFileListViewManager mDocumentFileListViewManager = null;
  private boolean mFileBrowserSearchWasActive = false;
  private ARFileListViewManager mFolderViewListManager = null;
  private ARFileListViewManager mMoveFilesListManager = null;
  private BasePopupMenu mPopupMenu;
  private ARFileEntryAdapter mRecentFilesAdapter;
  private List<ARFileEntry> mRecentFilesList;
  private ListView mRecentFilesListView = null;
  
  public RightPaneFragment() {}
  
  private void makeAllPDFsViewUIChanges()
  {
    if (this.mDocumentFileListViewManager == this.mAllPDFListManager)
    {
      this.mARSplitPaneActivity.findViewById(2131493061).setVisibility(0);
      this.mARSplitPaneActivity.findViewById(2131493056).setVisibility(8);
      this.mARSplitPaneActivity.findViewById(2131493110).setVisibility(0);
      this.mARSplitPaneActivity.findViewById(2131493109).setVisibility(0);
    }
  }
  
  private void makeFolderViewUIChanges()
  {
    int j = 0;
    Object localObject;
    if (this.mDocumentFileListViewManager == this.mFolderViewListManager)
    {
      this.mARSplitPaneActivity.findViewById(2131493061).setVisibility(8);
      this.mARSplitPaneActivity.findViewById(2131493056).setVisibility(0);
      localObject = null;
      File localFile = ((ARFolderViewListLoader)this.mFolderViewListManager.getFileListLoader()).getCurrentDirectory();
      if (localFile != null) {
        localObject = localFile.getAbsolutePath();
      }
      if ((localObject == null) || (((ARFolderViewListLoader)this.mFolderViewListManager.getFileListLoader()).isDirectoryParentOfMountPoint((String)localObject))) {
        break label127;
      }
      i = 0;
      localObject = this.mARSplitPaneActivity.findViewById(2131493110);
      if (i != 0) {
        break label132;
      }
    }
    label127:
    label132:
    for (int i = j;; i = 8)
    {
      ((View)localObject).setVisibility(i);
      this.mARSplitPaneActivity.findViewById(2131493109).setVisibility(8);
      return;
      i = 1;
      break;
    }
  }
  
  private void resetRightPaneFragmentUI(int paramInt)
  {
    int j = 0;
    if (paramInt == 2131361900)
    {
      paramInt = 1;
      if (this.mDocumentFileListViewManager == null) {
        break label350;
      }
    }
    label44:
    label108:
    label121:
    label143:
    label181:
    label278:
    label296:
    label320:
    label326:
    label350:
    for (boolean bool1 = this.mDocumentFileListViewManager.isSelectionModeON();; bool1 = false)
    {
      Object localObject = this.mARSplitPaneActivity;
      boolean bool2;
      int i;
      if ((paramInt != 0) && (bool1))
      {
        bool2 = true;
        ((ARSplitPane)localObject).setEditModeToolBarVisibility(bool2);
        localObject = this.mARSplitPaneActivity.findViewById(2131493113);
        if (((View)localObject).isShown())
        {
          this.mFileBrowserSearchWasActive = true;
          ((View)localObject).setVisibility(8);
        }
        if ((paramInt == 0) || (this.mDocumentFileListViewManager == null)) {
          break label296;
        }
        if (this.mDocumentFileListViewManager != this.mAllPDFListManager) {
          break label278;
        }
        makeAllPDFsViewUIChanges();
        if (this.mFileBrowserSearchWasActive) {
          ((View)localObject).setVisibility(0);
        }
        localObject = this.mARSplitPaneActivity.findViewById(2131493099);
        if ((paramInt == 0) || (bool1)) {
          break label320;
        }
        i = 0;
        ((View)localObject).setVisibility(i);
        if (this.mARSplitPaneActivity.isRunningOnTablet())
        {
          localObject = this.mARSplitPaneActivity.findViewById(2131493117);
          if ((paramInt == 0) || (bool1)) {
            break label326;
          }
          paramInt = 0;
          ((View)localObject).setVisibility(paramInt);
        }
        if (this.mCloudUIHandler != null)
        {
          this.mCloudUIHandler.setTopBarButtonsVisibility();
          this.mCloudUIHandler.getTransferListViewManager().setTopBarButtonsVisibility();
        }
        localObject = (FrameLayout)this.mARSplitPaneActivity.findViewById(2131493052);
        i = ((FrameLayout)localObject).getChildCount();
        paramInt = j;
      }
      for (;;)
      {
        if (paramInt >= i)
        {
          this.mARSplitPaneActivity.findViewById(2131493095).setVisibility(8);
          this.mARSplitPaneActivity.findViewById(2131493109).setVisibility(8);
          return;
          paramInt = 0;
          break;
          bool2 = false;
          break label44;
          if (this.mDocumentFileListViewManager != this.mFolderViewListManager) {
            break label108;
          }
          makeFolderViewUIChanges();
          break label108;
          this.mARSplitPaneActivity.findViewById(2131493110).setVisibility(8);
          ((View)localObject).setVisibility(8);
          break label121;
          i = 8;
          break label143;
          paramInt = 8;
          break label181;
        }
        ((FrameLayout)localObject).getChildAt(paramInt).setVisibility(8);
        paramInt += 1;
      }
    }
  }
  
  private void setAllPDFsViewAsCurrent()
  {
    if (this.mAllPDFListManager == null) {
      this.mAllPDFListManager = new ARFileListViewManager((ListView)this.mARSplitPaneActivity.findViewById(2131493062), this.mARSplitPaneActivity, ARFileEntryAdapter.ADAPTER_TYPE.ALL_PDFS, null);
    }
    this.mDocumentFileListViewManager = this.mAllPDFListManager;
    makeAllPDFsViewUIChanges();
  }
  
  private void setFolderViewAsCurrent(String paramString)
  {
    if (this.mFolderViewListManager == null) {
      this.mFolderViewListManager = new ARFileListViewManager((ListView)this.mARSplitPaneActivity.findViewById(2131493060), this.mARSplitPaneActivity, ARFileEntryAdapter.ADAPTER_TYPE.FOLDER_VIEW, paramString);
    }
    this.mDocumentFileListViewManager = this.mFolderViewListManager;
    makeFolderViewUIChanges();
  }
  
  private void setRightPaneTitleText(int paramInt)
  {
    TextView localTextView = (TextView)this.mARSplitPaneActivity.findViewById(2131493095);
    localTextView.setText(paramInt);
    localTextView.setVisibility(0);
  }
  
  public boolean canShowSearchBox()
  {
    return (this.mAllPDFListManager != null) && (this.mDocumentFileListViewManager == this.mAllPDFListManager) && (!this.mDocumentFileListViewManager.isSelectionModeON());
  }
  
  public void clearObjects()
  {
    WebView localWebView = (WebView)this.mARSplitPaneActivity.findViewById(2131493077);
    if (localWebView != null) {
      ((FrameLayout)this.mARSplitPaneActivity.findViewById(2131493052)).removeView(localWebView);
    }
    localWebView = (WebView)this.mARSplitPaneActivity.findViewById(2131493072);
    if (localWebView != null) {
      ((FrameLayout)this.mARSplitPaneActivity.findViewById(2131493065)).removeView(localWebView);
    }
    ARFileBrowserUtils.releaseRecentFiles();
    if (this.mRecentFilesList != null) {
      this.mRecentFilesList.clear();
    }
    if (this.mFolderViewListManager != null) {
      this.mFolderViewListManager.releaseFileEntries();
    }
    if (this.mAllPDFListManager != null) {
      this.mAllPDFListManager.releaseFileEntries();
    }
    if (this.mMoveFilesListManager != null) {
      this.mMoveFilesListManager.releaseFileEntries();
    }
    if (this.mCloudUIHandler != null) {
      this.mCloudUIHandler.releaseFileEntries();
    }
  }
  
  public void clearRecentFileList()
  {
    ARFileBrowserUtils.clearRecentFileList(this.mARSplitPaneActivity);
    this.mRecentFilesAdapter.clear();
    this.mARSplitPaneActivity.findViewById(2131493054).setVisibility(0);
  }
  
  public void deleteFileAtIndex(int paramInt)
  {
    if (this.mARSplitPaneActivity.getCurrentLeftPaneSelectedItem() != 2131361900) {
      return;
    }
    this.mDocumentFileListViewManager.deleteFileAtIndex(paramInt);
  }
  
  public void deleteSelectedFiles()
  {
    if (this.mARSplitPaneActivity.getCurrentLeftPaneSelectedItem() != 2131361900) {
      return;
    }
    this.mDocumentFileListViewManager.deleteSelectedFiles();
  }
  
  public void display(ARSplitPane paramARSplitPane, int paramInt)
  {
    this.mARSplitPaneActivity = paramARSplitPane;
    resetRightPaneFragmentUI(paramInt);
    switch (paramInt)
    {
    }
    label352:
    label359:
    do
    {
      return;
      setRightPaneTitleText(2131361899);
      if (this.mRecentFilesListView == null)
      {
        this.mRecentFilesListView = ((ListView)this.mARSplitPaneActivity.findViewById(2131493053));
        this.mRecentFilesList = ARFileBrowserUtils.getRecentFilesList(this.mARSplitPaneActivity);
        this.mRecentFilesAdapter = new ARFileEntryAdapter(this.mARSplitPaneActivity, 2130903075, ARFileEntryAdapter.ADAPTER_TYPE.RECENT_FILES);
        this.mRecentFilesAdapter.addAll(this.mRecentFilesList, false);
        this.mRecentFilesListView.setAdapter(this.mRecentFilesAdapter);
        this.mRecentFilesAdapter.setNotifyOnChange(true);
        this.mRecentFilesListView.setOnItemClickListener(new AdapterView.OnItemClickListener()
        {
          public void onItemClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
          {
            paramAnonymousInt = (int)paramAnonymousLong;
            if ((paramAnonymousInt < 0) || (paramAnonymousInt > RightPaneFragment.this.mRecentFilesList.size() - 1)) {
              return;
            }
            paramAnonymousView = (ARFileEntry)RightPaneFragment.this.mRecentFilesList.get(paramAnonymousInt);
            paramAnonymousAdapterView = new File(paramAnonymousView.getFilePath());
            paramAnonymousView = paramAnonymousView.getFileID();
            if (paramAnonymousView == null)
            {
              RightPaneFragment.this.mARSplitPaneActivity.openFile(paramAnonymousAdapterView);
              return;
            }
            if (CloudCacheManager.getInstance().isFileDirty(paramAnonymousView))
            {
              RightPaneFragment.this.mARSplitPaneActivity.downloadCloudFile(paramAnonymousAdapterView.getAbsolutePath(), paramAnonymousView, -1L);
              return;
            }
            RightPaneFragment.this.mARSplitPaneActivity.openCloudFile(paramAnonymousAdapterView, paramAnonymousView);
          }
        });
      }
      for (;;)
      {
        if ((this.mARSplitPaneActivity.refreshRecentsFromCloud()) && (CloudNetworkManager.isSignedIn())) {
          new RefreshCloudCacheFilesAsyncTask(this.mARSplitPaneActivity).execute(new Void[0]);
        }
        paramARSplitPane = this.mARSplitPaneActivity.findViewById(2131493054);
        if (!recentFilesExist()) {
          break;
        }
        paramARSplitPane.setVisibility(8);
        this.mRecentFilesListView.setVisibility(0);
        return;
        refreshRecentFilesList();
      }
      paramARSplitPane.setVisibility(0);
      return;
      if (this.mDocumentFileListViewManager == null)
      {
        if (ARFileBrowserUtils.getDocumentViewState(this.mARSplitPaneActivity) == 1) {
          setFolderViewAsCurrent(ARFileBrowserUtils.getFileManagerDefaultDirectoryPath(this.mARSplitPaneActivity));
        }
      }
      else
      {
        this.mDocumentFileListViewManager.refreshFileListViewManager();
        this.mDocumentFileListViewManager.makeViewVisible();
        paramARSplitPane = (TextView)this.mARSplitPaneActivity.findViewById(2131493101);
        if (this.mDocumentFileListViewManager != this.mFolderViewListManager) {
          break label352;
        }
      }
      for (paramInt = 2131362172;; paramInt = 2131362171)
      {
        paramARSplitPane.setText(paramInt);
        if (!canShowSearchBox()) {
          break label359;
        }
        this.mARSplitPaneActivity.findViewById(2131493109).setVisibility(0);
        return;
        setAllPDFsViewAsCurrent();
        break;
      }
      this.mARSplitPaneActivity.findViewById(2131493109).setVisibility(8);
      return;
      setRightPaneTitleText(2131361901);
      ((FrameLayout)this.mARSplitPaneActivity.findViewById(2131493065)).setVisibility(0);
      setupCloudUIHandler();
      this.mCloudUIHandler.initiateWorkflow();
      return;
      setRightPaneTitleText(2131361902);
      setupCloudUIHandler();
      CloudTransferManager.getInstance().executePendingTransfers();
      this.mCloudUIHandler.showTransferList();
      return;
      setRightPaneTitleText(2131362024);
      paramARSplitPane = (WebView)this.mARSplitPaneActivity.findViewById(2131493077);
    } while (paramARSplitPane == null);
    paramARSplitPane.getSettings().setJavaScriptEnabled(true);
    paramARSplitPane.loadUrl("file:///android_res/raw/whatsnew.html");
    paramARSplitPane.setVisibility(0);
  }
  
  public void duplicateSelectedFiles()
  {
    if (this.mARSplitPaneActivity.getCurrentLeftPaneSelectedItem() != 2131361900) {
      return;
    }
    this.mDocumentFileListViewManager.duplicateSelectedFiles();
  }
  
  public void enterDocumentEditMode()
  {
    this.mDocumentFileListViewManager.enterDocumentEditMode();
    this.mARSplitPaneActivity.findViewById(2131493109).setVisibility(8);
    if (this.mDocumentFileListViewManager == this.mFolderViewListManager)
    {
      this.mARSplitPaneActivity.findViewById(2131493104).setVisibility(0);
      return;
    }
    this.mARSplitPaneActivity.findViewById(2131493104).setVisibility(8);
  }
  
  public void exitDocumentEditMode()
  {
    this.mDocumentFileListViewManager.exitDocumentEditMode();
    if (this.mDocumentFileListViewManager == this.mAllPDFListManager) {
      this.mARSplitPaneActivity.findViewById(2131493109).setVisibility(0);
    }
  }
  
  public CloudUIHandler getCloudUIHandler()
  {
    return this.mCloudUIHandler;
  }
  
  public boolean handleBackPressed(int paramInt)
  {
    if ((paramInt == 2131361900) && (this.mDocumentFileListViewManager != null))
    {
      if (this.mDocumentFileListViewManager == this.mFolderViewListManager)
      {
        Object localObject = (ARFolderViewListLoader)this.mFolderViewListManager.getFileListLoader();
        File localFile = ((ARFolderViewListLoader)localObject).getCurrentDirectory();
        if (localFile != null)
        {
          String str = localFile.getAbsolutePath();
          if (this.mDocumentFileListViewManager.isSelectionModeON())
          {
            exitDocumentEditMode();
            return true;
          }
          if (!((ARFolderViewListLoader)localObject).isDirectoryParentOfMountPoint(str))
          {
            localObject = localFile.getParentFile();
            if ((localObject != null) && (((File)localObject).exists()))
            {
              this.mDocumentFileListViewManager.openDirectory((File)localObject);
              return true;
            }
          }
        }
      }
      else if ((this.mDocumentFileListViewManager == this.mAllPDFListManager) && (this.mDocumentFileListViewManager.isSelectionModeON()))
      {
        exitDocumentEditMode();
        return true;
      }
    }
    else if ((paramInt == 2131361901) && (this.mCloudUIHandler != null) && (this.mCloudUIHandler.handleBackPress())) {
      return true;
    }
    return false;
  }
  
  public void moveSelectedFiles()
  {
    if (this.mARSplitPaneActivity.getCurrentLeftPaneSelectedItem() != 2131361900) {
      return;
    }
    if (this.mDocumentFileListViewManager == this.mFolderViewListManager) {}
    Button localButton;
    for (Object localObject1 = ((ARFolderViewListLoader)this.mDocumentFileListViewManager.getFileListLoader()).getCurrentDirectory().getAbsolutePath();; localObject1 = ARFileBrowserUtils.getFileManagerDefaultDirectoryPath(this.mARSplitPaneActivity))
    {
      this.mMoveFilesListManager = new ARFileListViewManager((ListView)this.mARSplitPaneActivity.findViewById(2131493009), this.mARSplitPaneActivity, ARFileEntryAdapter.ADAPTER_TYPE.MOVE_FILES, (String)localObject1);
      Object localObject2 = this.mARSplitPaneActivity.findViewById(2131493003);
      ((View)localObject2).setVisibility(0);
      localObject1 = (ImageButton)this.mARSplitPaneActivity.findViewById(2131493004);
      ((ImageButton)localObject1).setOnClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          RightPaneFragment.this.showCreateDirectoryUI(RightPaneFragment.this.mMoveFilesListManager, false);
        }
      });
      localButton = (Button)this.mARSplitPaneActivity.findViewById(2131493005);
      localButton.setOnClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          paramAnonymousView = (ARFolderViewListLoader)RightPaneFragment.this.mMoveFilesListManager.getFileListLoader();
          RightPaneFragment.this.mDocumentFileListViewManager.moveSelectedFiles(paramAnonymousView.getCurrentDirectory().getAbsolutePath());
          this.val$moveListLayout.setVisibility(8);
        }
      });
      this.mARSplitPaneActivity.findViewById(2131493006).setOnClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          paramAnonymousView = new File(((TextView)RightPaneFragment.this.mARSplitPaneActivity.findViewById(2131493008)).getText().toString()).getParentFile();
          RightPaneFragment.this.mMoveFilesListManager.openDirectory(paramAnonymousView);
        }
      });
      localObject2 = (ARFolderViewListLoader)this.mMoveFilesListManager.getFileListLoader();
      File localFile = ((ARFolderViewListLoader)localObject2).getCurrentDirectory();
      if ((localFile != null) && (!((ARFolderViewListLoader)localObject2).isDirectoryParentOfMountPoint(localFile.getAbsolutePath()))) {
        break;
      }
      ((ImageButton)localObject1).setVisibility(8);
      localButton.setVisibility(8);
      return;
    }
    ((ImageButton)localObject1).setVisibility(0);
    localButton.setVisibility(0);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    return paramLayoutInflater.inflate(2130903077, paramViewGroup, false);
  }
  
  public void onResume()
  {
    super.onResume();
    ((LinearLayout)this.mARSplitPaneActivity.findViewById(2131493057)).setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        if (RightPaneFragment.this.mDocumentFileListViewManager != null)
        {
          paramAnonymousView = new File(((TextView)RightPaneFragment.this.mARSplitPaneActivity.findViewById(2131493059)).getText().toString()).getParentFile();
          RightPaneFragment.this.mDocumentFileListViewManager.openDirectory(paramAnonymousView);
        }
      }
    });
    display(this.mARSplitPaneActivity, this.mARSplitPaneActivity.getCurrentLeftPaneSelectedItem());
  }
  
  public boolean recentFilesExist()
  {
    if ((this.mRecentFilesList == null) || (this.mRecentFilesList.isEmpty())) {
      this.mRecentFilesList = ARFileBrowserUtils.getRecentFilesList(this.mARSplitPaneActivity);
    }
    return (this.mRecentFilesList != null) && (!this.mRecentFilesList.isEmpty());
  }
  
  public void refreshFileListViewManagers()
  {
    if (this.mAllPDFListManager != null) {
      this.mAllPDFListManager.refreshFileListViewManager();
    }
    if (this.mFolderViewListManager != null) {
      this.mFolderViewListManager.refreshFileListViewManager();
    }
    if (this.mMoveFilesListManager != null) {
      this.mMoveFilesListManager.refreshFileListViewManager();
    }
    refreshRecentFilesList();
  }
  
  public void refreshRecentFilesList()
  {
    if (this.mRecentFilesAdapter != null)
    {
      this.mRecentFilesList = ARFileBrowserUtils.getRecentFilesList(this.mARSplitPaneActivity);
      this.mRecentFilesAdapter.clear();
      this.mRecentFilesAdapter.addAll(this.mRecentFilesList, false);
    }
  }
  
  public void renameSelectedFile()
  {
    if (this.mARSplitPaneActivity.getCurrentLeftPaneSelectedItem() != 2131361900) {
      return;
    }
    this.mDocumentFileListViewManager.renameSelectedFile();
  }
  
  public void saveDocumentViewState()
  {
    int j = 2;
    int i = j;
    if (this.mDocumentFileListViewManager != null)
    {
      i = j;
      if (this.mDocumentFileListViewManager == this.mFolderViewListManager) {
        i = 1;
      }
    }
    ARFileBrowserUtils.setDocumentViewState(this.mARSplitPaneActivity, i);
  }
  
  public void setFileBrowserSearchWasActive(boolean paramBoolean)
  {
    this.mFileBrowserSearchWasActive = paramBoolean;
  }
  
  public void setupCloudUIHandler()
  {
    if (this.mCloudUIHandler == null) {
      this.mCloudUIHandler = new CloudUIHandler(this.mARSplitPaneActivity);
    }
  }
  
  public void showCloudRootFolder()
  {
    this.mCloudUIHandler.showCloudRootFolder();
  }
  
  public void showCreateDirectoryForFolderView()
  {
    if ((this.mFolderViewListManager != null) && (this.mDocumentFileListViewManager == this.mFolderViewListManager)) {
      showCreateDirectoryUI(this.mFolderViewListManager, true);
    }
  }
  
  public void showCreateDirectoryUI(final ARFileListViewManager paramARFileListViewManager, final boolean paramBoolean)
  {
    final EditText localEditText = new EditText(this.mARSplitPaneActivity);
    localEditText.setSingleLine();
    localEditText.setText("");
    localEditText.setHint(2131362207);
    ARUtils.showKeyboard(localEditText);
    localEditText.setFilters(new InputFilter[] { new InputFilter()
    {
      public CharSequence filter(CharSequence paramAnonymousCharSequence, int paramAnonymousInt1, int paramAnonymousInt2, Spanned paramAnonymousSpanned, int paramAnonymousInt3, int paramAnonymousInt4)
      {
        for (;;)
        {
          if (paramAnonymousInt1 >= paramAnonymousInt2) {
            return null;
          }
          if ("|\\?*<\":>/".contains(String.valueOf(paramAnonymousCharSequence.charAt(paramAnonymousInt1)))) {
            return "";
          }
          paramAnonymousInt1 += 1;
        }
      }
    } });
    AlertDialog.Builder localBuilder = new AlertDialog.Builder(this.mARSplitPaneActivity);
    localBuilder.setTitle(2131362206);
    localBuilder.setView(localEditText);
    localBuilder.setPositiveButton(2131361907, new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        String str = localEditText.getText().toString();
        str = ((ARFolderViewListLoader)paramARFileListViewManager.getFileListLoader()).getCurrentDirectory().getAbsolutePath() + File.separatorChar + str;
        ARUtils.hideKeyboard(localEditText);
        paramAnonymousDialogInterface.dismiss();
        if (ARFileBrowserUtils.createDirectory(str))
        {
          if (paramBoolean)
          {
            RightPaneFragment.this.refreshFileListViewManagers();
            return;
          }
          paramAnonymousDialogInterface = (ARFolderViewListLoader)paramARFileListViewManager.getFileListLoader();
          paramAnonymousDialogInterface.resetState();
          paramAnonymousDialogInterface.showFiles();
          return;
        }
        Toast.makeText(RightPaneFragment.this.mARSplitPaneActivity, RightPaneFragment.this.mARSplitPaneActivity.getString(2131361822), 0).show();
      }
    });
    localBuilder.setNegativeButton(17039360, new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
      {
        ARUtils.hideKeyboard(localEditText);
        paramAnonymousDialogInterface.dismiss();
      }
    });
    localBuilder.setOnCancelListener(new DialogInterface.OnCancelListener()
    {
      public void onCancel(DialogInterface paramAnonymousDialogInterface)
      {
        ARUtils.hideKeyboard(localEditText);
        paramAnonymousDialogInterface.dismiss();
      }
    });
    paramARFileListViewManager = localBuilder.create();
    localEditText.addTextChangedListener(new TextWatcher()
    {
      public void afterTextChanged(Editable paramAnonymousEditable)
      {
        if (paramAnonymousEditable.length() == 0)
        {
          paramARFileListViewManager.getButton(-1).setEnabled(false);
          return;
        }
        paramARFileListViewManager.getButton(-1).setEnabled(true);
      }
      
      public void beforeTextChanged(CharSequence paramAnonymousCharSequence, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3) {}
      
      public void onTextChanged(CharSequence paramAnonymousCharSequence, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3) {}
    });
    paramARFileListViewManager.show();
    paramARFileListViewManager.getButton(-1).setEnabled(false);
  }
  
  public void toggleViewMode(View paramView)
  {
    if (this.mDocumentFileListViewManager == null) {
      return;
    }
    if (this.mDocumentFileListViewManager == this.mFolderViewListManager) {}
    for (boolean bool = true;; bool = false)
    {
      this.mPopupMenu = new ARDocumentListSwitchViewMenu(paramView, bool);
      if (!this.mARSplitPaneActivity.isRunningOnTablet()) {
        break;
      }
      this.mPopupMenu.showAsToolbarMenu(paramView);
      return;
    }
    this.mPopupMenu.showAsContextMenu(paramView);
  }
  
  public void toggleViewMode(boolean paramBoolean)
  {
    if (!paramBoolean)
    {
      setAllPDFsViewAsCurrent();
      ((TextView)this.mARSplitPaneActivity.findViewById(2131493101)).setText(2131362171);
      return;
    }
    setFolderViewAsCurrent(ARFileBrowserUtils.getFileManagerDefaultDirectoryPath(this.mARSplitPaneActivity));
    ((TextView)this.mARSplitPaneActivity.findViewById(2131493101)).setText(2131362172);
  }
  
  public void updateSearchString(String paramString)
  {
    if (this.mDocumentFileListViewManager == this.mAllPDFListManager) {
      this.mDocumentFileListViewManager.updateSearchString(paramString);
    }
  }
}
