package com.adobe.reader;

import android.graphics.Rect;
import android.text.Editable;
import android.view.View;
import android.view.ViewGroup.LayoutParams;
import android.widget.LinearLayout;
import android.widget.RelativeLayout.LayoutParams;

public class ARUICombView
  extends LinearLayout
  implements ARTextView, ARUIDatePickerView.ARUIDatePickerViewListener, IPlatformView
{
  private boolean mAttachedToWindow;
  private ARUIDatePickerView mDateView;
  private long mField;
  private View mFocusedChildView;
  private int mHeight;
  private int mWidth;
  
  public ARUICombView(ARViewer paramARViewer, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, long paramLong)
  {
    super(paramARViewer);
    this.mField = paramLong;
    this.mWidth = paramInt1;
    this.mHeight = paramInt2;
    this.mDateView = null;
    this.mFocusedChildView = null;
    this.mAttachedToWindow = false;
    Object localObject = new RelativeLayout.LayoutParams(this.mWidth, this.mHeight);
    ((RelativeLayout.LayoutParams)localObject).setMargins(paramInt3, paramInt4, 0, 0);
    setLayoutParams((ViewGroup.LayoutParams)localObject);
    paramInt3 = Math.round(paramInt1 / paramInt5);
    paramInt1 = 0;
    for (;;)
    {
      if (paramInt1 >= paramInt5)
      {
        setFocusable(true);
        setFocusableInTouchMode(true);
        setBackgroundResource(0);
        return;
      }
      localObject = new ARUICombTextView(paramARViewer, paramInt3, paramInt2, paramInt1 * paramInt3, paramInt4, paramLong);
      if (paramInt1 == 0) {
        ((ARUICombTextView)localObject).post(new Runnable()
        {
          public void run()
          {
            this.val$box.requestFocus();
          }
        });
      }
      ((ARUICombTextView)localObject).setId(paramInt1);
      addView((View)localObject);
      paramInt1 += 1;
    }
  }
  
  private native void commit(long paramLong, String paramString);
  
  private void deleteBoxValueInternal(int paramInt)
  {
    ARUICombTextView localARUICombTextView1 = getBox(paramInt);
    if (localARUICombTextView1 != null)
    {
      ARUICombTextView localARUICombTextView2 = (ARUICombTextView)getChildAt(paramInt + 1);
      if (localARUICombTextView2 != null)
      {
        localARUICombTextView1.setText(localARUICombTextView2.getText());
        deleteBoxValueInternal(localARUICombTextView2.getId());
      }
    }
    else
    {
      return;
    }
    localARUICombTextView1.setText(null);
  }
  
  private ARUICombTextView getBox(int paramInt)
  {
    View localView = findViewById(paramInt);
    if (localView != null) {
      return (ARUICombTextView)localView;
    }
    return null;
  }
  
  private native String getDateFormatString(long paramLong);
  
  private native float getScaledFontSize(long paramLong, float paramFloat);
  
  private void setBoxValueInternal(int paramInt, CharSequence paramCharSequence)
  {
    ARUICombTextView localARUICombTextView1 = getBox(paramInt);
    if (localARUICombTextView1 != null)
    {
      int i = localARUICombTextView1.getText().length();
      if (i > 0)
      {
        ARUICombTextView localARUICombTextView2 = (ARUICombTextView)getChildAt(paramInt + 1);
        if (localARUICombTextView2 != null) {
          setBoxValueInternal(localARUICombTextView2.getId(), localARUICombTextView1.getText().subSequence(i - 1, i));
        }
      }
      localARUICombTextView1.setText(paramCharSequence);
    }
  }
  
  private void showDatePickerViewIfFieldIsDate()
  {
    if (this.mField != 0L)
    {
      String str = getDateFormatString(this.mField);
      if (str.length() > 0)
      {
        this.mDateView = new ARUIDatePickerView((ARViewer)getContext(), this);
        this.mDateView.display(getValue(), str);
      }
    }
  }
  
  public void adjustToTheNewScroll() {}
  
  public void adjustToTheNewZoom()
  {
    if (this.mField != 0L)
    {
      Rect localRect = ARUIView.updateViewBounds(this, this.mField);
      if (localRect != null)
      {
        this.mWidth = Math.abs(localRect.right - localRect.left);
        this.mHeight = Math.abs(localRect.bottom - localRect.top);
      }
      setTextSize(getScaledFontSize(this.mField, 0.0F));
    }
  }
  
  public void commit()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    int j = getChildCount();
    int i = 0;
    for (;;)
    {
      if (i >= j) {}
      Object localObject;
      do
      {
        commit(this.mField, localStringBuilder.toString());
        return;
        localObject = (ARUICombTextView)getChildAt(i);
        if (localObject == null) {
          break;
        }
        localObject = ((ARUICombTextView)localObject).getText();
      } while (((Editable)localObject).length() == 0);
      localStringBuilder.append((CharSequence)localObject);
      i += 1;
    }
  }
  
  public boolean deleteBoxValue(int paramInt)
  {
    String str1 = getValue();
    deleteBoxValueInternal(paramInt);
    String str2 = getValue();
    return ARUITextBasedView.onTextWillChange(this, this.mField, str1, paramInt, 1, str2, paramInt, 0);
  }
  
  protected void deleteValue()
  {
    int j = getChildCount();
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        return;
      }
      ARUICombTextView localARUICombTextView = (ARUICombTextView)getChildAt(i);
      if (localARUICombTextView != null) {
        localARUICombTextView.setText(null);
      }
      i += 1;
    }
  }
  
  public void finalZoomLevel(double paramDouble) {}
  
  public int getNumberOfEmptyBoxes()
  {
    int k = getChildCount();
    int j = 0;
    int i = 0;
    if (j >= k) {
      return i;
    }
    ARUICombTextView localARUICombTextView = (ARUICombTextView)getChildAt(j);
    if ((localARUICombTextView != null) && (localARUICombTextView.getText().length() == 0)) {
      i += 1;
    }
    for (;;)
    {
      j += 1;
      break;
    }
  }
  
  public float getTextWidth(String paramString)
  {
    return 0.0F;
  }
  
  protected String getValue()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    int j = getChildCount();
    int i = 0;
    for (;;)
    {
      if (i >= j) {}
      Object localObject;
      do
      {
        return localStringBuilder.toString();
        localObject = (ARUICombTextView)getChildAt(i);
        if (localObject == null) {
          break;
        }
        localObject = ((ARUICombTextView)localObject).getText();
      } while (((Editable)localObject).length() == 0);
      localStringBuilder.append(((Editable)localObject).charAt(0));
      i += 1;
    }
  }
  
  public String getValueProperty()
  {
    return getValue();
  }
  
  public void initialZoomLevel(double paramDouble) {}
  
  protected void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    this.mAttachedToWindow = true;
    showDatePickerViewIfFieldIsDate();
  }
  
  public void onDateSet(String paramString)
  {
    this.mDateView = null;
    setValue(paramString);
  }
  
  protected void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    this.mAttachedToWindow = false;
    if (this.mDateView != null) {
      this.mDateView.dismiss();
    }
    removeAllViews();
  }
  
  protected void onFocusChanged(boolean paramBoolean, int paramInt, Rect paramRect)
  {
    super.onFocusChanged(paramBoolean, paramInt, paramRect);
    if ((paramBoolean) && (this.mFocusedChildView != null)) {
      this.mFocusedChildView.requestFocus();
    }
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    super.onMeasure(paramInt1, paramInt2);
    setMeasuredDimension(this.mWidth, this.mHeight);
  }
  
  public void panEnded() {}
  
  public void panStarted() {}
  
  public boolean setBoxValue(int paramInt, CharSequence paramCharSequence)
  {
    String str = getValue();
    setBoxValueInternal(paramInt, paramCharSequence);
    paramCharSequence = getValue();
    return ARUITextBasedView.onTextWillChange(this, this.mField, str, paramInt, 0, paramCharSequence, paramInt, 1);
  }
  
  public void setCursor(int paramInt)
  {
    if (paramInt == getChildCount() - getNumberOfEmptyBoxes())
    {
      setFocus(paramInt - 1, false);
      return;
    }
    setFocus(paramInt, true);
  }
  
  public void setDoNotScrollProperty(boolean paramBoolean) {}
  
  public void setFocus(int paramInt, boolean paramBoolean)
  {
    ARUICombTextView localARUICombTextView = getBox(paramInt);
    if (localARUICombTextView != null)
    {
      localARUICombTextView.requestFocus();
      if (paramBoolean) {
        localARUICombTextView.setSelection(0);
      }
    }
    else
    {
      return;
    }
    localARUICombTextView.setSelection(localARUICombTextView.getText().length());
  }
  
  public void setFocusedChildView(View paramView)
  {
    this.mFocusedChildView = paramView;
  }
  
  public void setFontProperty(String paramString, float paramFloat)
  {
    int j = getChildCount();
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        return;
      }
      ARUICombTextView localARUICombTextView = (ARUICombTextView)getChildAt(i);
      if (localARUICombTextView != null) {
        localARUICombTextView.setFontProperty(paramString, paramFloat);
      }
      i += 1;
    }
  }
  
  public void setFormatProperty(int paramInt)
  {
    int j = getChildCount();
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        return;
      }
      ARUICombTextView localARUICombTextView = (ARUICombTextView)getChildAt(i);
      if (localARUICombTextView != null) {
        localARUICombTextView.setFormatProperty(paramInt);
      }
      i += 1;
    }
  }
  
  public void setMaxLenProperty(int paramInt) {}
  
  public void setMultilineProperty(boolean paramBoolean) {}
  
  public void setPaddingProperty(int paramInt)
  {
    int j = getChildCount();
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        return;
      }
      ARUICombTextView localARUICombTextView = (ARUICombTextView)getChildAt(i);
      if (localARUICombTextView != null) {
        localARUICombTextView.setPadding(paramInt, paramInt, paramInt, paramInt);
      }
      i += 1;
    }
  }
  
  public void setPasswordProperty(boolean paramBoolean) {}
  
  public void setQuaddingProperty(int paramInt) {}
  
  public void setRotationProperty(int paramInt) {}
  
  public void setSpellCheckProperty(boolean paramBoolean) {}
  
  public void setTextColorProperty(float paramFloat1, float paramFloat2, float paramFloat3)
  {
    int j = getChildCount();
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        return;
      }
      ARUICombTextView localARUICombTextView = (ARUICombTextView)getChildAt(i);
      if (localARUICombTextView != null) {
        localARUICombTextView.setTextColorProperty(paramFloat1, paramFloat2, paramFloat3);
      }
      i += 1;
    }
  }
  
  protected void setTextSize(float paramFloat)
  {
    int j = getChildCount();
    int i = 0;
    for (;;)
    {
      if (i >= j) {
        return;
      }
      ARUICombTextView localARUICombTextView = (ARUICombTextView)getChildAt(i);
      if (localARUICombTextView != null) {
        localARUICombTextView.setTextSize(0, paramFloat);
      }
      i += 1;
    }
  }
  
  protected void setValue(String paramString)
  {
    deleteValue();
    setValueProperty(paramString);
  }
  
  public void setValueProperty(final String paramString)
  {
    int j = Math.min(getChildCount(), paramString.length());
    deleteValue();
    int i = 0;
    for (;;)
    {
      if (i >= j)
      {
        i -= 1;
        if (this.mAttachedToWindow) {
          break;
        }
        paramString = (ARUICombTextView)getChildAt(i);
        if (paramString != null) {
          paramString.post(new Runnable()
          {
            public void run()
            {
              paramString.requestFocus();
              Editable localEditable = paramString.getText();
              if ((localEditable != null) && (localEditable.length() == 1)) {
                paramString.setSelection(1);
              }
            }
          });
        }
        return;
      }
      setBoxValue(i, paramString.subSequence(i, i + 1));
      i += 1;
    }
    setFocus(i, false);
  }
}
