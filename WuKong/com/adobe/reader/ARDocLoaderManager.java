package com.adobe.reader;

import android.widget.Toast;
import java.io.File;
import java.util.Hashtable;

public class ARDocLoaderManager
{
  private static final int DISPLAY_DOC_LOADER_PROGRESS_BAR_DELAY = 120;
  private ARViewer mARContext;
  private long mDocLoader;
  private String mDocPath;
  private ARLastViewedPosition mInitialPosition;
  private boolean mShowAttachmentsPane = false;
  
  public ARDocLoaderManager(ARViewer paramARViewer, String paramString, ARLastViewedPosition paramARLastViewedPosition, boolean paramBoolean)
  {
    this.mARContext = paramARViewer;
    this.mDocPath = paramString;
    this.mDocLoader = create(this.mDocPath);
    if (paramARLastViewedPosition != null)
    {
      paramARViewer = paramARLastViewedPosition;
      if (paramARLastViewedPosition.mViewMode != 0) {}
    }
    else
    {
      paramARViewer = new ARLastViewedPosition();
    }
    this.mInitialPosition = paramARViewer;
    this.mShowAttachmentsPane = paramBoolean;
    this.mARContext.sendShowProgressDialogMessage(120, ARViewer.PROGRESS_DIALOG_CONTEXT.AR_DOC_LOADER);
  }
  
  private native long create(String paramString);
  
  private ARPortfolioViewManager createPortfolioViewManager()
  {
    String str = this.mARContext.getAttachmentsDir();
    File localFile = new File(str);
    if ((localFile != null) && ((!localFile.exists()) || (!localFile.isDirectory())))
    {
      localFile.delete();
      localFile.mkdirs();
    }
    return new ARPortfolioViewManager(this.mDocLoader, str);
  }
  
  private native void destroy(long paramLong);
  
  private String getDocumentTypeName(ARDocViewManager paramARDocViewManager)
  {
    if (paramARDocViewManager.isXFAForm())
    {
      if (paramARDocViewManager.isXFAFormDynamic()) {
        return "Dynamic XFA Form Document";
      }
      return "Static XFA Form Document";
    }
    if (paramARDocViewManager.isAcroForm()) {
      return "Acroform Document";
    }
    return "Standard Document";
  }
  
  private String getSecurityHandlerName(int paramInt)
  {
    switch (paramInt)
    {
    default: 
      return "UNKNOWN";
    case 0: 
      return "None";
    case 1: 
      if (wasDocumentPasswordRequested()) {
        return "Standard : Password Required";
      }
      return "Standard : Password Not Required";
    }
    return "LCRM";
  }
  
  private native void markAsClosed(long paramLong);
  
  private native void swapFilePath(long paramLong, String paramString);
  
  private native boolean wasDocumentPasswordRequested(long paramLong);
  
  public String getDocPath()
  {
    return this.mDocPath;
  }
  
  public void getDocumentPassword(long paramLong)
  {
    this.mARContext.getDocumentPassword(paramLong);
  }
  
  public ARLastViewedPosition getInitialPosition()
  {
    return this.mInitialPosition;
  }
  
  public void handleFatalError()
  {
    this.mARContext.sendHideProgressDialogMessage();
    this.mARContext.handleFatalError();
  }
  
  public void logAnalyticsInfo()
  {
    Object localObject = this.mARContext.getPageView().getDocViewManager();
    int i;
    if (localObject != null)
    {
      localObject = ((ARDocViewManager)localObject).getAnalyticsFlagStatusArray();
      i = 0;
    }
    for (;;)
    {
      if (i >= ARAnalytics.FLAG_NAMES.length) {
        return;
      }
      if (localObject[i] != 0) {
        this.mARContext.getARAnalytics().track(ARAnalytics.FLAG_NAMES[i]);
      }
      i += 1;
    }
  }
  
  public void markAsClosed()
  {
    markAsClosed(this.mDocLoader);
  }
  
  public void portfolioLoaded()
  {
    ARPortfolioViewManager localARPortfolioViewManager = createPortfolioViewManager();
    this.mARContext.portfolioDocLoaded(this, localARPortfolioViewManager);
    this.mARContext.sendHideProgressDialogMessage();
    Hashtable localHashtable = new Hashtable();
    localHashtable.put("prop2", "Portfolio Document");
    localHashtable.put("prop3", getSecurityHandlerName(localARPortfolioViewManager.getSecurityHandlerType()));
    this.mARContext.getARAnalytics().trackWithExtraData("Document Opened", localHashtable);
  }
  
  public void release()
  {
    destroy(this.mDocLoader);
    this.mDocLoader = 0L;
  }
  
  public void showSavingIndicator()
  {
    if (!this.mARContext.mDocOpenedFromCloud) {
      Toast.makeText(this.mARContext, this.mARContext.getString(2131361925), 0).show();
    }
  }
  
  public void standardDocLoaded()
  {
    Object localObject1 = this.mARContext.getPageView();
    localObject1 = new ARDocViewManager((PageView)localObject1, this.mDocLoader, this.mDocPath, ((PageView)localObject1).getScreenWidth(), ((PageView)localObject1).getScreenHeight());
    ((ARDocViewManager)localObject1).setNightModeEnabled(ARApp.getNightModePreference());
    Object localObject2 = createPortfolioViewManager();
    this.mARContext.standardDocLoaded(this, (ARDocViewManager)localObject1, this.mInitialPosition, (ARPortfolioViewManager)localObject2, this.mShowAttachmentsPane);
    this.mARContext.sendHideProgressDialogMessage();
    if ((ARAutomation.PDF_TO_PNG) && (localObject1 != null)) {
      ARAutomation.convertPDFtoImages(((ARDocViewManager)localObject1).getNativeDocViewManager());
    }
    localObject2 = new Hashtable();
    ((Hashtable)localObject2).put("prop1", String.valueOf(((ARDocViewManager)localObject1).getNumPages()));
    ((Hashtable)localObject2).put("prop2", getDocumentTypeName((ARDocViewManager)localObject1));
    ((Hashtable)localObject2).put("prop3", getSecurityHandlerName(((ARDocViewManager)localObject1).getSecurityHandlerType()));
    if (((ARDocViewManager)localObject1).hasUniquePageSizeAndGeometry()) {}
    for (localObject1 = "Unique";; localObject1 = "Not Unique")
    {
      ((Hashtable)localObject2).put("prop4", localObject1);
      this.mARContext.getARAnalytics().trackWithExtraData("Document Opened", (Hashtable)localObject2);
      return;
    }
  }
  
  public void swapFilePath(String paramString)
  {
    swapFilePath(this.mDocLoader, paramString);
    this.mDocPath = paramString;
  }
  
  public void updateLastViewedPosition(int paramInt1, double paramDouble, int paramInt2, int paramInt3, float paramFloat, int paramInt4)
  {
    ARLastViewedPosition localARLastViewedPosition = new ARLastViewedPosition(paramInt1, paramDouble, paramInt2, paramInt3, paramFloat, paramInt4);
    this.mARContext.updatePositionInRecentlyViewed(this.mDocPath, localARLastViewedPosition);
  }
  
  public boolean wasDocumentPasswordRequested()
  {
    return wasDocumentPasswordRequested(this.mDocLoader);
  }
}
