package com.adobe.reader;

import android.os.SystemClock;
import android.view.GestureDetector.SimpleOnGestureListener;
import android.view.MotionEvent;

public class ARGestureListener
  extends GestureDetector.SimpleOnGestureListener
{
  private static final float HOTSPOT_FACTOR = 0.18F;
  private static final double HOTSPOT_MAX_LIMIT = 150.0D;
  private static final int PAGE_FLIP_FLING_THRESHOLD = 500;
  private static final double SNAP_FLICK_THRESHOLD = 1.5D;
  public static final int TIME_BEFORE_ALLOWING_SCROLL_AFTER_PINCH = 500;
  private static final double VELOCITY_ADJUSTMENT_FACTOR_SMARTPHONE = 0.75D;
  private static final double VELOCITY_ADJUSTMENT_FACTOR_TABLET = 0.9D;
  private ARGestureHandler mGestureHandler;
  private double mVelocityAdjustmentFactor = 1.0D;
  private ARViewer mViewer;
  
  public ARGestureListener(ARViewer paramARViewer, ARGestureHandler paramARGestureHandler)
  {
    this.mViewer = paramARViewer;
    this.mGestureHandler = paramARGestureHandler;
    this.mVelocityAdjustmentFactor = 0.75D;
    if (this.mViewer.isRunningOnTablet()) {
      this.mVelocityAdjustmentFactor = 0.9D;
    }
  }
  
  private ARGestureHandler.TapZone getTapZone(float paramFloat1, float paramFloat2)
  {
    double d1 = 150.0D;
    ARGestureHandler.TapZone localTapZone = ARGestureHandler.TapZone.kNormal;
    double d2 = this.mViewer.getTopBarHeight();
    if (paramFloat2 < d2) {
      return localTapZone;
    }
    d2 = this.mViewer.getScreenWidth() * 0.18F;
    if (d2 > 150.0D) {}
    for (;;)
    {
      if (paramFloat1 < d1) {
        return ARGestureHandler.TapZone.kTapLeftZone;
      }
      if (paramFloat1 <= this.mViewer.getScreenWidth() - d1) {
        break;
      }
      return ARGestureHandler.TapZone.kTapRightZone;
      d1 = d2;
    }
  }
  
  public boolean onDoubleTap(MotionEvent paramMotionEvent)
  {
    ARGestureHandler.TapZone localTapZone = getTapZone(paramMotionEvent.getX(), paramMotionEvent.getY());
    if ((localTapZone == ARGestureHandler.TapZone.kNormal) || (!this.mGestureHandler.handleTapForView(localTapZone))) {
      this.mGestureHandler.handleDoubleTap(paramMotionEvent.getX(), paramMotionEvent.getY());
    }
    return true;
  }
  
  public boolean onDown(MotionEvent paramMotionEvent)
  {
    this.mGestureHandler.handleDown(paramMotionEvent.getX(), paramMotionEvent.getY());
    return true;
  }
  
  public boolean onFling(MotionEvent paramMotionEvent1, MotionEvent paramMotionEvent2, float paramFloat1, float paramFloat2)
  {
    boolean bool = false;
    if (paramMotionEvent2.getPointerCount() > 1) {
      return false;
    }
    if (SystemClock.uptimeMillis() - this.mGestureHandler.getLastPinchGestureTime() < 500L) {
      return false;
    }
    float f2 = Math.abs(paramFloat1);
    float f3 = Math.abs(paramFloat2);
    float f1;
    if (f2 > f3 * 1.5D)
    {
      f1 = 0.0F;
      paramFloat1 = (float)(paramFloat1 * this.mVelocityAdjustmentFactor);
      paramFloat2 = (float)(f1 * this.mVelocityAdjustmentFactor);
      if (paramFloat1 <= 500.0F) {
        break label150;
      }
      bool = this.mGestureHandler.handleLeftFling();
    }
    for (;;)
    {
      if (!bool) {
        this.mGestureHandler.handleFling(paramFloat1, paramFloat2);
      }
      return true;
      f1 = paramFloat2;
      if (f3 <= f2 * 1.5D) {
        break;
      }
      paramFloat1 = 0.0F;
      f1 = paramFloat2;
      break;
      label150:
      if (paramFloat1 < -500.0F) {
        bool = this.mGestureHandler.handleRightFling();
      }
    }
  }
  
  public void onLongPress(MotionEvent paramMotionEvent)
  {
    if (paramMotionEvent.getPointerCount() > 1) {
      return;
    }
    this.mGestureHandler.handleLongPress(paramMotionEvent);
  }
  
  public boolean onScroll(MotionEvent paramMotionEvent1, MotionEvent paramMotionEvent2, float paramFloat1, float paramFloat2)
  {
    if (paramMotionEvent2.getPointerCount() > 1) {}
    while (SystemClock.uptimeMillis() - this.mGestureHandler.getLastPinchGestureTime() < 500L) {
      return false;
    }
    return this.mGestureHandler.handleScroll(paramMotionEvent1, paramMotionEvent2);
  }
  
  public boolean onSingleTapConfirmed(MotionEvent paramMotionEvent)
  {
    if (SystemClock.uptimeMillis() - this.mGestureHandler.getLastPinchGestureTime() < 500L) {}
    while (this.mGestureHandler.handleTapForDocument(paramMotionEvent.getX(), paramMotionEvent.getY())) {
      return true;
    }
    paramMotionEvent = getTapZone(paramMotionEvent.getX(), paramMotionEvent.getY());
    this.mGestureHandler.handleTapForView(paramMotionEvent);
    return true;
  }
}
