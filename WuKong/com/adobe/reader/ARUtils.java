package com.adobe.reader;

import android.app.Activity;
import android.content.Context;
import android.content.res.Resources;
import android.content.res.Resources.NotFoundException;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.View;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.webkit.MimeTypeMap;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

public class ARUtils
{
  private static final int STREAM_FETCH_BUFFER_SIZE = 8192;
  private static final String STR_EXTENSION_DOCX = ".docx";
  private static final String STR_EXTENSION_PPTX = ".pptx";
  private static final String STR_EXTENSION_XLSX = ".xlsx";
  private static final String STR_FOR_EXCEL_MIME_TYPE_COMPARISON = "excel";
  private static final String STR_FOR_IMAGE_MIME_TYPE_COMPARISON = "image";
  private static final String STR_FOR_PPT_MIME_TYPE_COMPARISON = "powerpoint";
  private static final String STR_FOR_TEXT_MIME_TYPE_COMPARISON = "text";
  private static final String STR_FOR_WORD_MIME_TYPE_COMPARISON = "application/msword";
  private static MimeTypeMap sMimeTypeMap = ;
  
  public ARUtils() {}
  
  public static boolean compareDoubleValues(double paramDouble1, double paramDouble2)
  {
    return Math.abs(paramDouble1 - paramDouble2) < 0.001D;
  }
  
  public static File copyGettingStarted(Context paramContext)
  {
    boolean bool = ARFileBrowserUtils.isPermanentStorageAvailable();
    int j = 1;
    Object localObject = null;
    int i = j;
    if (bool)
    {
      File localFile = copyGettingStartedFileToPermanentStorage(paramContext);
      localObject = localFile;
      i = j;
      if (localFile != null)
      {
        i = 0;
        localObject = localFile;
      }
    }
    if (i != 0) {
      localObject = copyGettingStartedFileToTemporaryStorage(paramContext);
    }
    return localObject;
  }
  
  private static File copyGettingStarted(Context paramContext, String paramString)
  {
    if (paramString == null) {}
    File localFile;
    do
    {
      return null;
      localFile = new File(paramString);
    } while (!copyGettingStartedToSDCard(paramContext, paramString));
    return localFile;
  }
  
  private static File copyGettingStartedFileToPermanentStorage(Context paramContext)
  {
    String str = getGettingStartedDocPath(paramContext);
    if (str == null) {
      return null;
    }
    return copyGettingStarted(paramContext, str);
  }
  
  private static File copyGettingStartedFileToTemporaryStorage(Context paramContext)
  {
    try
    {
      String str = paramContext.getCacheDir().getCanonicalPath();
      paramContext = copyGettingStarted(paramContext, str + File.separator + paramContext.getString(2131361978) + paramContext.getString(2131361897));
      if ((paramContext != null) && (paramContext.exists())) {
        paramContext.deleteOnExit();
      }
      return paramContext;
    }
    catch (IOException paramContext) {}
    return null;
  }
  
  public static boolean copyGettingStartedToSDCard(Context paramContext, String paramString)
  {
    try
    {
      paramContext = paramContext.getResources().openRawResource(2131034117);
      boolean bool = copyInputStreamDeleteOnFail(paramContext, paramString);
      paramContext.close();
      return bool;
    }
    catch (Resources.NotFoundException paramContext)
    {
      return false;
    }
    catch (IOException paramContext) {}
    return false;
  }
  
  public static boolean copyInputStream(InputStream paramInputStream, String paramString)
  {
    if ((paramString == null) || (paramInputStream == null)) {
      return false;
    }
    try
    {
      paramString = new FileOutputStream(paramString);
      byte[] arrayOfByte = new byte['?'];
      int i = paramInputStream.read(arrayOfByte, 0, 8191);
      arrayOfByte['?'] = 0;
      System.currentTimeMillis();
      for (;;)
      {
        if (-1 == i)
        {
          System.currentTimeMillis();
          paramString.close();
          return true;
        }
        paramString.write(arrayOfByte, 0, i);
        i = paramInputStream.read(arrayOfByte, 0, 8191);
      }
      return false;
    }
    catch (IndexOutOfBoundsException paramInputStream)
    {
      return false;
    }
    catch (IOException paramInputStream)
    {
      return false;
    }
    catch (FileNotFoundException paramInputStream) {}
  }
  
  public static boolean copyInputStreamDeleteOnFail(InputStream paramInputStream, String paramString)
  {
    boolean bool1;
    if (paramString == null) {
      bool1 = false;
    }
    boolean bool2;
    do
    {
      do
      {
        do
        {
          return bool1;
          bool2 = copyInputStream(paramInputStream, paramString);
          bool1 = bool2;
        } while (bool2);
        paramInputStream = new File(paramString);
        bool1 = bool2;
      } while (!paramInputStream.exists());
      bool1 = bool2;
    } while (!paramInputStream.isFile());
    paramInputStream.delete();
    return bool2;
  }
  
  public static void deleteAllFilesInDirectory(File paramFile, boolean paramBoolean)
  {
    File[] arrayOfFile;
    int i;
    if ((paramFile != null) && (paramFile.exists()))
    {
      arrayOfFile = paramFile.listFiles();
      i = 0;
      if (i < arrayOfFile.length) {}
    }
    else
    {
      if ((paramFile != null) && (paramBoolean)) {
        paramFile.delete();
      }
      return;
    }
    if (arrayOfFile[i].isDirectory()) {
      deleteAllFilesInDirectory(arrayOfFile[i], true);
    }
    for (;;)
    {
      i += 1;
      break;
      arrayOfFile[i].delete();
    }
  }
  
  public static void deleteCacheFiles(String paramString)
  {
    try
    {
      paramString = new File(paramString);
      if ((!paramString.exists()) || (!paramString.isDirectory()) || (!paramString.canRead())) {}
      for (;;)
      {
        return;
        paramString = paramString.listFiles(ARFileBrowserUtils.PDF_FILE_FILTER);
        if (paramString.length != 0)
        {
          int j = paramString.length;
          int i = 0;
          while (i < j)
          {
            Object localObject = paramString[i];
            if ((localObject != null) && (localObject.exists())) {
              localObject.delete();
            }
            i += 1;
          }
        }
      }
      return;
    }
    catch (NullPointerException paramString) {}
  }
  
  private static int getDrawableIconForFile(String paramString, boolean paramBoolean)
  {
    int j = 2130837693;
    if (paramBoolean) {}
    for (int i = 2130837693;; i = 2130837694)
    {
      int k = paramString.lastIndexOf('.');
      String str = null;
      if (k >= 0) {
        str = sMimeTypeMap.getMimeTypeFromExtension(paramString.substring(k + 1).toLowerCase());
      }
      paramString = paramString.toLowerCase();
      if (paramString.endsWith(".pdf")) {
        if (paramBoolean) {
          i = 2130837761;
        }
      }
      do
      {
        return i;
        return 2130837764;
        if (paramString.endsWith(".docx"))
        {
          if (paramBoolean) {
            return 2130837823;
          }
          return 2130837691;
        }
        if (paramString.endsWith(".pptx"))
        {
          if (paramBoolean) {
            return 2130837767;
          }
          return 2130837689;
        }
        if (paramString.endsWith(".xlsx"))
        {
          if (paramBoolean) {
            return 2130837822;
          }
          return 2130837692;
        }
        if (str == null) {
          break;
        }
        if (str.startsWith("image"))
        {
          if (paramBoolean) {
            return 2130837710;
          }
          return 2130837688;
        }
        if (str.startsWith("text"))
        {
          if (paramBoolean) {
            return 2130837696;
          }
          return 2130837690;
        }
        if (str.equals("application/msword"))
        {
          if (paramBoolean) {
            return 2130837823;
          }
          return 2130837691;
        }
        if (str.endsWith("powerpoint"))
        {
          if (paramBoolean) {
            return 2130837767;
          }
          return 2130837689;
        }
        if (str.endsWith("excel"))
        {
          if (paramBoolean) {
            return 2130837822;
          }
          return 2130837692;
        }
        i = j;
      } while (paramBoolean);
      return 2130837694;
      return i;
    }
  }
  
  public static int getFileBrowserDrawableIconForFile(String paramString)
  {
    return getDrawableIconForFile(paramString, false);
  }
  
  public static String getGettingStartedDocPath(Context paramContext)
  {
    try
    {
      File localFile = ARFileBrowserUtils.getPermanentStorageDownloadDirectory();
      if (localFile == null) {
        return null;
      }
      localFile.mkdirs();
      paramContext = localFile.getCanonicalPath() + File.separator + paramContext.getString(2131361978) + paramContext.getString(2131361897);
      return paramContext;
    }
    catch (IOException paramContext) {}
    return null;
  }
  
  public static int getProgressViewDrawableIconForFile(String paramString)
  {
    return getDrawableIconForFile(paramString, true);
  }
  
  public static float getScreenDPI(Activity paramActivity)
  {
    int i = 1;
    DisplayMetrics localDisplayMetrics = new DisplayMetrics();
    paramActivity.getWindowManager().getDefaultDisplay().getMetrics(localDisplayMetrics);
    float f = localDisplayMetrics.xdpi;
    if (localDisplayMetrics.ydpi < localDisplayMetrics.xdpi) {
      f = localDisplayMetrics.ydpi;
    }
    switch (localDisplayMetrics.densityDpi)
    {
    default: 
      i = 0;
    }
    for (;;)
    {
      if (i == 0) {
        f = localDisplayMetrics.densityDpi;
      }
      return f;
      if (f <= 160.0F) {
        break;
      }
      continue;
      if ((f <= 120.0F) || (f > 160.0F)) {
        break;
      }
      continue;
      if ((f <= 0.0F) || (f > 120.0F)) {
        break;
      }
    }
  }
  
  public static void hideKeyboard(View paramView)
  {
    InputMethodManager localInputMethodManager = (InputMethodManager)paramView.getContext().getSystemService("input_method");
    if (localInputMethodManager.isActive()) {
      localInputMethodManager.hideSoftInputFromWindow(paramView.getWindowToken(), 0);
    }
  }
  
  public static void showKeyboard(View paramView)
  {
    ((InputMethodManager)paramView.getContext().getSystemService("input_method")).showSoftInput(paramView, 0);
  }
}
