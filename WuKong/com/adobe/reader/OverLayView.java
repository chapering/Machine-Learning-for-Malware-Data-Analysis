package com.adobe.reader;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.Canvas;
import android.graphics.DashPathEffect;
import android.graphics.Paint;
import android.graphics.Paint.Cap;
import android.graphics.Paint.Join;
import android.graphics.Paint.Style;
import android.graphics.Path;
import android.graphics.PorterDuff.Mode;
import android.graphics.Rect;
import android.graphics.RectF;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.MeasureSpec;
import android.widget.Button;
import android.widget.Toast;
import java.util.ArrayList;

public class OverLayView
  extends View
{
  public static final int BOUNDING_BOX_PADDING = 5;
  private static final float DEFAULT_STROKE_WIDTH = 1.0F;
  public static final int HEIGHT_STATUS_BAR = 48;
  public static final int INK_SIGNATURE_DRAWING_VIEW_OFFSET = 8;
  private static final float TOUCH_TOLERANCE = 1.0F;
  public static int mScreenWidthForInkSignature = -1;
  private Bitmap mBitmap;
  private Paint mBitmapPaint;
  private boolean mBoundingBoxDrawn = false;
  private Canvas mCanvas;
  private boolean mDisableTouch = false;
  private ArrayList<Float> mGestureInkList;
  private int mGestureStartPoint = -1;
  public ArrayList<ArrayList<Float>> mInkList;
  private PARInkSignatureCommentUIHandlerAndroid mInkSignatureHandler = null;
  private boolean mIsFirstBoundingRect = true;
  private int mPageNum = -1;
  private Path mPath;
  private int mPrevHorizontalGutter = 0;
  private Rect mPrevPageRect = new Rect();
  private int mPrevVerticalGutter = 0;
  public float mRectBottom = 0.0F;
  public float mRectLeft = 0.0F;
  public float mRectRight = 0.0F;
  public float mRectTop = 0.0F;
  public ArrayList<ArrayList<Float>> mRedoInkList;
  private int mStrokeColor;
  private float mStrokeWidthInDocSpace;
  private float mTouchDownPointX;
  private float mTouchDownPointY;
  private float mX;
  private float mY;
  
  public OverLayView(Context paramContext)
  {
    super(paramContext);
    initializeOverlayView();
  }
  
  public OverLayView(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    initializeOverlayView();
  }
  
  public OverLayView(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    initializeOverlayView();
  }
  
  private void clearBoundingBoxAndHideContextMenu()
  {
    if (this.mInkSignatureHandler != null)
    {
      if (this.mBoundingBoxDrawn)
      {
        this.mCanvas.drawColor(0, PorterDuff.Mode.CLEAR);
        this.mBoundingBoxDrawn = false;
        redrawPath();
      }
      this.mInkSignatureHandler.hideContextMenu();
    }
  }
  
  private void drawPointIfRequired(float paramFloat1, float paramFloat2)
  {
    float f1 = Math.abs(paramFloat1 - this.mTouchDownPointX);
    float f2 = Math.abs(paramFloat2 - this.mTouchDownPointY);
    if ((f1 < 1.0F) && (f2 < 1.0F))
    {
      this.mX = paramFloat1;
      this.mY = paramFloat2;
      if ((f1 < 0.001D) && (f2 < 0.001D)) {
        this.mY = (paramFloat2 - 1.0F);
      }
      this.mGestureInkList.add(Float.valueOf(this.mX));
      this.mGestureInkList.add(Float.valueOf(this.mY));
      setBoundingRect(this.mX, this.mY);
    }
  }
  
  private void redrawPath(Canvas paramCanvas)
  {
    int k = this.mInkList.size();
    int i = 0;
    if (i >= k)
    {
      if ((k > 0) && (this.mInkSignatureHandler != null)) {
        this.mInkSignatureHandler.startTimerForBoundingBox();
      }
      return;
    }
    ArrayList localArrayList = (ArrayList)this.mInkList.get(i);
    touch_start(((Float)localArrayList.get(0)).floatValue(), ((Float)localArrayList.get(1)).floatValue());
    int j = 2;
    for (;;)
    {
      if (j >= localArrayList.size())
      {
        this.mPath.lineTo(this.mX, this.mY);
        paramCanvas.drawPath(this.mPath, this.mBitmapPaint);
        this.mPath.reset();
        i += 1;
        break;
      }
      touch_move(((Float)localArrayList.get(j)).floatValue(), ((Float)localArrayList.get(j + 1)).floatValue());
      j += 2;
    }
  }
  
  public static void scaleAndTranslatePath(ArrayList<ArrayList<Float>> paramArrayList, RectF paramRectF, float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4)
  {
    int k = paramArrayList.size();
    int i = 0;
    if (i >= k)
    {
      paramRectF.left *= paramFloat1;
      paramRectF.top *= paramFloat2;
      paramRectF.right *= paramFloat1;
      paramRectF.bottom *= paramFloat2;
      return;
    }
    ArrayList localArrayList = (ArrayList)paramArrayList.get(i);
    int j = 0;
    for (;;)
    {
      if (j >= localArrayList.size())
      {
        i += 1;
        break;
      }
      localArrayList.set(j, Float.valueOf(((Float)localArrayList.get(j)).floatValue() * paramFloat1 + paramFloat3));
      localArrayList.set(j + 1, Float.valueOf(((Float)localArrayList.get(j + 1)).floatValue() * paramFloat2 + paramFloat4));
      j += 2;
    }
  }
  
  private void setBoundingRect(float paramFloat1, float paramFloat2)
  {
    if (paramFloat1 < this.mRectLeft) {
      this.mRectLeft = paramFloat1;
    }
    do
    {
      while (paramFloat2 < this.mRectTop)
      {
        this.mRectTop = paramFloat2;
        return;
        if (paramFloat1 > this.mRectRight) {
          this.mRectRight = paramFloat1;
        }
      }
    } while (paramFloat2 <= this.mRectBottom);
    this.mRectBottom = paramFloat2;
  }
  
  private void touch_move(float paramFloat1, float paramFloat2)
  {
    float f1 = Math.abs(paramFloat1 - this.mX);
    float f2 = Math.abs(paramFloat2 - this.mY);
    if ((f1 >= 1.0F) || (f2 >= 1.0F))
    {
      this.mPath.quadTo(this.mX, this.mY, (this.mX + paramFloat1) / 2.0F, (this.mY + paramFloat2) / 2.0F);
      this.mX = paramFloat1;
      this.mY = paramFloat2;
    }
    this.mGestureInkList.add(Float.valueOf(this.mX));
    this.mGestureInkList.add(Float.valueOf(this.mY));
    setBoundingRect(this.mX, this.mY);
  }
  
  private void touch_start(float paramFloat1, float paramFloat2)
  {
    Object localObject = (CommentingToolbar)((ARViewer)getContext()).getToolbar().findViewById(2131493133);
    if (localObject != null)
    {
      localObject = ((CommentingToolbar)localObject).getInstructionToast();
      if (localObject != null) {
        ((Toast)localObject).cancel();
      }
    }
    clearBoundingBoxAndHideContextMenu();
    this.mPath.reset();
    this.mPath.moveTo(paramFloat1, paramFloat2);
    this.mX = paramFloat1;
    this.mY = paramFloat2;
    this.mTouchDownPointX = paramFloat1;
    this.mTouchDownPointY = paramFloat2;
    this.mGestureInkList = new ArrayList();
    this.mGestureInkList.add(Float.valueOf(this.mX));
    this.mGestureInkList.add(Float.valueOf(this.mY));
    if (this.mIsFirstBoundingRect)
    {
      paramFloat1 = this.mX;
      this.mRectRight = paramFloat1;
      this.mRectLeft = paramFloat1;
      paramFloat1 = this.mY;
      this.mRectBottom = paramFloat1;
      this.mRectTop = paramFloat1;
      this.mIsFirstBoundingRect = false;
      setStartPointY((int)this.mY);
      return;
    }
    setBoundingRect(this.mX, this.mY);
  }
  
  private void touch_up(float paramFloat1, float paramFloat2)
  {
    drawPointIfRequired(paramFloat1, paramFloat2);
    this.mPath.lineTo(this.mX, this.mY);
    if (this.mCanvas != null) {
      this.mCanvas.drawPath(this.mPath, this.mBitmapPaint);
    }
    this.mPath.reset();
    this.mInkList.add(this.mGestureInkList);
    if (this.mRedoInkList.size() != 0) {
      this.mRedoInkList.clear();
    }
    setToolbarState();
    if (this.mInkSignatureHandler != null) {
      this.mInkSignatureHandler.startTimerForBoundingBox();
    }
  }
  
  public void clear()
  {
    this.mX = 0.0F;
    this.mY = 0.0F;
    this.mRectLeft = 0.0F;
    this.mRectTop = 0.0F;
    this.mRectRight = 0.0F;
    this.mRectBottom = 0.0F;
    this.mIsFirstBoundingRect = true;
    this.mBoundingBoxDrawn = false;
    if (this.mCanvas != null) {
      this.mCanvas.drawColor(0, PorterDuff.Mode.CLEAR);
    }
    this.mPath.reset();
    this.mInkList = new ArrayList();
    invalidate();
  }
  
  public void drawBoundingRect()
  {
    if (this.mCanvas == null) {
      return;
    }
    Paint localPaint = new Paint();
    localPaint.setAntiAlias(true);
    localPaint.setDither(true);
    localPaint.setColor(this.mBitmapPaint.getColor());
    localPaint.setStyle(Paint.Style.STROKE);
    localPaint.setStrokeJoin(Paint.Join.MITER);
    localPaint.setStrokeCap(Paint.Cap.BUTT);
    localPaint.setStrokeWidth(2.0F);
    localPaint.setPathEffect(new DashPathEffect(new float[] { 10.0F, 5.0F }, 10.0F));
    Rect localRect = new Rect((int)this.mRectLeft, (int)this.mRectTop, (int)this.mRectRight, (int)this.mRectBottom);
    localRect.inset(-5, -5);
    this.mCanvas.drawRect(localRect.left, localRect.top, localRect.right, localRect.bottom, localPaint);
    this.mBoundingBoxDrawn = true;
    invalidate();
  }
  
  public int getStartPointY()
  {
    return this.mGestureStartPoint;
  }
  
  public int getStrokeColor()
  {
    return this.mStrokeColor;
  }
  
  public float getStrokeWidthInDocSpace()
  {
    return this.mStrokeWidthInDocSpace;
  }
  
  public void initializeInkList(ArrayList<ArrayList<Float>> paramArrayList)
  {
    this.mInkList = paramArrayList;
  }
  
  public void initializeOverlayView()
  {
    this.mStrokeWidthInDocSpace = 1.0F;
    this.mStrokeColor = -65536;
    this.mPath = new Path();
    this.mBitmapPaint = new Paint();
    this.mBitmapPaint.setAntiAlias(true);
    this.mBitmapPaint.setDither(true);
    this.mBitmapPaint.setColor(this.mStrokeColor);
    this.mBitmapPaint.setStyle(Paint.Style.STROKE);
    this.mBitmapPaint.setStrokeJoin(Paint.Join.ROUND);
    this.mBitmapPaint.setStrokeCap(Paint.Cap.ROUND);
    this.mInkList = new ArrayList();
    this.mRedoInkList = new ArrayList();
    this.mX = 0.0F;
    this.mY = 0.0F;
    this.mTouchDownPointX = 0.0F;
    this.mTouchDownPointY = 0.0F;
    this.mGestureStartPoint = -1;
    this.mIsFirstBoundingRect = true;
    this.mRectLeft = 0.0F;
    this.mRectTop = 0.0F;
    this.mRectRight = 0.0F;
    this.mRectBottom = 0.0F;
    this.mDisableTouch = false;
    this.mBoundingBoxDrawn = false;
  }
  
  protected void onDraw(Canvas paramCanvas)
  {
    if ((getParent() instanceof GenericSelectionView)) {
      redrawPath(paramCanvas);
    }
    while (this.mBitmap == null) {
      return;
    }
    paramCanvas.drawBitmap(this.mBitmap, 0.0F, 0.0F, this.mBitmapPaint);
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    if (this.mInkSignatureHandler != null)
    {
      PageView localPageView = ((ARViewer)getContext()).getPageView();
      if (mScreenWidthForInkSignature < 0)
      {
        mScreenWidthForInkSignature = localPageView.getScreenWidth();
        paramInt1 = localPageView.getScreenHeight();
        if (mScreenWidthForInkSignature > paramInt1) {
          mScreenWidthForInkSignature = paramInt1;
        }
      }
      paramInt1 = (int)((ARViewer)getContext()).getResources().getDimension(2131296459);
      paramInt2 = (int)((ARViewer)getContext()).getResources().getDimension(2131296344);
      int j = mScreenWidthForInkSignature;
      int i = View.MeasureSpec.makeMeasureSpec(mScreenWidthForInkSignature, 1073741824);
      j = View.MeasureSpec.makeMeasureSpec(j - paramInt1 * 2 - paramInt2 * 2 - 48 - 8, 1073741824);
      paramInt1 = i;
      paramInt2 = j;
      if (this.mBitmap != null)
      {
        paramInt1 = i;
        paramInt2 = j;
        if (this.mCanvas != null)
        {
          redrawPath();
          paramInt2 = j;
          paramInt1 = i;
        }
      }
    }
    super.onMeasure(paramInt1, paramInt2);
  }
  
  protected void onSizeChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    float f2 = 1.0F;
    super.onSizeChanged(paramInt1, paramInt2, paramInt3, paramInt4);
    try
    {
      if (this.mInkSignatureHandler != null) {
        break label416;
      }
      localObject = ((ARViewer)getContext()).getPageView().getDocViewManager().getCommentManager().getInkCommentHandler();
      if (localObject != null) {
        this.mBitmapPaint.setStrokeWidth(((PARInkCommentUIHandlerAndroid)localObject).getStrokeWidthInDeviceSpace(this.mStrokeWidthInDocSpace, 0));
      }
      if (!(getParent() instanceof GenericSelectionView)) {
        break label133;
      }
      if (paramInt3 == 0) {
        break label451;
      }
      f1 = paramInt1 / paramInt3;
    }
    catch (IllegalArgumentException localIllegalArgumentException)
    {
      for (;;)
      {
        Object localObject;
        Rect localRect;
        return;
        float f1 = 1.0F;
      }
    }
    catch (OutOfMemoryError localOutOfMemoryError) {}
    if (paramInt4 != 0) {
      f2 = paramInt2 / paramInt4;
    }
    scaleAndTranslatePath(this.mInkList, new RectF(this.mRectLeft, this.mRectTop, this.mRectRight, this.mRectBottom), f1, f2, 0.0F, 0.0F);
    return;
    label133:
    this.mBitmap = Bitmap.createBitmap(paramInt1, paramInt2, Bitmap.Config.ARGB_8888);
    this.mCanvas = new Canvas(this.mBitmap);
    localObject = ((ARViewer)getContext()).getPageView().getDocViewManager();
    localRect = ((ARDocViewManager)localObject).getPageRect(this.mPageNum);
    f1 = (localRect.right - localRect.left) / (this.mPrevPageRect.right - this.mPrevPageRect.left);
    f2 = (localRect.bottom - localRect.top) / (this.mPrevPageRect.bottom - this.mPrevPageRect.top);
    this.mPrevPageRect.set(localRect);
    if ((!ARUtils.compareDoubleValues(f1, 1.0D)) || (!ARUtils.compareDoubleValues(f2, 1.0D)))
    {
      paramInt1 = ((ARDocViewManager)localObject).getHorizontalGutter();
      paramInt2 = ((ARDocViewManager)localObject).getVerticalGutter();
      scaleAndTranslatePath(this.mInkList, new RectF(this.mRectLeft, this.mRectTop, this.mRectRight, this.mRectBottom), f1, f2, paramInt1 - this.mPrevHorizontalGutter * f1, paramInt2 - this.mPrevVerticalGutter * f2);
      scaleAndTranslatePath(this.mRedoInkList, new RectF(this.mRectLeft, this.mRectTop, this.mRectRight, this.mRectBottom), f1, f2, paramInt1 - this.mPrevHorizontalGutter * f1, paramInt2 - this.mPrevVerticalGutter * f2);
      this.mPrevHorizontalGutter = paramInt1;
      this.mPrevVerticalGutter = paramInt2;
    }
    redrawPath();
    return;
    label416:
    this.mBitmap = Bitmap.createBitmap(paramInt1, paramInt2, Bitmap.Config.ARGB_8888);
    this.mCanvas = new Canvas(this.mBitmap);
    redrawPath();
    return;
    label451:
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    int i = 0;
    if (this.mDisableTouch)
    {
      if ((getParent() instanceof GenericSelectionView)) {
        return false;
      }
      if ((this.mInkSignatureHandler != null) && (paramMotionEvent.getAction() == 1))
      {
        clearBoundingBoxAndHideContextMenu();
        invalidate();
        this.mDisableTouch = false;
        this.mInkSignatureHandler.startTimerForBoundingBox();
      }
      return true;
    }
    float f1 = paramMotionEvent.getX();
    float f2 = paramMotionEvent.getY();
    switch (paramMotionEvent.getAction())
    {
    }
    for (;;)
    {
      return true;
      touch_start(f1, f2);
      invalidate();
      continue;
      int j = paramMotionEvent.getHistorySize();
      for (;;)
      {
        if (i >= j)
        {
          touch_move(f1, f2);
          if (this.mCanvas != null) {
            this.mCanvas.drawPath(this.mPath, this.mBitmapPaint);
          }
          invalidate();
          break;
        }
        touch_move(paramMotionEvent.getHistoricalX(i), paramMotionEvent.getHistoricalY(i));
        i += 1;
      }
      touch_up(f1, f2);
      invalidate();
    }
  }
  
  protected void onVisibilityChanged(View paramView, int paramInt)
  {
    super.onVisibilityChanged(paramView, paramInt);
    if ((paramInt == 0) && (this.mBitmap != null) && (this.mCanvas != null))
    {
      redrawPath();
      invalidate();
    }
  }
  
  public void redoGesture()
  {
    if (this.mRedoInkList.isEmpty()) {
      return;
    }
    this.mInkList.add((ArrayList)this.mRedoInkList.remove(this.mRedoInkList.size() - 1));
    if (this.mCanvas != null) {
      this.mCanvas.drawColor(0, PorterDuff.Mode.CLEAR);
    }
    redrawPath();
    invalidate();
    setToolbarState();
  }
  
  public void redrawPath()
  {
    if (this.mCanvas != null) {
      redrawPath(this.mCanvas);
    }
  }
  
  public void setEditable(boolean paramBoolean)
  {
    if (paramBoolean) {}
    for (paramBoolean = false;; paramBoolean = true)
    {
      this.mDisableTouch = paramBoolean;
      return;
    }
  }
  
  public void setInkSignatureHandler(PARInkSignatureCommentUIHandlerAndroid paramPARInkSignatureCommentUIHandlerAndroid)
  {
    this.mInkSignatureHandler = paramPARInkSignatureCommentUIHandlerAndroid;
  }
  
  public void setStartPointY(int paramInt)
  {
    if (this.mGestureStartPoint < 0)
    {
      this.mGestureStartPoint = paramInt;
      if (this.mInkSignatureHandler == null)
      {
        PageView localPageView = ((ARViewer)getContext()).getPageView();
        ARDocViewManager localARDocViewManager = localPageView.getDocViewManager();
        paramInt = this.mGestureStartPoint;
        this.mPageNum = localARDocViewManager.getPageAtOffset(localPageView.getScrollY() + paramInt);
        this.mPrevPageRect = localARDocViewManager.getPageRect(this.mPageNum);
        this.mPrevHorizontalGutter = localARDocViewManager.getHorizontalGutter();
        this.mPrevVerticalGutter = localARDocViewManager.getVerticalGutter();
      }
    }
  }
  
  public void setStrokeColor(int paramInt)
  {
    this.mStrokeColor = paramInt;
    this.mBitmapPaint.setColor(paramInt);
  }
  
  public void setStrokeColor(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    this.mStrokeColor = paramInt1;
    this.mStrokeColor = ((this.mStrokeColor << 8) + paramInt2);
    this.mStrokeColor = ((this.mStrokeColor << 8) + paramInt3);
    this.mStrokeColor = ((this.mStrokeColor << 8) + paramInt4);
    this.mBitmapPaint.setColor(this.mStrokeColor);
  }
  
  public void setStrokeWidthInDocSpace(float paramFloat)
  {
    this.mStrokeWidthInDocSpace = paramFloat;
    PARInkCommentUIHandlerAndroid localPARInkCommentUIHandlerAndroid = ((ARViewer)getContext()).getPageView().getDocViewManager().getCommentManager().getInkCommentHandler();
    if (localPARInkCommentUIHandlerAndroid != null) {
      this.mBitmapPaint.setStrokeWidth(localPARInkCommentUIHandlerAndroid.getStrokeWidthInDeviceSpace(this.mStrokeWidthInDocSpace, 0));
    }
  }
  
  public void setToolbarState()
  {
    Object localObject = ((ARViewer)getContext()).getToolbar();
    localObject = ((DocumentToolbar)localObject).getChildAt(((DocumentToolbar)localObject).getChildCount() - 1);
    Button localButton;
    if ((localObject instanceof PencilToolbar))
    {
      localObject = (PencilToolbar)localObject;
      localButton = (Button)((PencilToolbar)localObject).findViewById(2131493020);
      if (!this.mInkList.isEmpty()) {
        break label89;
      }
      localButton.setEnabled(false);
      ((PencilToolbar)localObject).enableButton(2131493018, false);
      if (!this.mRedoInkList.isEmpty()) {
        break label105;
      }
    }
    label89:
    label105:
    for (boolean bool = false;; bool = true)
    {
      ((PencilToolbar)localObject).enableButton(2131493019, bool);
      return;
      localButton.setEnabled(true);
      ((PencilToolbar)localObject).enableButton(2131493018, true);
      break;
    }
  }
  
  public void undoGesture()
  {
    if (this.mInkList.isEmpty()) {
      return;
    }
    this.mRedoInkList.add((ArrayList)this.mInkList.remove(this.mInkList.size() - 1));
    if (this.mCanvas != null) {
      this.mCanvas.drawColor(0, PorterDuff.Mode.CLEAR);
    }
    redrawPath();
    invalidate();
    setToolbarState();
  }
}
