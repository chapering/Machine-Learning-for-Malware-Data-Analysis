package com.adobe.reader;

import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint.Align;
import android.graphics.Rect;
import android.text.Layout.Alignment;
import android.text.StaticLayout;
import android.text.TextPaint;
import java.nio.Buffer;
import java.nio.ByteBuffer;

public class ARBitmapAppearanceGenerator
{
  private static final int QUADDING_CENTERED = 1;
  private static final int QUADDING_LEFT_JUSTIFIED = 0;
  private static final int QUADDING_RIGHT_JUSTIFIED = 2;
  private int mCombLength = 0;
  private String mFontName = "";
  private float mFontSize = 0.0F;
  private float mPaddingBottom = 0.0F;
  private float mPaddingLeft = 0.0F;
  private float mPaddingRight = 0.0F;
  private float mPaddingTop = 0.0F;
  private int mQuadding = 0;
  private String mText = "";
  private int mTextColor = -16777216;
  
  public ARBitmapAppearanceGenerator() {}
  
  public ByteBuffer getBitmapBuffer(int paramInt1, int paramInt2, int paramInt3, boolean paramBoolean1, boolean paramBoolean2)
  {
    try
    {
      localBitmap = Bitmap.createBitmap(paramInt1, paramInt2, Bitmap.Config.ARGB_8888);
      if (!paramBoolean1) {
        break label325;
      }
      localBitmap.eraseColor(0);
      localCanvas = new Canvas(localBitmap);
      localPaint = new Paint();
      localPaint.setColor(-16777216);
      localTextPaint = new TextPaint();
      localObject = Layout.Alignment.ALIGN_NORMAL;
      switch (getQuadding())
      {
      }
    }
    catch (IllegalArgumentException localIllegalArgumentException)
    {
      for (;;)
      {
        Bitmap localBitmap;
        Canvas localCanvas;
        Paint localPaint;
        TextPaint localTextPaint;
        Object localObject;
        label96:
        float f1;
        float f2;
        float f3;
        float f4;
        float f5;
        label294:
        label325:
        return null;
      }
    }
    catch (OutOfMemoryError localOutOfMemoryError) {}
    localTextPaint.setTextAlign(Paint.Align.LEFT);
    f1 = paramInt3 / 72.0F;
    localTextPaint.set(localPaint);
    localTextPaint.setTypeface(AREditText.getTypefaceForFontName(getFontName()));
    localTextPaint.setTextSize(getFontSize() * f1);
    localTextPaint.setColor(getTextColor());
    localTextPaint.setAntiAlias(true);
    f2 = paramInt1 - (getPaddingLeft() + getPaddingRight()) * f1;
    f3 = paramInt2;
    f4 = getPaddingTop();
    f5 = getPaddingBottom();
    localCanvas.clipRect(getPaddingLeft() * f1, getPaddingTop() * f1, f2, f3 - (f4 + f5) * f1);
    localCanvas.translate(getPaddingLeft() * f1, f1 * getPaddingTop());
    if (getCombLength() > 0)
    {
      f1 = f2 / getCombLength();
      f2 = Math.abs(localTextPaint.ascent());
      f3 = localTextPaint.descent();
      localCanvas.translate(0.0F, (localCanvas.getClipBounds().height() - (f2 + f3)) / 2.0F);
      paramInt3 = 0;
      if (paramInt3 < getText().length()) {}
    }
    for (;;)
    {
      localObject = ByteBuffer.allocateDirect(paramInt1 * paramInt2 * 4);
      localBitmap.copyPixelsToBuffer((Buffer)localObject);
      return localObject;
      localBitmap.eraseColor(-1);
      break;
      localTextPaint.setTextAlign(Paint.Align.RIGHT);
      localObject = Layout.Alignment.ALIGN_OPPOSITE;
      break label96;
      localTextPaint.setTextAlign(Paint.Align.CENTER);
      localObject = Layout.Alignment.ALIGN_CENTER;
      break label96;
      localObject = getText().substring(paramInt3, paramInt3 + 1);
      if (paramInt3 > 0) {
        localCanvas.translate(f1, 0.0F);
      }
      new StaticLayout((CharSequence)localObject, localTextPaint, Math.round(0.5F + f1), Layout.Alignment.ALIGN_CENTER, 1.0F, 0.0F, false).draw(localCanvas);
      paramInt3 += 1;
      break label294;
      new StaticLayout(getText(), localTextPaint, Math.round(f2 + 0.5F), (Layout.Alignment)localObject, 1.0F, 0.0F, false).draw(localCanvas);
    }
    return null;
  }
  
  public int getCombLength()
  {
    return this.mCombLength;
  }
  
  public String getFontName()
  {
    return this.mFontName;
  }
  
  public float getFontSize()
  {
    return this.mFontSize;
  }
  
  public float getPaddingBottom()
  {
    return this.mPaddingBottom;
  }
  
  public float getPaddingLeft()
  {
    return this.mPaddingLeft;
  }
  
  public float getPaddingRight()
  {
    return this.mPaddingRight;
  }
  
  public float getPaddingTop()
  {
    return this.mPaddingTop;
  }
  
  public int getQuadding()
  {
    return this.mQuadding;
  }
  
  public String getText()
  {
    return this.mText;
  }
  
  public int getTextColor()
  {
    return this.mTextColor;
  }
  
  public void setCombLength(int paramInt)
  {
    this.mCombLength = paramInt;
  }
  
  public void setFont(String paramString, float paramFloat)
  {
    this.mFontName = paramString;
    this.mFontSize = paramFloat;
  }
  
  public void setPadding(float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4)
  {
    this.mPaddingLeft = paramFloat1;
    this.mPaddingTop = paramFloat2;
    this.mPaddingRight = paramFloat3;
    this.mPaddingBottom = paramFloat4;
  }
  
  public void setQuadding(int paramInt)
  {
    this.mQuadding = paramInt;
  }
  
  public void setText(String paramString)
  {
    this.mText = paramString;
  }
  
  public void setTextColor(float paramFloat1, float paramFloat2, float paramFloat3)
  {
    this.mTextColor = Color.rgb((int)(paramFloat1 * 255.0F), (int)(paramFloat2 * 255.0F), (int)(255.0F * paramFloat3));
  }
  
  public void setUserUnitSize(float paramFloat) {}
}
