package com.adobe.reader;

import android.app.Activity;
import android.content.Context;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.AttributeSet;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnFocusChangeListener;
import android.view.Window;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.TextView.OnEditorActionListener;

public class FindToolbar
  extends LinearLayout
  implements View.OnClickListener
{
  private View mClearFindButton = null;
  private View mDeactivateFindButton = null;
  private EditText mFindTextBox = null;
  
  public FindToolbar(Context paramContext)
  {
    super(paramContext);
  }
  
  public FindToolbar(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
  }
  
  private String getSearchText()
  {
    return this.mFindTextBox.getText().toString().trim();
  }
  
  public void onClick(View paramView)
  {
    Object localObject = ((ARViewer)getContext()).getPageView().getDocViewManager();
    if (localObject == null) {
      return;
    }
    localObject = ((ARDocViewManager)localObject).getTextFinder();
    switch (paramView.getId())
    {
    default: 
      return;
    case 2131492967: 
      ((InputMethodManager)this.mFindTextBox.getContext().getSystemService("input_method")).hideSoftInputFromWindow(this.mFindTextBox.getWindowToken(), 0);
      ((ARViewer)getContext()).deactivateFind(true);
      return;
    }
    if (getSearchText().length() > 0) {
      ((ARTextFinder)localObject).removeTextHighlight();
    }
    this.mFindTextBox.setText("");
    this.mFindTextBox.requestFocus();
  }
  
  protected void onFinishInflate()
  {
    this.mDeactivateFindButton = findViewById(2131492967);
    this.mDeactivateFindButton.setOnClickListener(this);
    this.mClearFindButton = findViewById(2131492968);
    this.mClearFindButton.setOnClickListener(this);
    this.mFindTextBox = ((EditText)findViewById(2131492966));
    Object localObject = ((ARViewer)getContext()).getPageView().getDocViewManager();
    if (localObject != null) {}
    for (localObject = ((ARDocViewManager)localObject).getTextFinder().getSearchText();; localObject = "")
    {
      this.mFindTextBox.setText((CharSequence)localObject);
      this.mFindTextBox.setOnFocusChangeListener(new View.OnFocusChangeListener()
      {
        public void onFocusChange(View paramAnonymousView, boolean paramAnonymousBoolean)
        {
          paramAnonymousView = (Activity)FindToolbar.this.mFindTextBox.getContext();
          Window localWindow = paramAnonymousView.getWindow();
          if (paramAnonymousBoolean)
          {
            localWindow.setSoftInputMode(4);
            ((InputMethodManager)paramAnonymousView.getSystemService("input_method")).showSoftInput(FindToolbar.this.mFindTextBox, 2);
            return;
          }
          localWindow.setSoftInputMode(2);
        }
      });
      this.mFindTextBox.setOnEditorActionListener(new TextView.OnEditorActionListener()
      {
        public boolean onEditorAction(TextView paramAnonymousTextView, int paramAnonymousInt, KeyEvent paramAnonymousKeyEvent)
        {
          if ((paramAnonymousKeyEvent != null) && (paramAnonymousKeyEvent.getKeyCode() == 66))
          {
            ((InputMethodManager)FindToolbar.this.mFindTextBox.getContext().getSystemService("input_method")).hideSoftInputFromWindow(FindToolbar.this.mFindTextBox.getWindowToken(), 0);
            paramAnonymousTextView = ((ARViewer)FindToolbar.this.getContext()).getPageView().getDocViewManager();
            if (paramAnonymousTextView != null) {
              paramAnonymousTextView.getTextFinder().startSearch(FindToolbar.this.getSearchText());
            }
            FindToolbar.this.mFindTextBox.clearFocus();
            return true;
          }
          return false;
        }
      });
      this.mFindTextBox.addTextChangedListener(new TextWatcher()
      {
        public void afterTextChanged(Editable paramAnonymousEditable) {}
        
        public void beforeTextChanged(CharSequence paramAnonymousCharSequence, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3) {}
        
        public void onTextChanged(CharSequence paramAnonymousCharSequence, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3)
        {
          if (paramAnonymousCharSequence.length() == 0)
          {
            FindToolbar.this.mClearFindButton.setVisibility(4);
            return;
          }
          FindToolbar.this.mClearFindButton.setVisibility(0);
        }
      });
      return;
    }
  }
  
  public void onVisibilityChanged(View paramView, int paramInt)
  {
    if (getVisibility() == 0) {
      this.mFindTextBox.requestFocus();
    }
  }
  
  public void onWindowFocusChanged(boolean paramBoolean)
  {
    super.onWindowFocusChanged(paramBoolean);
    if ((!paramBoolean) && (this.mFindTextBox != null) && (this.mFindTextBox.hasFocus())) {
      this.mFindTextBox.clearFocus();
    }
  }
}
