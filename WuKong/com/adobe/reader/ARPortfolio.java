package com.adobe.reader;

import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListView;
import java.io.File;
import java.util.ArrayList;
import java.util.List;

public class ARPortfolio
  implements AdapterView.OnItemClickListener
{
  protected ARViewer mARViewer;
  private List<ARChildEntry> mChildFilesList = new ArrayList();
  private ARChildEntryAdapter mChildListAdapter;
  private ListView mChildListView;
  private ARDocLoaderManager mDocLoaderManager;
  private boolean mFileDownloadFinished;
  private ARPortfolioViewManager mPortfolioViewManager;
  
  public ARPortfolio(ARViewer paramARViewer)
  {
    this.mARViewer = paramARViewer;
    this.mChildListAdapter = new ARChildEntryAdapter(paramARViewer, 2130903047);
    this.mChildListView = ((ListView)paramARViewer.findViewById(2131492897));
    this.mChildListView.setOnItemClickListener(this);
    this.mChildListView.setAdapter(this.mChildListAdapter);
  }
  
  private void changeDirectory(String paramString)
  {
    if (this.mPortfolioViewManager != null) {
      this.mPortfolioViewManager.changeDirectory(paramString);
    }
  }
  
  private void enableFileDownload()
  {
    if (this.mPortfolioViewManager != null) {
      this.mPortfolioViewManager.setCancelFileDownload(false);
    }
  }
  
  private void getEntriesInDirectory()
  {
    if (this.mPortfolioViewManager != null) {
      this.mPortfolioViewManager.getEntriesInDirectory();
    }
  }
  
  private void openFile(String paramString)
  {
    if (this.mPortfolioViewManager != null) {
      this.mPortfolioViewManager.openFile(paramString);
    }
  }
  
  private void requestCancelDownloadFile()
  {
    if (this.mPortfolioViewManager != null) {
      this.mPortfolioViewManager.setCancelFileDownload(true);
    }
  }
  
  public void cancelFileDownload()
  {
    this.mFileDownloadFinished = false;
    requestCancelDownloadFile();
  }
  
  public void cleanupCache(String paramString)
  {
    paramString = new File(paramString);
    if ((paramString.exists()) && (paramString.getAbsolutePath().startsWith(this.mARViewer.getCacheDir().getAbsolutePath()))) {
      paramString.delete();
    }
    this.mARViewer.sendHideProgressDialogMessage();
  }
  
  public void closeDocument()
  {
    this.mARViewer.sendHideProgressDialogMessage();
    if (this.mPortfolioViewManager != null)
    {
      this.mPortfolioViewManager.release();
      this.mPortfolioViewManager = null;
    }
    if (this.mDocLoaderManager != null)
    {
      this.mDocLoaderManager.markAsClosed();
      this.mDocLoaderManager.release();
      this.mDocLoaderManager = null;
    }
    hideListView();
  }
  
  public String getCurrentDirectory()
  {
    if (this.mPortfolioViewManager != null) {
      return this.mPortfolioViewManager.getCurrentDirectory();
    }
    return null;
  }
  
  public ARLastViewedPosition getCurrentNavigationPositionForBaseDocument()
  {
    return null;
  }
  
  public String getPortfolioFileNameToOpen()
  {
    if (this.mPortfolioViewManager != null) {
      return this.mPortfolioViewManager.getPortfolioFileNameToOpen();
    }
    return null;
  }
  
  public boolean hasAttachments()
  {
    if (this.mPortfolioViewManager != null) {
      return this.mPortfolioViewManager.hasAttachments();
    }
    return false;
  }
  
  public void hideListView()
  {
    if (this.mARViewer.isPortfolioListViewVisible())
    {
      this.mARViewer.hideListView();
      this.mARViewer.popBackButtonHandler();
    }
  }
  
  public boolean isAttachmentsView()
  {
    return false;
  }
  
  public boolean isFileDownloadFinished()
  {
    return this.mFileDownloadFinished;
  }
  
  public void launchUI(String paramString)
  {
    ARLastViewedPosition localARLastViewedPosition = new ARLastViewedPosition();
    this.mARViewer.addDocPathToRecentlyViewed(localARLastViewedPosition);
    int i = 0;
    if (paramString != null) {
      changeDirectory(paramString);
    }
    for (;;)
    {
      showListView();
      if (i != 0) {
        updateChildFilesAndPopulateList();
      }
      return;
      i = 1;
    }
  }
  
  public void onFileDownloadComplete()
  {
    this.mFileDownloadFinished = true;
    String str = getPortfolioFileNameToOpen();
    if ((str != null) && (new File(str).exists()))
    {
      if (!str.toLowerCase().endsWith(".pdf")) {
        break label93;
      }
      Object localObject = getCurrentDirectory();
      localObject = new ARPortfolioStackEntry(this.mARViewer.getCurrentDocPath(), (String)localObject, getCurrentNavigationPositionForBaseDocument());
      this.mARViewer.pushToPortfolioStack((ARPortfolioStackEntry)localObject);
      this.mARViewer.openExtractedAttachment(str);
      hideListView();
    }
    for (;;)
    {
      this.mARViewer.sendHideProgressDialogMessage();
      return;
      label93:
      str = new File(str).getName();
      this.mARViewer.openNonPDFFile("attachment_extracted_docs" + File.separator + str);
    }
  }
  
  public void onItemClick(AdapterView<?> paramAdapterView, View paramView, int paramInt, long paramLong)
  {
    if ((paramLong < 0L) || (paramLong > this.mChildFilesList.size() - 1)) {}
    do
    {
      return;
      paramAdapterView = (ARChildEntry)this.mChildFilesList.get((int)paramLong);
    } while (paramAdapterView == null);
    paramView = paramAdapterView.getFileName();
    if (!paramAdapterView.isDirectory())
    {
      openAttachment(paramView);
      return;
    }
    changeDirectory(paramView);
  }
  
  public void openAttachment(String paramString)
  {
    this.mFileDownloadFinished = false;
    this.mARViewer.sendShowProgressDialogMessage(0, ARViewer.PROGRESS_DIALOG_CONTEXT.AR_PORTFOLIO);
    enableFileDownload();
    openFile(paramString);
  }
  
  public void openDefaultAttachmentIfAny()
  {
    this.mPortfolioViewManager.getDefaultAttachmentEntry();
  }
  
  public void populateListWithEntries(String[] paramArrayOfString, boolean paramBoolean)
  {
    int j = paramArrayOfString.length;
    int i = 0;
    for (;;)
    {
      if (i >= j)
      {
        if ((paramBoolean) && (!getCurrentDirectory().equals("/"))) {
          this.mChildFilesList.add(0, new ARChildEntry("..", true));
        }
        this.mChildListAdapter.clear();
        this.mChildListAdapter.addAll(this.mChildFilesList);
        return;
      }
      this.mChildFilesList.add(0, new ARChildEntry(paramArrayOfString[(j - 1 - i)], paramBoolean));
      i += 1;
    }
  }
  
  public void setDocLoaderManager(ARDocLoaderManager paramARDocLoaderManager)
  {
    this.mDocLoaderManager = paramARDocLoaderManager;
  }
  
  public void setPortfolioViewManager(ARPortfolioViewManager paramARPortfolioViewManager)
  {
    this.mPortfolioViewManager = paramARPortfolioViewManager;
    this.mPortfolioViewManager.setPortfolioHandler(this);
  }
  
  public void showListView()
  {
    if (this.mARViewer.isPortfolioListViewVisible()) {
      return;
    }
    this.mARViewer.showListView();
    this.mARViewer.pushBackButtonHandler(new ARViewer.BackButtonHandler()
    {
      public void onBackPressed()
      {
        String str = ARPortfolio.this.getCurrentDirectory();
        if (str == null) {
          return;
        }
        if (str.equals("/"))
        {
          ARPortfolio.this.hideListView();
          if (ARPortfolio.this.mARViewer.isPortfolioStackEmpty())
          {
            ARPortfolio.this.mARViewer.handleBackPressed(false);
            return;
          }
          ARPortfolio.this.mARViewer.restartPreviousPortfolioFromStack();
          return;
        }
        ARPortfolio.this.changeDirectory("..");
      }
    });
  }
  
  public void updateChildFilesAndPopulateList()
  {
    this.mChildFilesList.clear();
    this.mChildListAdapter.clear();
    getEntriesInDirectory();
  }
}
