package com.adobe.reader;

import android.graphics.Canvas;
import android.graphics.Point;
import android.graphics.PointF;
import android.graphics.Rect;

public class ARDocViewManager
{
  private ARBookmarkManager mBookmarkManager;
  private ARCommentManager mCommentManager;
  private long mDocViewManager;
  private ARLastViewedPosition mInitialPosition = new ARLastViewedPosition();
  private PageView mPageView;
  private PARThumbnailManager mPlatformThumbnailManager = null;
  private PARSecurityManager mSecurityManager;
  private ARTextFinder mTextFinder;
  private PARTextSelectorAndroid mTextSelectorAndroid;
  
  public ARDocViewManager(PageView paramPageView, long paramLong, String paramString, int paramInt1, int paramInt2)
  {
    this.mPageView = paramPageView;
    this.mDocViewManager = createDocViewManager(this.mPageView, paramLong, paramString, paramInt1, paramInt2);
    this.mCommentManager = new ARCommentManager(this.mPageView, this.mDocViewManager);
    paramPageView = (ARViewer)this.mPageView.getContext();
    this.mBookmarkManager = new ARBookmarkManager(paramPageView, this.mDocViewManager);
    this.mPlatformThumbnailManager = new PARThumbnailManager(paramPageView, this.mDocViewManager);
    this.mPlatformThumbnailManager.setThumbnailSizeFromScreenSize(paramInt1, paramInt2);
    this.mTextSelectorAndroid = new PARTextSelectorAndroid(this.mPageView, this.mDocViewManager);
    this.mTextFinder = new ARTextFinder(paramPageView, this.mDocViewManager);
    this.mSecurityManager = new PARSecurityManager(paramPageView, shouldShowSecurityLock());
  }
  
  private native boolean appPause(long paramLong);
  
  private native boolean appResume(long paramLong);
  
  private native Point checkAndSetForSmartZoom(long paramLong, int paramInt1, int paramInt2, int paramInt3);
  
  private void checkDocViewManager()
  {
    if (this.mDocViewManager == 0L) {
      throw new IllegalStateException();
    }
  }
  
  private native PointF convertPointFromDocumentSpaceToDeviceSpace(long paramLong, double paramDouble1, double paramDouble2, int paramInt);
  
  private native PointF convertPointFromScrollSpaceToDocumentSpace(long paramLong, int paramInt1, int paramInt2, int paramInt3);
  
  private native long createDocViewManager(PageView paramPageView, long paramLong, String paramString, int paramInt1, int paramInt2);
  
  private native boolean createFlattenedCopy(long paramLong, String paramString, int paramInt);
  
  private native void destroy(long paramLong);
  
  private native void doubleTapZoom(long paramLong, double paramDouble1, double paramDouble2, double paramDouble3);
  
  private native boolean getAnalyticsFlagStatus(long paramLong, int paramInt);
  
  private native boolean[] getAnalyticsFlagStatusArray(long paramLong);
  
  private native void getCurrentNavigationPosition(long paramLong, ARLastViewedPosition paramARLastViewedPosition);
  
  private native int getCurrentPageNumber(long paramLong);
  
  private native int getGalleyHeight(long paramLong, int paramInt, double paramDouble);
  
  private native int getGalleyWidth(long paramLong, int paramInt, double paramDouble);
  
  private native int getHorizontalGutter(long paramLong);
  
  private native int getHorizontalGutterAtZoom(long paramLong, double paramDouble);
  
  private native boolean getNightModeEnabled(long paramLong);
  
  private native int getNumPages(long paramLong);
  
  private native int getOffsetForPage(long paramLong, int paramInt);
  
  private native int getPageAtOffset(long paramLong, int paramInt);
  
  private native int getPageHeight(long paramLong, int paramInt);
  
  private native Rect getPageRect(long paramLong, int paramInt);
  
  private native int getPageWidth(long paramLong, int paramInt);
  
  private native int getSecurityHandlerType(long paramLong);
  
  private native int getTilesStateForPaint(long paramLong, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5);
  
  private native int getVerticalGutter(long paramLong);
  
  private native int getVerticalGutterAtZoom(long paramLong, double paramDouble);
  
  private native int getViewMode(long paramLong);
  
  private native Rect getVisiblePageRect(long paramLong, int paramInt);
  
  private native double getZoomLevel(long paramLong);
  
  private native void gotoPage(long paramLong, int paramInt);
  
  private native void gotoPreviousPosition(long paramLong);
  
  private native boolean handleDragGestureBegin(long paramLong1, int paramInt1, int paramInt2, long paramLong2);
  
  private native boolean handleDragGestureCancelled(long paramLong1, int paramInt1, int paramInt2, long paramLong2);
  
  private native boolean handleDragGestureEnd(long paramLong1, int paramInt1, int paramInt2, long paramLong2);
  
  private native boolean handleDragGestureMove(long paramLong1, int paramInt1, int paramInt2, long paramLong2);
  
  private native boolean handleLongPressGestureBegin(long paramLong1, int paramInt1, int paramInt2, long paramLong2);
  
  private native boolean handleLongPressGestureCancelled(long paramLong1, int paramInt1, int paramInt2, long paramLong2);
  
  private native boolean handleLongPressGestureEnd(long paramLong1, int paramInt1, int paramInt2, long paramLong2);
  
  private native boolean handleLongPressGestureMove(long paramLong1, int paramInt1, int paramInt2, long paramLong2);
  
  private native void handleTapGesture(long paramLong1, long paramLong2, int paramInt1, int paramInt2);
  
  private native boolean hasDynamicWatermark(long paramLong);
  
  private native boolean hasUniquePageSizeAndGeometry(long paramLong);
  
  private native boolean isAcroForm(long paramLong);
  
  private native boolean isOperationPermitted(long paramLong, int paramInt1, int paramInt2);
  
  private native boolean isPointWithinPage(long paramLong, int paramInt1, int paramInt2);
  
  private native boolean isXFAForm(long paramLong);
  
  private native boolean isXFAFormDynamic(long paramLong);
  
  private native int paintCanvas(long paramLong, Canvas paramCanvas, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8);
  
  private native void paintCanvasForMinZoomMode(long paramLong, Canvas paramCanvas, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5);
  
  private native int paintTransformedCanvas(long paramLong, Canvas paramCanvas, double paramDouble, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8, int paramInt9, int paramInt10);
  
  private native void resetAllZoomLevels(long paramLong, double[] paramArrayOfDouble);
  
  private native boolean saveAsPDF(long paramLong, String paramString);
  
  private native void scroll(long paramLong, int paramInt1, int paramInt2);
  
  private native void setAnalyticsFlagStatus(long paramLong, int paramInt, boolean paramBoolean);
  
  private native void setCurrentZoomLevelAndScrollOffset(long paramLong, double paramDouble, int paramInt1, int paramInt2);
  
  private native void setInitialView(long paramLong, int paramInt1, double paramDouble, int paramInt2, int paramInt3, float paramFloat, int paramInt4);
  
  private native void setNightModeEnabled(long paramLong, boolean paramBoolean);
  
  private native void setViewMode(long paramLong, int paramInt);
  
  private native void setWindowSize(long paramLong, int paramInt1, int paramInt2);
  
  private boolean shouldShowSecurityLock()
  {
    checkDocViewManager();
    return shouldShowSecurityLock(this.mDocViewManager);
  }
  
  private native boolean shouldShowSecurityLock(long paramLong);
  
  private native boolean wantsTapGesture(long paramLong1, long paramLong2, int paramInt1, int paramInt2);
  
  public void appPause()
  {
    checkDocViewManager();
    appPause(this.mDocViewManager);
  }
  
  public void appResume()
  {
    checkDocViewManager();
    appResume(this.mDocViewManager);
  }
  
  public Point checkAndSetForSmartZoom(int paramInt1, int paramInt2, int paramInt3)
  {
    checkDocViewManager();
    return checkAndSetForSmartZoom(this.mDocViewManager, paramInt1, paramInt2, paramInt3);
  }
  
  public PointF convertPointFromDocumentSpaceToDeviceSpace(double paramDouble1, double paramDouble2, int paramInt)
  {
    checkDocViewManager();
    return convertPointFromDocumentSpaceToDeviceSpace(this.mDocViewManager, paramDouble1, paramDouble2, paramInt);
  }
  
  public PointF convertPointFromScrollSpaceToDocumentSpace(int paramInt1, int paramInt2, int paramInt3)
  {
    checkDocViewManager();
    return convertPointFromScrollSpaceToDocumentSpace(this.mDocViewManager, paramInt1, paramInt2, paramInt3);
  }
  
  public boolean createFlattenedCopy(String paramString, ARCommentManager.ANNOTS_TO_FLATTEN paramANNOTS_TO_FLATTEN)
  {
    switch (paramANNOTS_TO_FLATTEN)
    {
    }
    for (int i = 2;; i = 1) {
      return createFlattenedCopy(this.mDocViewManager, paramString, i);
    }
  }
  
  public void doubleTapZoom(double paramDouble1, double paramDouble2, double paramDouble3)
  {
    checkDocViewManager();
    doubleTapZoom(this.mDocViewManager, paramDouble1, paramDouble2, paramDouble3);
  }
  
  public void exitActiveHandlers()
  {
    if (this.mCommentManager != null) {
      this.mCommentManager.getCommentEditHandler().disableEditMode();
    }
    if (this.mPageView != null) {
      this.mPageView.exitDocContextMenuMode();
    }
    if ((this.mTextSelectorAndroid != null) && (this.mTextSelectorAndroid.isTextSelectionActive())) {
      this.mTextSelectorAndroid.removeHandlesAndClearSelection();
    }
  }
  
  public PARTextSelectorAndroid getARTextSelector()
  {
    checkDocViewManager();
    return this.mTextSelectorAndroid;
  }
  
  public boolean getAnalyticsFlagStatus(int paramInt)
  {
    checkDocViewManager();
    return getAnalyticsFlagStatus(this.mDocViewManager, paramInt);
  }
  
  public boolean[] getAnalyticsFlagStatusArray()
  {
    checkDocViewManager();
    return getAnalyticsFlagStatusArray(this.mDocViewManager);
  }
  
  public ARBookmarkManager getBookmarkManager()
  {
    checkDocViewManager();
    return this.mBookmarkManager;
  }
  
  public ARCommentManager getCommentManager()
  {
    checkDocViewManager();
    return this.mCommentManager;
  }
  
  public ARLastViewedPosition getCurrentNavigationPosition()
  {
    checkDocViewManager();
    ARLastViewedPosition localARLastViewedPosition = new ARLastViewedPosition();
    getCurrentNavigationPosition(this.mDocViewManager, localARLastViewedPosition);
    return localARLastViewedPosition;
  }
  
  public int getCurrentPageNumber()
  {
    checkDocViewManager();
    return getCurrentPageNumber(this.mDocViewManager);
  }
  
  public int getGalleyHeight(int paramInt, double paramDouble)
  {
    checkDocViewManager();
    return getGalleyHeight(this.mDocViewManager, paramInt, paramDouble);
  }
  
  public int getGalleyWidth(int paramInt, double paramDouble)
  {
    checkDocViewManager();
    return getGalleyWidth(this.mDocViewManager, paramInt, paramDouble);
  }
  
  public int getHorizontalGutter()
  {
    checkDocViewManager();
    return getHorizontalGutter(this.mDocViewManager);
  }
  
  public int getHorizontalGutterAtZoom(double paramDouble)
  {
    checkDocViewManager();
    return getHorizontalGutterAtZoom(this.mDocViewManager, paramDouble);
  }
  
  public long getNativeDocViewManager()
  {
    return this.mDocViewManager;
  }
  
  public int getNumPages()
  {
    checkDocViewManager();
    return getNumPages(this.mDocViewManager);
  }
  
  public int getOffsetForPage(int paramInt)
  {
    checkDocViewManager();
    return getOffsetForPage(this.mDocViewManager, paramInt);
  }
  
  public int getPageAtOffset(int paramInt)
  {
    checkDocViewManager();
    return getPageAtOffset(this.mDocViewManager, paramInt);
  }
  
  public int getPageHeight(int paramInt)
  {
    checkDocViewManager();
    return getPageHeight(this.mDocViewManager, paramInt);
  }
  
  public Rect getPageRect(int paramInt)
  {
    checkDocViewManager();
    return getPageRect(this.mDocViewManager, paramInt);
  }
  
  public int getPageWidth(int paramInt)
  {
    checkDocViewManager();
    return getPageWidth(this.mDocViewManager, paramInt);
  }
  
  protected PARThumbnailManager getPlatformThumbnailManager()
  {
    checkDocViewManager();
    return this.mPlatformThumbnailManager;
  }
  
  public int getSecurityHandlerType()
  {
    checkDocViewManager();
    return getSecurityHandlerType(this.mDocViewManager);
  }
  
  public PARSecurityManager getSecurityManager()
  {
    checkDocViewManager();
    return this.mSecurityManager;
  }
  
  public ARTextFinder getTextFinder()
  {
    checkDocViewManager();
    return this.mTextFinder;
  }
  
  public int getTilesStateForPaint(Rect paramRect, int paramInt)
  {
    checkDocViewManager();
    return getTilesStateForPaint(this.mDocViewManager, paramRect.left, paramRect.top, paramRect.right, paramRect.bottom, paramInt);
  }
  
  public int getVerticalGutter()
  {
    checkDocViewManager();
    return getVerticalGutter(this.mDocViewManager);
  }
  
  public int getVerticalGutterAtZoom(double paramDouble)
  {
    checkDocViewManager();
    return getVerticalGutterAtZoom(this.mDocViewManager, paramDouble);
  }
  
  public int getViewMode()
  {
    return getViewMode(this.mDocViewManager);
  }
  
  public Rect getVisiblePageRect(int paramInt)
  {
    checkDocViewManager();
    return getVisiblePageRect(this.mDocViewManager, paramInt);
  }
  
  public double getZoomLevel()
  {
    return getZoomLevel(this.mDocViewManager);
  }
  
  public void gotoPage(int paramInt)
  {
    checkDocViewManager();
    ((ARViewer)this.mPageView.getContext()).showPreviousPosButton();
    gotoPage(this.mDocViewManager, paramInt);
  }
  
  public void gotoPreviousPosition()
  {
    checkDocViewManager();
    gotoPreviousPosition(this.mDocViewManager);
  }
  
  public boolean handleDragBegin(int paramInt1, int paramInt2, long paramLong)
  {
    checkDocViewManager();
    return handleDragGestureBegin(this.mDocViewManager, paramInt1, paramInt2, paramLong);
  }
  
  public boolean handleDragCancel(int paramInt1, int paramInt2, long paramLong)
  {
    checkDocViewManager();
    return handleDragGestureCancelled(this.mDocViewManager, paramInt1, paramInt2, paramLong);
  }
  
  public boolean handleDragEnd(int paramInt1, int paramInt2, long paramLong)
  {
    checkDocViewManager();
    return handleDragGestureEnd(this.mDocViewManager, paramInt1, paramInt2, paramLong);
  }
  
  public boolean handleDragMove(int paramInt1, int paramInt2, long paramLong)
  {
    checkDocViewManager();
    return handleDragGestureMove(this.mDocViewManager, paramInt1, paramInt2, paramLong);
  }
  
  public boolean handleLongPressBegin(int paramInt1, int paramInt2, long paramLong)
  {
    checkDocViewManager();
    return handleLongPressGestureBegin(this.mDocViewManager, paramInt1, paramInt2, paramLong);
  }
  
  public boolean handleLongPressCancel(int paramInt1, int paramInt2, long paramLong)
  {
    checkDocViewManager();
    return handleLongPressGestureCancelled(this.mDocViewManager, paramInt1, paramInt2, paramLong);
  }
  
  public boolean handleLongPressEnd(int paramInt1, int paramInt2, long paramLong)
  {
    checkDocViewManager();
    return handleLongPressGestureEnd(this.mDocViewManager, paramInt1, paramInt2, paramLong);
  }
  
  public boolean handleLongPressMove(int paramInt1, int paramInt2, long paramLong)
  {
    checkDocViewManager();
    return handleLongPressGestureMove(this.mDocViewManager, paramInt1, paramInt2, paramLong);
  }
  
  public void handleTapGesture(long paramLong, int paramInt1, int paramInt2)
  {
    checkDocViewManager();
    handleTapGesture(this.mDocViewManager, paramLong, paramInt1, paramInt2);
  }
  
  public boolean hasDynamicWatermark()
  {
    checkDocViewManager();
    return hasDynamicWatermark(this.mDocViewManager);
  }
  
  public boolean hasUniquePageSizeAndGeometry()
  {
    checkDocViewManager();
    return hasUniquePageSizeAndGeometry(this.mDocViewManager);
  }
  
  public boolean isAcroForm()
  {
    checkDocViewManager();
    return isAcroForm(this.mDocViewManager);
  }
  
  public boolean isOperationPermitted(int paramInt1, int paramInt2)
  {
    checkDocViewManager();
    return isOperationPermitted(this.mDocViewManager, paramInt1, paramInt2);
  }
  
  public boolean isPointWithinPage(int paramInt1, int paramInt2)
  {
    checkDocViewManager();
    return isPointWithinPage(this.mDocViewManager, paramInt1, paramInt2);
  }
  
  public boolean isXFAForm()
  {
    checkDocViewManager();
    return isXFAForm(this.mDocViewManager);
  }
  
  public boolean isXFAFormDynamic()
  {
    checkDocViewManager();
    return isXFAFormDynamic(this.mDocViewManager);
  }
  
  public int paintCanvas(Canvas paramCanvas, Rect paramRect1, Rect paramRect2)
  {
    checkDocViewManager();
    return paintCanvas(this.mDocViewManager, paramCanvas, paramRect1.left, paramRect1.top, paramRect1.right, paramRect1.bottom, paramRect2.left, paramRect2.top, paramRect2.right, paramRect2.bottom);
  }
  
  public void paintCanvasForMinZoomMode(Canvas paramCanvas, Rect paramRect, int paramInt)
  {
    checkDocViewManager();
    paintCanvasForMinZoomMode(this.mDocViewManager, paramCanvas, paramRect.left, paramRect.top, paramRect.right, paramRect.bottom, paramInt);
  }
  
  public int paintTransformedCanvas(Canvas paramCanvas, double paramDouble, Point paramPoint, Rect paramRect1, Rect paramRect2)
  {
    checkDocViewManager();
    return paintTransformedCanvas(this.mDocViewManager, paramCanvas, paramDouble, paramPoint.x, paramPoint.y, paramRect1.left, paramRect1.top, paramRect1.right, paramRect1.bottom, paramRect2.left, paramRect2.top, paramRect2.right, paramRect2.bottom);
  }
  
  public void release()
  {
    exitActiveHandlers();
    if (this.mPlatformThumbnailManager != null) {
      this.mPlatformThumbnailManager = null;
    }
    if (this.mBookmarkManager != null)
    {
      this.mBookmarkManager.release();
      this.mBookmarkManager = null;
    }
    if (this.mSecurityManager != null)
    {
      this.mSecurityManager.release();
      this.mSecurityManager = null;
    }
    destroy(this.mDocViewManager);
    this.mDocViewManager = 0L;
  }
  
  public void resetAllZoomLevels(double[] paramArrayOfDouble)
  {
    checkDocViewManager();
    resetAllZoomLevels(this.mDocViewManager, paramArrayOfDouble);
  }
  
  public boolean saveAsPDF(String paramString)
  {
    checkDocViewManager();
    return saveAsPDF(this.mDocViewManager, paramString);
  }
  
  public void scroll(int paramInt1, int paramInt2)
  {
    checkDocViewManager();
    scroll(this.mDocViewManager, paramInt1, paramInt2);
  }
  
  public void setAnalyticsFlagStatus(int paramInt, boolean paramBoolean)
  {
    checkDocViewManager();
    setAnalyticsFlagStatus(this.mDocViewManager, paramInt, paramBoolean);
  }
  
  public void setCurrentZoomLevelAndScrollOffset(double paramDouble, int paramInt1, int paramInt2)
  {
    checkDocViewManager();
    setCurrentZoomLevelAndScrollOffset(this.mDocViewManager, paramDouble, paramInt1, paramInt2);
  }
  
  public void setInitialView(ARLastViewedPosition paramARLastViewedPosition)
  {
    this.mInitialPosition = paramARLastViewedPosition;
    if (this.mPageView.getScreenHeight() != 1) {
      setInitialView(this.mDocViewManager, paramARLastViewedPosition.mPageNum, paramARLastViewedPosition.mZoomLevel, paramARLastViewedPosition.mOffsetX, paramARLastViewedPosition.mOffsetY, paramARLastViewedPosition.mReflowFontSize, paramARLastViewedPosition.mViewMode);
    }
  }
  
  public void setNightModeEnabled(boolean paramBoolean)
  {
    checkDocViewManager();
    setNightModeEnabled(this.mDocViewManager, paramBoolean);
  }
  
  public void setSavedInitialPosition()
  {
    if (this.mPageView.getScreenHeight() != 1) {
      setInitialView(this.mDocViewManager, this.mInitialPosition.mPageNum, this.mInitialPosition.mZoomLevel, this.mInitialPosition.mOffsetX, this.mInitialPosition.mOffsetY, this.mInitialPosition.mReflowFontSize, this.mInitialPosition.mViewMode);
    }
  }
  
  public void setThumbnailSizeFromScreenSize(int paramInt1, int paramInt2)
  {
    if (this.mPlatformThumbnailManager != null) {
      this.mPlatformThumbnailManager.setThumbnailSizeFromScreenSize(paramInt1, paramInt2);
    }
  }
  
  public void setViewMode(int paramInt)
  {
    checkDocViewManager();
    setViewMode(this.mDocViewManager, paramInt);
  }
  
  public void setWindowSize(int paramInt1, int paramInt2)
  {
    checkDocViewManager();
    setWindowSize(this.mDocViewManager, paramInt1, paramInt2);
  }
  
  public boolean wantsTapGesture(long paramLong, int paramInt1, int paramInt2)
  {
    checkDocViewManager();
    return wantsTapGesture(this.mDocViewManager, paramLong, paramInt1, paramInt2);
  }
}
