package com.adobe.reader;

import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import java.util.LinkedList;

class ARBitmapPool
{
  private static final int MAX_NUM_TILES = 30;
  private int mBitmapHeight = 1;
  private int mBitmapWidth = 1;
  private int mCurrentNumTiles = 0;
  public LinkedList<Bitmap> mListAvailableBitmap = new LinkedList();
  private int[] mPixelBuffer = null;
  
  public ARBitmapPool() {}
  
  private void addBitmapToPool(int paramInt1, int paramInt2)
  {
    try
    {
      Bitmap localBitmap = Bitmap.createBitmap(paramInt1, paramInt2, Bitmap.Config.RGB_565);
      this.mCurrentNumTiles += 1;
      this.mListAvailableBitmap.add(localBitmap);
      return;
    }
    catch (IllegalArgumentException localIllegalArgumentException) {}catch (OutOfMemoryError localOutOfMemoryError) {}
  }
  
  private void calculateBitmapSize(int paramInt1, int paramInt2)
  {
    if (paramInt1 > paramInt2) {}
    for (;;)
    {
      this.mBitmapHeight = paramInt2;
      this.mBitmapWidth = paramInt2;
      return;
      paramInt2 = paramInt1;
    }
  }
  
  private boolean canFitTileWithinMemoryThreshold(int paramInt1, int paramInt2)
  {
    boolean bool = false;
    ARViewer localARViewer = ARViewer.getCurrentActivity();
    double d1 = localARViewer.getMaxTileHeapLimit();
    double d2 = localARViewer.getPageView().getDocViewManager().getPlatformThumbnailManager().getCurrentMemoryUsage();
    if (getCurrentMemoryUsage() + PARTile.calculateTileSize(paramInt1, paramInt2) - d2 <= d1) {
      bool = true;
    }
    return bool;
  }
  
  private double getCurrentMemoryUsage()
  {
    double d2 = ARApp.getCurrentMemoryUsage();
    double d1 = d2;
    if (!ARApp.runningOnHoneycombOrAbove()) {
      d1 = d2 + (PARTile.calculateTileSize(this.mBitmapWidth, this.mBitmapHeight) * this.mCurrentNumTiles + ARViewer.getCurrentActivity().getPageView().getDocViewManager().getPlatformThumbnailManager().getCurrentMemoryUsage());
    }
    return d1;
  }
  
  public boolean canObtainBitmap(int paramInt1, int paramInt2, boolean paramBoolean)
  {
    if (this.mListAvailableBitmap.isEmpty())
    {
      if ((this.mCurrentNumTiles >= 30) || (!canFitTileWithinMemoryThreshold(paramInt1, paramInt2))) {
        break label40;
      }
      if (paramBoolean) {
        addBitmapToPool(paramInt1, paramInt2);
      }
    }
    return true;
    label40:
    return false;
  }
  
  public void clear()
  {
    this.mCurrentNumTiles -= this.mListAvailableBitmap.size();
    this.mListAvailableBitmap.clear();
    this.mPixelBuffer = null;
    System.gc();
  }
  
  public void freeBitmapFromMemory(Bitmap paramBitmap)
  {
    if (paramBitmap != null)
    {
      this.mCurrentNumTiles -= 1;
      this.mListAvailableBitmap.remove(paramBitmap);
    }
    System.gc();
  }
  
  public int getBitmapHeight(int paramInt1, int paramInt2)
  {
    if (this.mBitmapHeight == 1) {
      calculateBitmapSize(paramInt1, paramInt2);
    }
    return this.mBitmapHeight;
  }
  
  public int getBitmapWidth(int paramInt1, int paramInt2)
  {
    if (this.mBitmapWidth == 1) {
      calculateBitmapSize(paramInt1, paramInt2);
    }
    return this.mBitmapWidth;
  }
  
  public int[] getPixelBuffer(int paramInt1, int paramInt2)
  {
    if ((this.mPixelBuffer == null) || (this.mPixelBuffer.length < paramInt1 * paramInt2)) {}
    try
    {
      this.mPixelBuffer = new int[paramInt1 * paramInt2];
      return this.mPixelBuffer;
    }
    catch (OutOfMemoryError localOutOfMemoryError)
    {
      for (;;)
      {
        this.mPixelBuffer = null;
      }
    }
  }
  
  public Bitmap obtainBitmap(int paramInt1, int paramInt2)
  {
    if ((canObtainBitmap(paramInt1, paramInt2, true)) && (!this.mListAvailableBitmap.isEmpty())) {
      return (Bitmap)this.mListAvailableBitmap.removeFirst();
    }
    return null;
  }
  
  public void releaseBitmap(Bitmap paramBitmap)
  {
    if (paramBitmap == null) {
      return;
    }
    if (getCurrentMemoryUsage() > ARApp.getMaxHeapLimit())
    {
      freeBitmapFromMemory(paramBitmap);
      return;
    }
    this.mListAvailableBitmap.add(paramBitmap);
  }
}
