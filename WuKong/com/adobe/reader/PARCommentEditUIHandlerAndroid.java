package com.adobe.reader;

import android.graphics.Rect;
import android.graphics.RectF;
import android.view.View;
import android.widget.ImageView;

public class PARCommentEditUIHandlerAndroid
  implements StrokeWidthChangedListener, FontSizeChangedListener
{
  private ColorPickerWidget mColorPickerInstance = null;
  private ARViewer mContext = null;
  private CommentEditContextMenu mContextMenuInstance = null;
  private FontSizePickerWidget mFontSizePickerInstance = null;
  private GenericSelectionView mGSView = null;
  private boolean mIsCommentEditActive = false;
  private boolean mIsCommentMovable;
  private long mNativeCommentEditHandler = 0L;
  private OpacityPickerWidget mOpacityPickerInstance = null;
  private PageView mPageView = null;
  private int mProperties = 0;
  private StrokeWidthPickerWidget mStrokeWidthPickerInstance = null;
  
  public PARCommentEditUIHandlerAndroid(long paramLong, ARViewer paramARViewer)
  {
    this.mNativeCommentEditHandler = create(paramLong);
    cacheObject(this.mNativeCommentEditHandler);
    this.mContext = paramARViewer;
    this.mPageView = this.mContext.getPageView();
  }
  
  private native void cacheObject(long paramLong);
  
  private native void clear(long paramLong);
  
  private native void colorChanged(long paramLong, float paramFloat1, float paramFloat2, float paramFloat3);
  
  private native long create(long paramLong);
  
  private void disableAllUIElements()
  {
    hideActiveUIElements();
    this.mContextMenuInstance = null;
    this.mColorPickerInstance = null;
    this.mOpacityPickerInstance = null;
    this.mStrokeWidthPickerInstance = null;
    this.mFontSizePickerInstance = null;
  }
  
  private native void disableEditMode(long paramLong);
  
  private native void editText(long paramLong);
  
  private native void fontSizeChanged(long paramLong, float paramFloat);
  
  private native int getColor(long paramLong);
  
  private native int getCommentSubtype(long paramLong);
  
  private native float getFontSize(long paramLong);
  
  private native int getPageNum(long paramLong);
  
  private native Rect getRect(long paramLong);
  
  private native Rect getRectForGSV(long paramLong);
  
  private native View getViewForMoveResize(long paramLong);
  
  private void hideActiveUIElements()
  {
    if (this.mContextMenuInstance != null) {
      this.mContextMenuInstance.dismiss();
    }
    if (this.mColorPickerInstance != null) {
      this.mColorPickerInstance.dismiss();
    }
    if (this.mOpacityPickerInstance != null) {
      this.mOpacityPickerInstance.dismiss();
    }
    if (this.mStrokeWidthPickerInstance != null) {
      this.mStrokeWidthPickerInstance.dismiss();
    }
    if (this.mFontSizePickerInstance != null) {
      this.mFontSizePickerInstance.dismiss();
    }
  }
  
  private void launchContextMenu()
  {
    disableAllUIElements();
    this.mContextMenuInstance = new CommentEditContextMenu(this.mContext, this);
    this.mContextMenuInstance.setFocusable(false);
    this.mContextMenuInstance.setAnimationStyle(2131099661);
    showActiveUIElements();
  }
  
  private native void opacityChanged(long paramLong, float paramFloat);
  
  private native void openPopup(long paramLong);
  
  private void removeSelection()
  {
    if (this.mGSView != null)
    {
      this.mGSView.setVisibility(8);
      this.mPageView.removeView(this.mGSView);
      this.mGSView = null;
    }
  }
  
  private boolean setSelection()
  {
    if ((this.mPageView != null) && (this.mContext != null))
    {
      if ((this.mProperties & 0x200) == 0) {
        break label193;
      }
      this.mIsCommentMovable = true;
    }
    label193:
    for (boolean bool1 = true;; bool1 = false)
    {
      boolean bool2;
      if ((this.mProperties & 0x20) != 0)
      {
        this.mIsCommentMovable = true;
        bool1 = true;
        bool2 = true;
      }
      for (;;)
      {
        if ((!bool2) && (!bool1)) {}
        for (Object localObject = new ImageView(this.mContext);; localObject = getViewForMoveResize(this.mNativeCommentEditHandler))
        {
          Rect localRect = getRect(this.mNativeCommentEditHandler);
          this.mGSView = new GenericSelectionView(this.mContext, getPageNum(this.mNativeCommentEditHandler), bool1, bool2, -16776961);
          this.mPageView.addViewAtLocation(this.mGSView, Math.abs(localRect.right - localRect.left), Math.abs(localRect.bottom - localRect.top), localRect.left, localRect.top);
          this.mGSView.setChildView((View)localObject);
          return true;
        }
        return false;
        boolean bool3 = false;
        bool2 = bool1;
        bool1 = bool3;
      }
    }
  }
  
  private void showActiveUIElements()
  {
    if (this.mGSView == null) {}
    Rect localRect;
    do
    {
      return;
      localRect = this.mGSView.getScrollSpaceCurrentRect();
      if (this.mContextMenuInstance != null) {
        this.mContextMenuInstance.showAtScrollLocation(localRect);
      }
      if (this.mColorPickerInstance != null) {
        this.mColorPickerInstance.showAtScrollLocation(localRect);
      }
      if (this.mOpacityPickerInstance != null) {
        this.mOpacityPickerInstance.showAtScrollLocation(localRect);
      }
      if (this.mStrokeWidthPickerInstance != null) {
        this.mStrokeWidthPickerInstance.showAtScrollLocation(localRect);
      }
    } while (this.mFontSizePickerInstance == null);
    this.mFontSizePickerInstance.showAtScrollLocation(localRect);
  }
  
  private native void strokeWidthChanged(long paramLong, float paramFloat);
  
  private void updateColorPreferences(int paramInt)
  {
    ARPrefsEditor localARPrefsEditor = new ARPrefsEditor(this.mContext.getSharedPreferences("com.adobe.reader.preferences", 0));
    switch (getCommentSubtype(this.mNativeCommentEditHandler))
    {
    }
    for (;;)
    {
      localARPrefsEditor.apply();
      return;
      localARPrefsEditor.putInt("stickyNoteColor", paramInt);
      continue;
      localARPrefsEditor.putInt("inkColor", paramInt);
      continue;
      localARPrefsEditor.putInt("highlightColor", paramInt);
      continue;
      localARPrefsEditor.putInt("freetextColor", paramInt);
      continue;
      localARPrefsEditor.putInt("strikeOutColor", paramInt);
      continue;
      localARPrefsEditor.putInt("underlineColor", paramInt);
    }
  }
  
  private void updateFontSizePreferences(int paramInt)
  {
    ARPrefsEditor localARPrefsEditor = new ARPrefsEditor(this.mContext.getSharedPreferences("com.adobe.reader.preferences", 0));
    switch (getCommentSubtype(this.mNativeCommentEditHandler))
    {
    }
    for (;;)
    {
      localARPrefsEditor.apply();
      return;
      localARPrefsEditor.putInt("freetextFontSize", paramInt);
    }
  }
  
  private void updateOpacityPreferences(float paramFloat)
  {
    ARPrefsEditor localARPrefsEditor = new ARPrefsEditor(this.mContext.getSharedPreferences("com.adobe.reader.preferences", 0));
    switch (getCommentSubtype(this.mNativeCommentEditHandler))
    {
    }
    for (;;)
    {
      localARPrefsEditor.apply();
      return;
      localARPrefsEditor.putFloat("inkOpacity", paramFloat);
      continue;
      localARPrefsEditor.putFloat("highlightOpacity", paramFloat);
      continue;
      localARPrefsEditor.putFloat("freetextOpacity", paramFloat);
      continue;
      localARPrefsEditor.putFloat("strikeoutOpacity", paramFloat);
      continue;
      localARPrefsEditor.putFloat("underlineOpacity", paramFloat);
    }
  }
  
  private void updateStrokeWidthPreferences(int paramInt)
  {
    ARPrefsEditor localARPrefsEditor = new ARPrefsEditor(this.mContext.getSharedPreferences("com.adobe.reader.preferences", 0));
    switch (getCommentSubtype(this.mNativeCommentEditHandler))
    {
    }
    for (;;)
    {
      localARPrefsEditor.apply();
      return;
      localARPrefsEditor.putInt("inkStrokeWidth", paramInt);
    }
  }
  
  public void disableEditMode()
  {
    if (isActive()) {
      disableEditMode(this.mNativeCommentEditHandler);
    }
  }
  
  public void enterEditMode(int paramInt1, int paramInt2, int paramInt3)
  {
    this.mIsCommentEditActive = true;
    this.mProperties = paramInt3;
    this.mIsCommentMovable = false;
    setSelection();
    if ((paramInt3 & 0xFFFFFFFE & 0xFFFFFFFE) != 0) {
      launchContextMenu();
    }
  }
  
  public void exitEditMode()
  {
    removeSelection();
    disableAllUIElements();
    this.mIsCommentEditActive = false;
    this.mProperties = 0;
  }
  
  public Rect getBoundingRect()
  {
    return getRect(this.mNativeCommentEditHandler);
  }
  
  public int getColor()
  {
    return getColor(this.mNativeCommentEditHandler);
  }
  
  public RectF getCurrentRectForGSVInDocSpace()
  {
    return this.mGSView.getCurrentRectForGSVInDocSpace();
  }
  
  public float getFontSize()
  {
    return getFontSize(this.mNativeCommentEditHandler);
  }
  
  public Rect getGSViewRect()
  {
    return this.mGSView.getCurrentRect();
  }
  
  public int getProperties()
  {
    return this.mProperties;
  }
  
  public Rect getRectForGSV()
  {
    return getRectForGSV(this.mNativeCommentEditHandler);
  }
  
  public void handleColorChange(int paramInt1, int paramInt2, int paramInt3)
  {
    updateColorPreferences(paramInt1 << 16 | paramInt2 << 8 | paramInt3 << 0);
    colorChanged(this.mNativeCommentEditHandler, paramInt1 / 255.0F, paramInt2 / 255.0F, paramInt3 / 255.0F);
  }
  
  public void handleDelete()
  {
    clear(this.mNativeCommentEditHandler);
  }
  
  public void handleEditText()
  {
    editText(this.mNativeCommentEditHandler);
  }
  
  public void handleFontSizeChange(int paramInt)
  {
    updateFontSizePreferences(paramInt);
    fontSizeChanged(this.mNativeCommentEditHandler, paramInt);
  }
  
  public void handleOpacityChange(float paramFloat)
  {
    updateOpacityPreferences(paramFloat);
    opacityChanged(this.mNativeCommentEditHandler, paramFloat);
  }
  
  public void handleOpenPopup()
  {
    openPopup(this.mNativeCommentEditHandler);
  }
  
  public void handleStrokeWidthChange(int paramInt)
  {
    updateStrokeWidthPreferences(paramInt);
    strokeWidthChanged(this.mNativeCommentEditHandler, paramInt);
  }
  
  public boolean hasMovedOrResized()
  {
    return (this.mIsCommentMovable) && (this.mGSView != null) && (this.mGSView.hasMovedOrResized());
  }
  
  public boolean isActive()
  {
    return this.mIsCommentEditActive;
  }
  
  public void launchColorPicker()
  {
    disableAllUIElements();
    this.mColorPickerInstance = new ColorPickerWidget(this.mContext, this);
    this.mColorPickerInstance.setFocusable(false);
    this.mColorPickerInstance.setAnimationStyle(2131099661);
    showActiveUIElements();
  }
  
  public void launchFontSizePicker()
  {
    disableAllUIElements();
    this.mFontSizePickerInstance = new FontSizePickerWidget(this.mContext, this);
    this.mFontSizePickerInstance.setFocusable(false);
    this.mFontSizePickerInstance.setAnimationStyle(2131099661);
    showActiveUIElements();
  }
  
  public void launchOpacityPicker()
  {
    disableAllUIElements();
    this.mOpacityPickerInstance = new OpacityPickerWidget(this.mContext, this);
    this.mOpacityPickerInstance.setFocusable(false);
    this.mOpacityPickerInstance.setAnimationStyle(2131099661);
    showActiveUIElements();
  }
  
  public void launchStrokeWidthPicker()
  {
    disableAllUIElements();
    this.mStrokeWidthPickerInstance = new StrokeWidthPickerWidget(this.mContext, this);
    this.mStrokeWidthPickerInstance.setFocusable(false);
    this.mStrokeWidthPickerInstance.setAnimationStyle(2131099661);
    showActiveUIElements();
  }
  
  public void notifyGSVTouchUpEvent()
  {
    showActiveUIElements();
  }
  
  public void onFontSizeChanged(int paramInt)
  {
    handleFontSizeChange(paramInt);
  }
  
  public void onStrokeWidthChanged(int paramInt)
  {
    handleStrokeWidthChange(paramInt);
  }
  
  public void panEnded()
  {
    showActiveUIElements();
  }
}
