package com.adobe.reader;

import java.io.File;

public class ARPortfolioViewManager
{
  private ARPortfolio mPortfolio;
  private String mPortfolioDataDir = null;
  private String mPortfolioOpenFileName = null;
  private long mPortfolioViewManager;
  
  public ARPortfolioViewManager(long paramLong, String paramString)
  {
    this.mPortfolioViewManager = createPortfolioViewManager(paramLong);
    this.mPortfolioDataDir = paramString;
    setPortfolioDataDir(this.mPortfolioViewManager, this.mPortfolioDataDir);
  }
  
  private native void changeDirectory(long paramLong, String paramString);
  
  private void checkPortfolioViewManager()
  {
    if (this.mPortfolioViewManager == 0L) {
      throw new IllegalStateException();
    }
  }
  
  private native long createPortfolioViewManager(long paramLong);
  
  private native void destroyPortfolioViewManager(long paramLong);
  
  private native String getCurrentDirectory(long paramLong);
  
  private native void getDefaultAttachmentEntry(long paramLong);
  
  private native void getEntriesInDirectory(long paramLong);
  
  private native int getSecurityHandlerType(long paramLong);
  
  private native boolean hasAttachments(long paramLong);
  
  private native void openFile(long paramLong, String paramString);
  
  private native void setCancelFileDownload(long paramLong, boolean paramBoolean);
  
  private native void setPortfolioDataDir(long paramLong, String paramString);
  
  public void changeDirectory(String paramString)
  {
    checkPortfolioViewManager();
    changeDirectory(this.mPortfolioViewManager, paramString);
  }
  
  public void cleanUpPortfolioCache()
  {
    this.mPortfolio.cleanupCache(this.mPortfolioOpenFileName);
  }
  
  public void finishSendingPortfolioFileData()
  {
    if (this.mPortfolioOpenFileName != null)
    {
      File localFile = new File(this.mPortfolioOpenFileName);
      if ((localFile != null) && (localFile.exists())) {
        localFile.deleteOnExit();
      }
    }
    this.mPortfolio.onFileDownloadComplete();
  }
  
  public String getCurrentDirectory()
  {
    checkPortfolioViewManager();
    return getCurrentDirectory(this.mPortfolioViewManager);
  }
  
  public void getDefaultAttachmentEntry()
  {
    checkPortfolioViewManager();
    getDefaultAttachmentEntry(this.mPortfolioViewManager);
  }
  
  public void getEntriesInDirectory()
  {
    checkPortfolioViewManager();
    getEntriesInDirectory(this.mPortfolioViewManager);
  }
  
  public String getPortfolioFileNameToOpen()
  {
    return this.mPortfolioOpenFileName;
  }
  
  public int getSecurityHandlerType()
  {
    return getSecurityHandlerType(this.mPortfolioViewManager);
  }
  
  public boolean hasAttachments()
  {
    checkPortfolioViewManager();
    return hasAttachments(this.mPortfolioViewManager);
  }
  
  public void onDefaultAttachmentEntryFound(String paramString)
  {
    if ((paramString == null) || (paramString.length() == 0)) {
      return;
    }
    this.mPortfolio.openAttachment(paramString);
  }
  
  public void onDirectoryChange()
  {
    this.mPortfolio.updateChildFilesAndPopulateList();
  }
  
  public void openFile(String paramString)
  {
    checkPortfolioViewManager();
    openFile(this.mPortfolioViewManager, paramString);
  }
  
  public void release()
  {
    destroyPortfolioViewManager(this.mPortfolioViewManager);
    this.mPortfolioViewManager = 0L;
  }
  
  public void setCancelFileDownload(boolean paramBoolean)
  {
    checkPortfolioViewManager();
    setCancelFileDownload(this.mPortfolioViewManager, paramBoolean);
  }
  
  public void setPortfolioHandler(ARPortfolio paramARPortfolio)
  {
    this.mPortfolio = paramARPortfolio;
  }
  
  public void startSendingPortfolioFileData(String paramString)
  {
    this.mPortfolioOpenFileName = (this.mPortfolioDataDir + paramString);
  }
  
  public void updateEntryListInDirectory(String[] paramArrayOfString, boolean paramBoolean)
  {
    this.mPortfolio.populateListWithEntries(paramArrayOfString, paramBoolean);
  }
}
