package com.adobe.reader;

import android.graphics.Rect;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnKeyListener;
import android.widget.RelativeLayout.LayoutParams;

public class ARUIListView
  extends View
  implements ARChoiceView, ARUITableView.ARUITableResultsListener, IPlatformView, View.OnKeyListener
{
  private boolean mCommitOnSelChange;
  private long mField;
  private int mHeight;
  private boolean mMultiSelect;
  private String[] mOptions;
  private int[] mSelectedIndexes;
  private ARUITableView mTableView;
  private int mWidth;
  
  public ARUIListView(ARViewer paramARViewer, int paramInt1, int paramInt2, int paramInt3, int paramInt4, long paramLong)
  {
    super(paramARViewer);
    this.mField = paramLong;
    this.mWidth = paramInt1;
    this.mHeight = paramInt2;
    this.mMultiSelect = false;
    this.mOptions = null;
    this.mSelectedIndexes = null;
    this.mTableView = null;
    paramARViewer = new RelativeLayout.LayoutParams(this.mWidth, this.mHeight);
    paramARViewer.setMargins(paramInt3, paramInt4, 0, 0);
    setLayoutParams(paramARViewer);
    setFocusable(true);
    setFocusableInTouchMode(true);
    setBackgroundResource(0);
    setOnKeyListener(this);
  }
  
  private native void commitAppearance(long paramLong, int[] paramArrayOfInt, int paramInt);
  
  private native void commitSelections(long paramLong, int[] paramArrayOfInt, int paramInt);
  
  private void displayTable()
  {
    this.mTableView = new ARUITableView((ARViewer)getContext(), this);
    if (this.mMultiSelect)
    {
      this.mTableView.displayMultiChoiceTable(this.mOptions, this.mSelectedIndexes);
      return;
    }
    this.mTableView.displaySingleChoiceTable(this.mOptions, this.mSelectedIndexes);
  }
  
  public void adjustToTheNewScroll() {}
  
  public void adjustToTheNewZoom()
  {
    if (this.mField != 0L)
    {
      Rect localRect = ARUIView.updateViewBounds(this, this.mField);
      if (localRect != null)
      {
        this.mWidth = Math.abs(localRect.right - localRect.left);
        this.mHeight = Math.abs(localRect.bottom - localRect.top);
      }
    }
  }
  
  public void commit()
  {
    commitSelections(this.mField, this.mSelectedIndexes, this.mSelectedIndexes.length);
  }
  
  public void finalZoomLevel(double paramDouble) {}
  
  public float getTextWidth(String paramString)
  {
    return 0.0F;
  }
  
  public String getValueProperty()
  {
    return "";
  }
  
  public void initialZoomLevel(double paramDouble) {}
  
  protected void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    displayTable();
  }
  
  protected void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    if (this.mTableView != null) {
      this.mTableView.dismiss();
    }
  }
  
  public boolean onKey(View paramView, int paramInt, KeyEvent paramKeyEvent)
  {
    return ARWidgetToolbars.onKey(paramView, paramInt, paramKeyEvent, false);
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    setMeasuredDimension(this.mWidth, this.mHeight);
  }
  
  public void onTableResults(int[] paramArrayOfInt)
  {
    this.mTableView = null;
    this.mSelectedIndexes = paramArrayOfInt;
    commitAppearance(this.mField, this.mSelectedIndexes, this.mSelectedIndexes.length);
    if (this.mCommitOnSelChange) {
      commit();
    }
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    if (paramMotionEvent.getAction() == 0)
    {
      displayTable();
      return true;
    }
    return false;
  }
  
  public void panEnded() {}
  
  public void panStarted() {}
  
  public void setCommitOnSelChangeProperty(boolean paramBoolean)
  {
    this.mCommitOnSelChange = paramBoolean;
  }
  
  public void setCursor(int paramInt) {}
  
  public void setEditProperty(boolean paramBoolean) {}
  
  public void setFontProperty(String paramString, float paramFloat) {}
  
  public void setFormatProperty(int paramInt) {}
  
  public void setMultiSelectProperty(boolean paramBoolean)
  {
    this.mMultiSelect = paramBoolean;
  }
  
  public void setOptionsProperty(String[] paramArrayOfString)
  {
    this.mOptions = paramArrayOfString;
  }
  
  public void setPaddingProperty(int paramInt) {}
  
  public void setQuaddingProperty(int paramInt) {}
  
  public void setRotationProperty(int paramInt) {}
  
  public void setSpellCheckProperty(boolean paramBoolean) {}
  
  public void setTextColorProperty(float paramFloat1, float paramFloat2, float paramFloat3) {}
  
  public void setValueProperty(String paramString) {}
  
  public void setValueProperty(String paramString, int[] paramArrayOfInt)
  {
    this.mSelectedIndexes = paramArrayOfInt;
  }
}
