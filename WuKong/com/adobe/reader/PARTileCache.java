package com.adobe.reader;

import java.io.File;
import java.util.concurrent.atomic.AtomicInteger;

class PARTileCache
{
  private static final AtomicInteger cacheIDGenerator = new AtomicInteger(0);
  private final int kInitialCapacity = 5;
  private final float kLoadFactor = 0.75F;
  private int mCacheID = 0;
  private String mDiskCachePath = null;
  private SynchronizedTileCache mMap = new SynchronizedTileCache(5, 0.75F);
  
  public PARTileCache()
  {
    setDiskCachePath();
  }
  
  private void removeTile(PARTileKey paramPARTileKey)
  {
    paramPARTileKey = this.mMap.remove(paramPARTileKey);
    if (paramPARTileKey != null) {
      paramPARTileKey.releaseRef();
    }
  }
  
  private void setDiskCachePath()
  {
    String str = ARViewer.getCurrentActivity().getTileCacheDirectory();
    if (str != null) {
      str = str + File.separator + this.mCacheID;
    }
    try
    {
      File localFile = new File(str);
      boolean bool = true;
      if (!localFile.exists()) {
        bool = localFile.mkdirs();
      }
      if (bool) {
        this.mDiskCachePath = (str + File.separator);
      }
      return;
    }
    catch (SecurityException localSecurityException) {}
  }
  
  public int calculateTileHeight(int paramInt1, int paramInt2)
  {
    return ARApp.getARApp().getBitmapPool().getBitmapHeight(paramInt1, paramInt2);
  }
  
  public int calculateTileWidth(int paramInt1, int paramInt2)
  {
    return ARApp.getARApp().getBitmapPool().getBitmapWidth(paramInt1, paramInt2);
  }
  
  public boolean canFitTile(int paramInt1, int paramInt2, boolean paramBoolean)
  {
    Object localObject = ARApp.getARApp().getBitmapPool();
    if (paramBoolean)
    {
      localObject = ARViewer.getCurrentActivity().getPageView().getDocViewManager().getPlatformThumbnailManager();
      if (((PARThumbnailManager)localObject).getCurrentMemoryUsage() + PARTile.calculateTileSize(paramInt1, paramInt2) > ((PARThumbnailManager)localObject).getMaxMemoryUsage()) {
        return false;
      }
    }
    else
    {
      return ((ARBitmapPool)localObject).canObtainBitmap(paramInt1, paramInt2, false);
    }
    return true;
  }
  
  public String getDiskCachePath()
  {
    return this.mDiskCachePath;
  }
  
  public PARTile getTile(int paramInt1, int paramInt2, double paramDouble, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8, boolean paramBoolean)
  {
    PARTileKey localPARTileKey = new PARTileKey(paramInt1, paramInt2, paramDouble, paramInt3, paramInt4, paramInt5, paramInt6, paramInt7, paramInt8);
    return this.mMap.getTile(localPARTileKey, paramBoolean);
  }
  
  public void removeTile(int paramInt1, int paramInt2, double paramDouble, int paramInt3, int paramInt4, int paramInt5, int paramInt6, int paramInt7, int paramInt8)
  {
    removeTile(new PARTileKey(paramInt1, paramInt2, paramDouble, paramInt3, paramInt4, paramInt5, paramInt6, paramInt7, paramInt8));
  }
}
