package com.adobe.reader;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.DisplayMetrics;
import android.view.ContextMenu;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.Display;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnFocusChangeListener;
import android.view.WindowManager;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.view.animation.TranslateAnimation;
import android.widget.AdapterView.AdapterContextMenuInfo;
import android.widget.Button;
import android.widget.EditText;
import android.widget.FrameLayout.LayoutParams;
import android.widget.ImageButton;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.TextView;
import android.widget.TextView.OnEditorActionListener;
import android.widget.Toast;
import com.adobe.reader.cloud.CloudUtilities;
import com.adobe.reader.cloud.network.CloudFileTransferService.TRANSFER_TYPE;
import com.adobe.reader.cloud.network.CloudNetworkManager;
import com.adobe.reader.cloud.ui.CloudUIHandler;
import com.adobe.reader.cloud.ui.FileTransferActivity;
import java.io.File;
import java.io.IOException;
import java.util.Locale;

public class ARSplitPane
  extends FragmentActivity
  implements LeftPaneFragment.LeftPaneEntryClickListener, View.OnClickListener
{
  public static final String BROADCAST_CLOUD_LOGIN_SUCCESS = "com.adobe.reader.ARSplitPane.cloudLoginSuccess";
  public static final String BROADCAST_DOC_MOVED_TO_CLOUD = "com.adobe.reader.ARSplitPane.docMovedToCloud";
  public static final String CONTENT_DOC_PATH = "com.adobe.reader.ARSplitPane.ContentDocPath";
  public static final String LAST_SELECTED_ENTRY = "com.adobe.reader.LAST_SELECTED_ENTRY";
  private static final int SLIDE_ANIMATION_DURATION = 400;
  private static Toast mToast;
  private final String ENGLISH_LANGUAGE = "English";
  private BroadcastReceiver broadcastReceiver_documentMovedToCloud = new BroadcastReceiver()
  {
    public void onReceive(Context paramAnonymousContext, Intent paramAnonymousIntent)
    {
      ARSplitPane.this.setLeftPaneSelectedEntry(2);
      ARSplitPane.this.mRightPaneFragment.showCloudRootFolder();
    }
  };
  private View mClearSearchStringButton;
  private String mCloudFileID = null;
  private int mCurrentLeftPaneSelectedItem = -1;
  private View mFileBrowserCancelSearchButton;
  private EditText mFileBrowserSearchBox;
  private View mFileSearchButton;
  private View mFileSearchLayout;
  private View mLeftHandPane;
  private LeftPaneFragment mLeftPaneFragment;
  private boolean mRefreshRecentsFromCloud = true;
  private View mRightHandPane;
  private RightPaneFragment mRightPaneFragment;
  private boolean mSlideState = false;
  private View mSplitPaneLayout;
  
  public ARSplitPane() {}
  
  private void activateSearchBox()
  {
    this.mFileSearchLayout.setVisibility(0);
    this.mFileBrowserSearchBox.requestFocus();
    if (this.mRightPaneFragment != null) {
      this.mRightPaneFragment.setFileBrowserSearchWasActive(true);
    }
  }
  
  public static void displayErrorToast(String paramString)
  {
    if (mToast == null) {
      mToast = Toast.makeText(ARApp.getAppContext(), "", 0);
    }
    mToast.setText(paramString);
    mToast.show();
  }
  
  private void hideAndResetSearchBox()
  {
    if (this.mRightPaneFragment != null)
    {
      this.mFileBrowserSearchBox.setText("");
      this.mRightPaneFragment.updateSearchString(null);
      this.mFileSearchLayout.setVisibility(8);
      this.mRightPaneFragment.setFileBrowserSearchWasActive(false);
    }
  }
  
  private void onFinish()
  {
    this.mRightPaneFragment.clearObjects();
    finish();
    overridePendingTransition(2130968580, 2130968581);
  }
  
  private void openGettingStartedDoc()
  {
    File localFile = ARUtils.copyGettingStarted(this);
    if ((localFile != null) && (localFile.exists())) {
      openFile(localFile);
    }
  }
  
  private void setSlideViewButton()
  {
    if (!isRunningOnTablet())
    {
      localObject = (ImageButton)findViewById(2131493097);
      ((ImageButton)localObject).setVisibility(0);
      ((ImageButton)localObject).setOnClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          if (ARSplitPane.this.mSlideState)
          {
            ARSplitPane.this.slideViewLeft();
            return;
          }
          ARSplitPane.this.slideViewRight();
        }
      });
    }
    Object localObject = getIntent().getStringExtra("com.adobe.reader.ARSplitPane.ContentDocPath");
    if (localObject != null)
    {
      Intent localIntent = new Intent(this, ARViewer.class);
      localIntent.putExtra("com.adobe.reader.ExternalContentData", (String)localObject);
      startActivity(localIntent);
    }
  }
  
  private void setSplitPaneToolbarUI()
  {
    setSplitPaneTopBarToolButtonUI(2131493105, 2130837628, 2130837628, 2130837626);
    setSplitPaneTopBarToolButtonUI(2131493106, 2130837736, 2130837736, 2130837734);
    setSplitPaneTopBarToolButtonUI(2131493107, 2130837794, 2130837794, 2130837792);
    setSplitPaneTopBarToolButtonUI(2131493108, 2130837617, 2130837617, 2130837615);
    setSplitPaneTopBarToolButtonUI(2131493104, 2130837560, 2130837560, 2130837558);
  }
  
  private void setSplitPaneTopBarToolButtonUI(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    ImageButton localImageButton = (ImageButton)findViewById(paramInt1);
    localImageButton.setOnClickListener(this);
    localImageButton.setBackgroundDrawable(new ToolbarButtonDrawable(localImageButton, paramInt2, paramInt3, paramInt4));
  }
  
  private void slideViewLeft()
  {
    if (!this.mSlideState) {
      return;
    }
    TranslateAnimation localTranslateAnimation = new TranslateAnimation(0, 0.0F, 0, (int)getResources().getDimension(2131296470) * -1, 1, 0.0F, 1, 0.0F);
    localTranslateAnimation.setDuration(400L);
    localTranslateAnimation.setFillEnabled(false);
    localTranslateAnimation.setAnimationListener(new Animation.AnimationListener()
    {
      public void onAnimationEnd(Animation paramAnonymousAnimation)
      {
        paramAnonymousAnimation = (RelativeLayout.LayoutParams)ARSplitPane.this.mRightHandPane.getLayoutParams();
        paramAnonymousAnimation.addRule(1, 0);
        ARSplitPane.this.mRightHandPane.setLayoutParams(paramAnonymousAnimation);
        ARSplitPane.this.mSplitPaneLayout.setLayoutParams(new FrameLayout.LayoutParams(-1, -1));
        ARSplitPane.this.mLeftHandPane.setVisibility(4);
        ARSplitPane.this.mRightHandPane.clearAnimation();
        ARSplitPane.this.mSlideState = false;
      }
      
      public void onAnimationRepeat(Animation paramAnonymousAnimation) {}
      
      public void onAnimationStart(Animation paramAnonymousAnimation) {}
    });
    this.mRightHandPane.startAnimation(localTranslateAnimation);
  }
  
  private void slideViewRight()
  {
    if (this.mSlideState) {
      return;
    }
    TranslateAnimation localTranslateAnimation = new TranslateAnimation(0, 0.0F, 0, (int)getResources().getDimension(2131296470), 1, 0.0F, 1, 0.0F);
    localTranslateAnimation.setDuration(400L);
    localTranslateAnimation.setFillEnabled(false);
    localTranslateAnimation.setAnimationListener(new Animation.AnimationListener()
    {
      public void onAnimationEnd(Animation paramAnonymousAnimation)
      {
        paramAnonymousAnimation = (FrameLayout.LayoutParams)ARSplitPane.this.mSplitPaneLayout.getLayoutParams();
        paramAnonymousAnimation.width = ((int)ARSplitPane.this.getResources().getDimension(2131296470) + ARSplitPane.this.mRightHandPane.getMeasuredWidth());
        ARSplitPane.this.mSplitPaneLayout.setLayoutParams(paramAnonymousAnimation);
        paramAnonymousAnimation = (RelativeLayout.LayoutParams)ARSplitPane.this.mRightHandPane.getLayoutParams();
        paramAnonymousAnimation.addRule(1, ARSplitPane.this.mLeftHandPane.getId());
        ARSplitPane.this.mRightHandPane.setLayoutParams(paramAnonymousAnimation);
        ARSplitPane.this.mRightHandPane.clearAnimation();
        ARSplitPane.this.mSlideState = true;
      }
      
      public void onAnimationRepeat(Animation paramAnonymousAnimation) {}
      
      public void onAnimationStart(Animation paramAnonymousAnimation)
      {
        ARSplitPane.this.mLeftHandPane.setVisibility(0);
      }
    });
    this.mRightHandPane.startAnimation(localTranslateAnimation);
  }
  
  public void downloadCloudFile(String paramString1, String paramString2, long paramLong)
  {
    if (CloudUtilities.isNetworkAvailable(this))
    {
      CloudUtilities.logit("Downloading - " + paramString1);
      CloudUtilities.logit("Downloading - " + paramString2);
      Intent localIntent = new Intent(this, FileTransferActivity.class);
      localIntent.putExtra("TRANSFER_TYPE_key", CloudFileTransferService.TRANSFER_TYPE.DOWNLOAD.ordinal());
      localIntent.putExtra("FILE_PATH_key", paramString1);
      localIntent.putExtra("FILE_ID_key", paramString2);
      localIntent.putExtra("FILE_MODIFIED_DATE_key", paramLong);
      startActivity(localIntent);
      overridePendingTransition(2130968582, 2130968583);
      return;
    }
    displayErrorToast(getString(2131362090));
  }
  
  public int getCurrentLeftPaneSelectedItem()
  {
    return this.mCurrentLeftPaneSelectedItem;
  }
  
  public RightPaneFragment getRightPaneFragment()
  {
    return this.mRightPaneFragment;
  }
  
  public void invalidateRightPaneToolBar(int paramInt1, int paramInt2)
  {
    boolean bool4 = false;
    int i = paramInt2 + paramInt1;
    boolean bool1;
    boolean bool2;
    if (i == 1)
    {
      bool1 = true;
      if ((paramInt1 < 1) || (paramInt2 != 0)) {
        break label193;
      }
      bool2 = true;
      label27:
      if (i < 1) {
        break label199;
      }
    }
    label193:
    label199:
    for (boolean bool3 = true;; bool3 = false)
    {
      if (i == 0) {
        bool4 = true;
      }
      View localView = findViewById(2131493107);
      ((ToolbarButtonDrawable)localView.getBackground()).setEnabled(bool1);
      localView.setEnabled(bool1);
      localView = findViewById(2131493105);
      ((ToolbarButtonDrawable)localView.getBackground()).setEnabled(bool2);
      localView.setEnabled(bool2);
      localView = findViewById(2131493106);
      ((ToolbarButtonDrawable)localView.getBackground()).setEnabled(bool2);
      localView.setEnabled(bool2);
      localView = findViewById(2131493108);
      ((ToolbarButtonDrawable)localView.getBackground()).setEnabled(bool3);
      localView.setEnabled(bool3);
      localView = findViewById(2131493104);
      ((ToolbarButtonDrawable)localView.getBackground()).setEnabled(bool4);
      localView.setEnabled(bool4);
      return;
      bool1 = false;
      break;
      bool2 = false;
      break label27;
    }
  }
  
  public boolean isRunningOnTablet()
  {
    return getResources().getBoolean(2131165184);
  }
  
  public void onBackPressed()
  {
    View localView = findViewById(2131493003);
    if (localView.isShown()) {
      localView.setVisibility(8);
    }
    do
    {
      return;
      if (this.mFileSearchLayout.isShown())
      {
        this.mFileBrowserSearchBox.setText("");
        this.mRightPaneFragment.updateSearchString(null);
        this.mFileSearchLayout.setVisibility(8);
        this.mRightPaneFragment.setFileBrowserSearchWasActive(false);
        return;
      }
    } while (this.mRightPaneFragment.handleBackPressed(this.mCurrentLeftPaneSelectedItem));
    if (this.mSlideState)
    {
      slideViewLeft();
      return;
    }
    setResult(101, new Intent());
    onFinish();
  }
  
  public void onClick(View paramView)
  {
    switch (paramView.getId())
    {
    default: 
      return;
    case 2131493108: 
      this.mRightPaneFragment.deleteSelectedFiles();
      return;
    case 2131493106: 
      this.mRightPaneFragment.moveSelectedFiles();
      return;
    case 2131493105: 
      this.mRightPaneFragment.duplicateSelectedFiles();
      return;
    case 2131493107: 
      this.mRightPaneFragment.renameSelectedFile();
      return;
    }
    this.mRightPaneFragment.showCreateDirectoryForFolderView();
  }
  
  public void onConfigurationChanged(Configuration paramConfiguration)
  {
    super.onConfigurationChanged(paramConfiguration);
    if (this.mSlideState)
    {
      paramConfiguration = new DisplayMetrics();
      getWindowManager().getDefaultDisplay().getMetrics(paramConfiguration);
      FrameLayout.LayoutParams localLayoutParams = (FrameLayout.LayoutParams)this.mSplitPaneLayout.getLayoutParams();
      int i = (int)getResources().getDimension(2131296470);
      localLayoutParams.width = (paramConfiguration.widthPixels + i);
      this.mSplitPaneLayout.setLayoutParams(localLayoutParams);
    }
  }
  
  public boolean onContextItemSelected(MenuItem paramMenuItem)
  {
    AdapterView.AdapterContextMenuInfo localAdapterContextMenuInfo = (AdapterView.AdapterContextMenuInfo)paramMenuItem.getMenuInfo();
    switch (paramMenuItem.getItemId())
    {
    default: 
      return false;
    }
    this.mRightPaneFragment.deleteFileAtIndex(localAdapterContextMenuInfo.position);
    return true;
  }
  
  public void onCreate(Bundle paramBundle)
  {
    super.onCreate(paramBundle);
    setContentView(2130903080);
    setSplitPaneToolbarUI();
    this.mLeftPaneFragment = ((LeftPaneFragment)getSupportFragmentManager().findFragmentById(2131493090));
    this.mLeftPaneFragment.setLeftPaneEntryClickListener(this);
    this.mLeftPaneFragment.enablePersistentSelection();
    this.mRightPaneFragment = ((RightPaneFragment)getSupportFragmentManager().findFragmentById(2131493092));
    this.mRefreshRecentsFromCloud = true;
    this.mCurrentLeftPaneSelectedItem = 2131361899;
    this.mRightPaneFragment.display(this, this.mCurrentLeftPaneSelectedItem);
    this.mSplitPaneLayout = findViewById(2131493088);
    this.mLeftHandPane = findViewById(2131493089);
    this.mRightHandPane = findViewById(2131493091);
    setSlideViewButton();
    this.mFileSearchLayout = findViewById(2131493113);
    this.mFileBrowserSearchBox = ((EditText)findViewById(2131493114));
    this.mFileBrowserSearchBox.setOnEditorActionListener(new TextView.OnEditorActionListener()
    {
      public boolean onEditorAction(TextView paramAnonymousTextView, int paramAnonymousInt, KeyEvent paramAnonymousKeyEvent)
      {
        if ((paramAnonymousKeyEvent != null) && (paramAnonymousKeyEvent.getKeyCode() == 66))
        {
          ARSplitPane.this.mFileBrowserSearchBox.clearFocus();
          ARUtils.hideKeyboard(ARSplitPane.this.mFileBrowserSearchBox);
          return true;
        }
        return false;
      }
    });
    this.mFileBrowserSearchBox.addTextChangedListener(new TextWatcher()
    {
      public void afterTextChanged(Editable paramAnonymousEditable) {}
      
      public void beforeTextChanged(CharSequence paramAnonymousCharSequence, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3) {}
      
      public void onTextChanged(CharSequence paramAnonymousCharSequence, int paramAnonymousInt1, int paramAnonymousInt2, int paramAnonymousInt3)
      {
        if (ARSplitPane.this.mFileSearchLayout.getVisibility() != 0) {
          return;
        }
        if (paramAnonymousCharSequence.length() == 0) {
          ARSplitPane.this.mClearSearchStringButton.setVisibility(4);
        }
        for (;;)
        {
          ARSplitPane.this.mRightPaneFragment.updateSearchString(paramAnonymousCharSequence.toString());
          return;
          ARSplitPane.this.mClearSearchStringButton.setVisibility(0);
        }
      }
    });
    this.mFileSearchButton = findViewById(2131493109);
    this.mFileSearchButton.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        ARSplitPane.this.activateSearchBox();
      }
    });
    this.mClearSearchStringButton = findViewById(2131493116);
    this.mClearSearchStringButton.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        ARSplitPane.this.mFileBrowserSearchBox.setText("");
        if (ARSplitPane.this.mRightPaneFragment != null) {
          ARSplitPane.this.mRightPaneFragment.updateSearchString(null);
        }
      }
    });
    this.mFileBrowserCancelSearchButton = findViewById(2131493115);
    this.mFileBrowserCancelSearchButton.setOnClickListener(new View.OnClickListener()
    {
      public void onClick(View paramAnonymousView)
      {
        if (ARSplitPane.this.mRightPaneFragment != null) {
          ARSplitPane.this.hideAndResetSearchBox();
        }
      }
    });
    this.mFileBrowserSearchBox.setOnFocusChangeListener(new View.OnFocusChangeListener()
    {
      public void onFocusChange(View paramAnonymousView, boolean paramAnonymousBoolean)
      {
        if (paramAnonymousBoolean)
        {
          ARUtils.showKeyboard(ARSplitPane.this.mFileBrowserSearchBox);
          return;
        }
        ARUtils.hideKeyboard(ARSplitPane.this.mFileBrowserSearchBox);
      }
    });
    if (CloudNetworkManager.isSignedIn()) {
      this.mRightPaneFragment.setupCloudUIHandler();
    }
    LocalBroadcastManager.getInstance(this).registerReceiver(this.broadcastReceiver_documentMovedToCloud, new IntentFilter("com.adobe.reader.ARSplitPane.docMovedToCloud"));
  }
  
  public void onCreateContextMenu(ContextMenu paramContextMenu, View paramView, ContextMenu.ContextMenuInfo paramContextMenuInfo)
  {
    super.onCreateContextMenu(paramContextMenu, paramView, paramContextMenuInfo);
    getMenuInflater().inflate(2131427329, paramContextMenu);
  }
  
  public boolean onCreateOptionsMenu(Menu paramMenu)
  {
    getMenuInflater().inflate(2131427333, paramMenu);
    return true;
  }
  
  public void onDestroy()
  {
    super.onDestroy();
    LocalBroadcastManager.getInstance(this).unregisterReceiver(this.broadcastReceiver_documentMovedToCloud);
  }
  
  public void onEditButtonClick(View paramView)
  {
    if (((Button)paramView).getText().toString().equals(getResources().getString(2131361908)))
    {
      this.mRightPaneFragment.enterDocumentEditMode();
      return;
    }
    this.mRightPaneFragment.exitDocumentEditMode();
  }
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent)
  {
    if (84 == paramInt)
    {
      if (this.mFileSearchLayout.isShown()) {
        hideAndResetSearchBox();
      }
      for (;;)
      {
        return true;
        if ((!this.mSlideState) && (this.mRightPaneFragment.canShowSearchBox())) {
          activateSearchBox();
        }
      }
    }
    return super.onKeyDown(paramInt, paramKeyEvent);
  }
  
  public void onLeftPaneEntryClicked(LeftPaneFragment.LeftPaneEntry paramLeftPaneEntry)
  {
    this.mCurrentLeftPaneSelectedItem = paramLeftPaneEntry.mEntryTitleResID;
    this.mRightPaneFragment.display(this, this.mCurrentLeftPaneSelectedItem);
    if (this.mSlideState) {
      slideViewLeft();
    }
  }
  
  public boolean onOptionsItemSelected(MenuItem paramMenuItem)
  {
    switch (paramMenuItem.getItemId())
    {
    }
    for (;;)
    {
      return false;
      startActivity(new Intent(this, ARAboutActivity.class));
      return true;
      startActivity(new Intent(this, AutomationList.class));
      return true;
      this.mRightPaneFragment.clearRecentFileList();
      return true;
      openGettingStartedDoc();
      return true;
      startActivity(new Intent(this, ARUnitTestActivity.class));
      return true;
      startActivity(new Intent(this, ARSettingsActivity.class));
      return true;
      this.mRightPaneFragment.getCloudUIHandler().signOut();
    }
  }
  
  public void onPause()
  {
    super.onPause();
    this.mRightPaneFragment.saveDocumentViewState();
  }
  
  public boolean onPrepareOptionsMenu(Menu paramMenu)
  {
    if (getResources().getConfiguration().locale.getDisplayLanguage().equals("English"))
    {
      paramMenu.findItem(2131493162).setVisible(true);
      paramMenu.findItem(2131493165).setVisible(false);
      if (this.mCurrentLeftPaneSelectedItem != 2131361899) {
        break label158;
      }
      MenuItem localMenuItem = paramMenu.findItem(2131493163);
      localMenuItem.setVisible(true);
      localMenuItem.setEnabled(this.mRightPaneFragment.recentFilesExist());
    }
    for (;;)
    {
      if (((this.mCurrentLeftPaneSelectedItem != 2131361901) && (this.mCurrentLeftPaneSelectedItem != 2131361902)) || (!CloudNetworkManager.isSignedIn())) {
        break label177;
      }
      paramMenu.findItem(2131493164).setVisible(true);
      return true;
      paramMenu.findItem(2131493162).setVisible(false);
      break;
      label158:
      paramMenu.findItem(2131493163).setVisible(false);
    }
    label177:
    paramMenu.findItem(2131493164).setVisible(false);
    return true;
  }
  
  public void onResume()
  {
    super.onResume();
    if (ARViewer.sViewerLaunchedFromOthers)
    {
      finish();
      ARViewer.sViewerLaunchedFromOthers = false;
    }
  }
  
  public void onViewToggleButtonClicked(View paramView)
  {
    this.mRightPaneFragment.toggleViewMode(paramView);
  }
  
  public void openCloudFile(File paramFile, String paramString)
  {
    this.mCloudFileID = paramString;
    openFile(paramFile);
  }
  
  public void openFile(File paramFile)
  {
    try
    {
      Intent localIntent = new Intent(this, ARViewer.class);
      localIntent.putExtra("com.adobe.reader.FileBrowserReturnData", paramFile.getCanonicalPath());
      localIntent.putExtra("com.adobe.reader.LEFT_PANE_ENTRY", this.mCurrentLeftPaneSelectedItem);
      localIntent.putExtra("com.adobe.reader.CloudFileID", this.mCloudFileID);
      startActivity(localIntent);
      return;
    }
    catch (IOException paramFile)
    {
      Toast.makeText(this, 2131361833, 1500).show();
      return;
    }
    finally
    {
      this.mCloudFileID = null;
    }
  }
  
  public void refreshLeftPane()
  {
    this.mLeftPaneFragment.refresh();
  }
  
  public boolean refreshRecentsFromCloud()
  {
    boolean bool = false;
    if (this.mRefreshRecentsFromCloud)
    {
      this.mRefreshRecentsFromCloud = false;
      bool = true;
    }
    return bool;
  }
  
  public void setEditModeToolBarVisibility(boolean paramBoolean)
  {
    RelativeLayout localRelativeLayout = (RelativeLayout)findViewById(2131493103);
    if (paramBoolean) {}
    for (int i = 0;; i = 8)
    {
      localRelativeLayout.setVisibility(i);
      return;
    }
  }
  
  public void setLeftPaneSelectedEntry(int paramInt)
  {
    this.mLeftPaneFragment.setLeftPaneSelectedEntry(paramInt);
  }
}
