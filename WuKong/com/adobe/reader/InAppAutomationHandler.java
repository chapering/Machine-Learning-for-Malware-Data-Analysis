package com.adobe.reader;

import android.content.ComponentName;
import android.content.Context;
import android.os.Bundle;
import android.os.Environment;
import android.util.Log;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.StringTokenizer;

public class InAppAutomationHandler
  implements Thread.UncaughtExceptionHandler
{
  static int FAILURE_COUNT = 0;
  static final String TEST_RESULTS_LOCATION = Environment.getExternalStorageDirectory().getAbsolutePath() + "/PDF/";
  private Context curContext;
  
  public InAppAutomationHandler(Context paramContext)
  {
    this.curContext = paramContext;
    FAILURE_COUNT += 1;
  }
  
  public void uncaughtException(Thread paramThread, Throwable paramThrowable)
  {
    int m = 0;
    int k = 0;
    Log.d("AUTOMATION", "inside inapp hanlder");
    Object localObject = new StringWriter();
    paramThread = new PrintWriter((Writer)localObject);
    paramThrowable.printStackTrace(paramThread);
    localObject = localObject.toString();
    paramThread.close();
    int i = k;
    int j = m;
    for (;;)
    {
      int n;
      try
      {
        paramThread = new BufferedReader(new FileReader("/data/data/com.adobe.reader/crashfilename.txt"));
        i = k;
        j = m;
        paramThrowable = paramThread.readLine();
        i = k;
        j = m;
        paramThread.close();
        i = k;
        j = m;
        Log.d("Handler", paramThrowable);
        i = k;
        j = m;
        n = paramThrowable.lastIndexOf('.');
        if (n == -1)
        {
          paramThread = paramThrowable;
          break label598;
          i = k;
          j = m;
          paramThrowable = new StringTokenizer(paramThrowable, " ");
          i = k;
          j = m;
          paramThrowable.nextToken();
          i = k;
          j = m;
          k = Integer.parseInt(paramThrowable.nextToken());
          i = k;
          j = k;
          new File(TEST_RESULTS_LOCATION + "Test Results").mkdir();
          i = k;
          j = k;
          paramThread = new FileWriter(TEST_RESULTS_LOCATION + "Test Results/" + paramThread + "_log.txt", false);
          i = k;
          j = k;
          paramThrowable = new BufferedWriter(paramThread);
          i = k;
          j = k;
          paramThrowable.write((String)localObject);
          i = k;
          j = k;
          paramThrowable.close();
          i = k;
          j = k;
          paramThread.close();
          i = k;
          j = k;
          Log.d("AUTOMATION", "after creating log files");
          i = k;
          j = k;
          paramThread = new PrintWriter(new File(TEST_RESULTS_LOCATION + "failure_count.txt"));
          i = k;
          j = k;
          paramThread.print(FAILURE_COUNT);
          i = k;
          j = k;
          Log.d("AUTOMATION", "after writing failure count " + FAILURE_COUNT);
          i = k;
          j = k;
          paramThread.close();
        }
        else
        {
          i = k;
          j = m;
          paramThread = paramThrowable.substring(0, n);
        }
      }
      catch (Exception paramThread)
      {
        j = i;
        paramThread.printStackTrace();
        return;
      }
      finally
      {
        paramThrowable = new Bundle();
        paramThrowable.putInt("TEST_TYPE", j);
        this.curContext.startInstrumentation(new ComponentName(this.curContext, AdobeReaderTest.class), null, paramThrowable);
      }
      i = k;
      j = m;
      paramThrowable = paramThrowable.substring(n + 1);
      continue;
      label598:
      if (n == -1) {
        paramThrowable = "";
      }
    }
  }
}
