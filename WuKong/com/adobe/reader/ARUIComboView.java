package com.adobe.reader;

import android.graphics.Point;
import android.graphics.Rect;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnKeyListener;
import android.widget.LinearLayout;
import android.widget.RelativeLayout.LayoutParams;

public class ARUIComboView
  extends LinearLayout
  implements ARChoiceView, ARUITableView.ARUITableResultsListener, IPlatformView, View.OnKeyListener, TextWatcher
{
  private int mAfterCount;
  private int mAfterStart;
  private String mAfterString;
  private int mBeforeCount;
  private int mBeforeStart;
  private String mBeforeString;
  private Rect mBounds;
  private boolean mCommitOnSelChange;
  private String mCustomValue;
  private boolean mEdit;
  private long mField;
  private View mFocusedChildView;
  private int mHeight;
  private Point mHitPoint;
  private boolean mMultiSelect;
  private String[] mOptions;
  private int[] mSelectedIndexes;
  private ARUITableView mTableView;
  private ARUIComboTextView mTextView;
  private int mWidth;
  
  public ARUIComboView(ARViewer paramARViewer, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6, long paramLong)
  {
    super(paramARViewer);
    this.mBounds = new Rect(paramInt3, paramInt4, paramInt3 + paramInt1, paramInt4 + paramInt2);
    this.mHitPoint = new Point(paramInt5, paramInt6);
    this.mField = paramLong;
    this.mWidth = paramInt1;
    this.mHeight = paramInt2;
    this.mTextView = null;
    this.mEdit = false;
    this.mMultiSelect = false;
    this.mCommitOnSelChange = false;
    this.mOptions = null;
    this.mSelectedIndexes = null;
    this.mCustomValue = null;
    this.mTableView = null;
    this.mFocusedChildView = null;
    this.mBeforeString = null;
    this.mBeforeStart = -1;
    this.mBeforeCount = -1;
    this.mAfterString = null;
    this.mAfterStart = -1;
    this.mAfterCount = -1;
    RelativeLayout.LayoutParams localLayoutParams = new RelativeLayout.LayoutParams(paramInt1, paramInt2);
    localLayoutParams.setMargins(paramInt3, paramInt4, 0, 0);
    setLayoutParams(localLayoutParams);
    this.mTextView = new ARUIComboTextView(paramARViewer, paramLong);
    addView(this.mTextView);
    this.mTextView.addTextChangedListener(this);
    setFocusable(true);
    setFocusableInTouchMode(true);
    setBackgroundResource(0);
    setOnKeyListener(this);
  }
  
  private native void commit(long paramLong, String paramString);
  
  private native void commitTextAndSelections(long paramLong, int[] paramArrayOfInt, int paramInt);
  
  private native double getComboButtonPadding(long paramLong);
  
  private native float getScaledFontSize(long paramLong, float paramFloat);
  
  private native boolean onSelectionChanged(long paramLong, String paramString);
  
  public void adjustToTheNewScroll() {}
  
  public void adjustToTheNewZoom()
  {
    if (this.mField != 0L)
    {
      Rect localRect = ARUIView.updateViewBounds(this, this.mField);
      if (localRect != null)
      {
        this.mWidth = Math.abs(localRect.right - localRect.left);
        this.mHeight = Math.abs(localRect.bottom - localRect.top);
      }
      this.mTextView.setTextSize(0, getScaledFontSize(this.mField, 0.0F));
    }
  }
  
  public void afterTextChanged(Editable paramEditable)
  {
    if ((this.mBeforeString != null) && (this.mBeforeStart != -1) && (this.mBeforeCount != -1) && (this.mAfterString != null) && (this.mAfterStart != -1) && (this.mAfterCount != -1)) {
      ARUITextBasedView.onTextWillChange(this, this.mField, new String(this.mBeforeString), this.mBeforeStart, this.mBeforeCount, new String(this.mAfterString), this.mAfterStart, this.mAfterCount);
    }
  }
  
  public void beforeTextChanged(CharSequence paramCharSequence, int paramInt1, int paramInt2, int paramInt3)
  {
    if (paramCharSequence != null)
    {
      this.mBeforeString = paramCharSequence.toString();
      this.mBeforeStart = paramInt1;
      this.mBeforeCount = paramInt2;
    }
  }
  
  public void clearSelectedItems()
  {
    this.mSelectedIndexes = null;
  }
  
  public void commit()
  {
    if (this.mCustomValue != null)
    {
      commit(this.mField, this.mCustomValue);
      return;
    }
    commitTextAndSelections(this.mField, this.mSelectedIndexes, this.mSelectedIndexes.length);
  }
  
  void displayTable()
  {
    this.mTableView = new ARUITableView((ARViewer)getContext(), this);
    if (this.mMultiSelect)
    {
      this.mTableView.displayMultiChoiceTable(this.mOptions, this.mSelectedIndexes);
      return;
    }
    this.mTableView.displaySingleChoiceTable(this.mOptions, this.mSelectedIndexes);
  }
  
  public void finalZoomLevel(double paramDouble) {}
  
  double getComboButtonPadding()
  {
    if (this.mField != 0L) {
      return getComboButtonPadding(this.mField);
    }
    return 0.0D;
  }
  
  public float getTextWidth(String paramString)
  {
    return this.mTextView.getTextWidth(paramString);
  }
  
  public String getValueProperty()
  {
    return this.mTextView.getValueProperty();
  }
  
  public void initialZoomLevel(double paramDouble) {}
  
  protected void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    if (((this.mSelectedIndexes == null) || (this.mSelectedIndexes.length == 0)) && (this.mTextView.getText() != null) && (this.mCustomValue == null)) {
      this.mCustomValue = this.mTextView.getText().toString();
    }
    if (this.mEdit)
    {
      if (this.mHitPoint.x > this.mBounds.left + (this.mBounds.width() - getComboButtonPadding()))
      {
        displayTable();
        return;
      }
      post(new Runnable()
      {
        public void run()
        {
          ARUIComboView.this.mTextView.requestFocus();
        }
      });
      return;
    }
    displayTable();
    this.mTextView.setEnabled(false);
  }
  
  protected void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    if (this.mTableView != null) {
      this.mTableView.dismiss();
    }
  }
  
  protected void onFocusChanged(boolean paramBoolean, int paramInt, Rect paramRect)
  {
    super.onFocusChanged(paramBoolean, paramInt, paramRect);
    if ((paramBoolean) && (this.mFocusedChildView != null)) {
      this.mFocusedChildView.requestFocus();
    }
  }
  
  public boolean onKey(View paramView, int paramInt, KeyEvent paramKeyEvent)
  {
    return ARWidgetToolbars.onKey(paramView, paramInt, paramKeyEvent, false);
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    super.onLayout(paramBoolean, paramInt1, paramInt2, paramInt3, paramInt4);
    this.mTextView.adjustPadding(this.mField, true);
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    super.onMeasure(paramInt1, paramInt2);
    setMeasuredDimension(this.mWidth, this.mHeight);
  }
  
  public void onTableResults(int[] paramArrayOfInt)
  {
    this.mTableView = null;
    this.mSelectedIndexes = paramArrayOfInt;
    boolean bool1 = true;
    boolean bool2 = true;
    if ((this.mSelectedIndexes != null) && (this.mSelectedIndexes.length > 0))
    {
      int i = this.mSelectedIndexes[0];
      bool1 = bool2;
      if (this.mCommitOnSelChange) {
        bool1 = onSelectionChanged(this.mField, this.mOptions[i]);
      }
      bool2 = bool1;
      if (bool1)
      {
        this.mTextView.setValueProperty(this.mOptions[i]);
        this.mCustomValue = null;
        bool2 = bool1;
      }
    }
    for (;;)
    {
      if ((bool2) && (this.mCommitOnSelChange)) {
        commit();
      }
      return;
      bool2 = bool1;
      if (this.mCustomValue == null)
      {
        this.mTextView.setValueProperty(null);
        bool2 = bool1;
      }
    }
  }
  
  public void onTextChanged(CharSequence paramCharSequence, int paramInt1, int paramInt2, int paramInt3)
  {
    if (paramCharSequence != null)
    {
      this.mAfterString = paramCharSequence.toString();
      this.mAfterStart = paramInt1;
      this.mAfterCount = paramInt3;
    }
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    if (paramMotionEvent.getAction() == 0)
    {
      if (this.mEdit)
      {
        this.mTextView.clearFocus();
        setFocusedChildView(null);
      }
      displayTable();
      return true;
    }
    return false;
  }
  
  public void panEnded() {}
  
  public void panStarted() {}
  
  public void setCommitOnSelChangeProperty(boolean paramBoolean)
  {
    this.mCommitOnSelChange = paramBoolean;
  }
  
  public void setCursor(int paramInt)
  {
    this.mTextView.setSelection(paramInt);
  }
  
  public void setCustomValue(String paramString)
  {
    this.mCustomValue = paramString;
  }
  
  public void setEditProperty(boolean paramBoolean)
  {
    this.mEdit = paramBoolean;
  }
  
  void setFocusedChildView(View paramView)
  {
    this.mFocusedChildView = paramView;
  }
  
  public void setFontProperty(String paramString, float paramFloat)
  {
    this.mTextView.setFontProperty(paramString, paramFloat);
  }
  
  public void setFormatProperty(int paramInt)
  {
    this.mTextView.setFormatProperty(paramInt);
  }
  
  public void setMultiSelectProperty(boolean paramBoolean)
  {
    this.mMultiSelect = paramBoolean;
  }
  
  public void setOptionsProperty(String[] paramArrayOfString)
  {
    this.mOptions = paramArrayOfString;
  }
  
  public void setPaddingProperty(int paramInt)
  {
    this.mTextView.setPaddingProperty(paramInt);
  }
  
  public void setQuaddingProperty(int paramInt)
  {
    this.mTextView.setQuaddingProperty(paramInt);
  }
  
  public void setRotationProperty(int paramInt) {}
  
  public void setSpellCheckProperty(boolean paramBoolean) {}
  
  public void setTextColorProperty(float paramFloat1, float paramFloat2, float paramFloat3)
  {
    this.mTextView.setTextColorProperty(paramFloat1, paramFloat2, paramFloat3);
  }
  
  public void setValueProperty(String paramString)
  {
    this.mTextView.setValueProperty(paramString);
  }
  
  public void setValueProperty(String paramString, int[] paramArrayOfInt)
  {
    this.mTextView.setValueProperty(paramString);
    this.mSelectedIndexes = paramArrayOfInt;
  }
}
