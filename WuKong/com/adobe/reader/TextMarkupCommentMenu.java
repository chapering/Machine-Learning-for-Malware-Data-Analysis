package com.adobe.reader;

import android.view.View;

public class TextMarkupCommentMenu
  extends BasePopupMenu
{
  private static final int CHANGE_COLOR_COMMAND = 1;
  private static final int CHANGE_OPACITY = 2;
  private static final int DELETE_COMMAND = 0;
  private static final float MENU_YAXIS_OFFSET_FACTOR = 1.5F;
  private static final float UPPER_CAP_ON_SCALE_FACTOR = 1.25F;
  private PageView mPageView = null;
  private ARViewer mReader = null;
  private PARTextMarkupCommentUIHandlerAndroid mTextMarkupCommentHandler = null;
  
  public TextMarkupCommentMenu(PARTextMarkupCommentUIHandlerAndroid paramPARTextMarkupCommentUIHandlerAndroid, View paramView)
  {
    super(paramView.getContext());
    this.mTextMarkupCommentHandler = paramPARTextMarkupCommentUIHandlerAndroid;
    this.mReader = ((ARViewer)paramView.getContext());
    addItem(0, this.mReader.getString(2131361904), 2130837618, 0, false, false);
    addSeparator();
    addItem(1, this.mReader.getString(2131361905), 2130837709, 0, false, false);
    addSeparator();
    addItem(2, this.mReader.getString(2131361906), 2130837709, 0, false, false);
    addSeparator();
  }
  
  private int[] getLocationToDraw(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4)
  {
    if (!shouldDrawContextualMenu(paramDouble1, paramDouble2, paramDouble3, paramDouble4)) {
      return null;
    }
    int[] arrayOfInt = new int[2];
    int i = getWidth();
    int j = getHeight();
    arrayOfInt[0] = ((int)(paramDouble1 + paramDouble3) / 2 - i / 2);
    paramDouble1 = this.mPageView.getCurrentZoomLevel() / this.mPageView.getMinZoomLevel();
    if (paramDouble1 < 1.25D) {}
    while (paramDouble2 > (int)(j * 1.5F * paramDouble1 + 0.5D))
    {
      arrayOfInt[1] = ((int)(paramDouble2 - paramDouble1 * (j * 1.5F) + 0.5D));
      return arrayOfInt;
      paramDouble1 = 1.25D;
    }
    if (paramDouble2 < 0.0D)
    {
      arrayOfInt[1] = ((int)(j * 1.5F * this.mPageView.getCurrentZoomLevel() + 0.5D));
      return arrayOfInt;
    }
    arrayOfInt[1] = ((int)(j * 1.5F * this.mPageView.getCurrentZoomLevel() + paramDouble2 + 0.5D));
    return arrayOfInt;
  }
  
  private boolean shouldDrawContextualMenu(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4)
  {
    boolean bool2 = true;
    boolean bool1;
    if (((paramDouble2 < 0.0D) && (paramDouble4 < 0.0D)) || ((paramDouble2 > this.mPageView.getScreenHeight()) && (paramDouble4 > this.mPageView.getScreenHeight()))) {
      bool1 = false;
    }
    do
    {
      do
      {
        do
        {
          return bool1;
          bool1 = bool2;
        } while (paramDouble2 != paramDouble4);
        if ((paramDouble1 < 0.0D) && (paramDouble3 < 0.0D)) {
          break;
        }
        bool1 = bool2;
      } while (paramDouble1 <= this.mPageView.getScreenWidth());
      bool1 = bool2;
    } while (paramDouble3 <= this.mPageView.getScreenWidth());
    return false;
  }
  
  public void onClick(View paramView)
  {
    super.onClick(paramView);
    switch (paramView.getId())
    {
    default: 
      return;
    case 0: 
      this.mTextMarkupCommentHandler.deleteComment();
      return;
    case 1: 
      this.mTextMarkupCommentHandler.setNewColor((float)Math.random(), (float)Math.random(), (float)Math.random());
      return;
    }
    this.mTextMarkupCommentHandler.setNewOpacity((float)Math.random());
  }
  
  public void showAtLocation(PageView paramPageView, int paramInt, double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4)
  {
    getHeight();
    this.mPageView = paramPageView;
    int[] arrayOfInt = getLocationToDraw(paramDouble1, paramDouble2, paramDouble3, paramDouble4);
    if (arrayOfInt != null)
    {
      super.showAtLocation(paramPageView, paramInt, arrayOfInt[0], arrayOfInt[1]);
      return;
    }
    dismiss();
  }
  
  public void update(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4, int paramInt1, int paramInt2)
  {
    int[] arrayOfInt = getLocationToDraw(paramDouble1, paramDouble2, paramDouble3, paramDouble4);
    if (arrayOfInt != null)
    {
      super.update(arrayOfInt[0], arrayOfInt[1], paramInt1, paramInt2);
      return;
    }
    dismiss();
  }
}
