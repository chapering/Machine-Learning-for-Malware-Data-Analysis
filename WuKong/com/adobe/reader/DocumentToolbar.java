package com.adobe.reader;

import android.content.Context;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.view.OrientationEventListener;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.Button;
import android.widget.PopupWindow.OnDismissListener;
import android.widget.Toast;
import android.widget.ViewFlipper;
import com.adobe.reader.cloud.network.CloudNetworkManager;
import java.io.File;

public class DocumentToolbar
  extends ViewFlipper
  implements View.OnClickListener
{
  private OrientationEventListener mOrientationListener;
  private BasePopupMenu mPopupMenu;
  private ToolbarButtonDrawable mPressedDrawable;
  private int mRotation;
  private Animation mSlideInBottom;
  private Animation mSlideInTop;
  private Animation mSlideOutBottom;
  private Animation mSlideOutTop;
  
  static
  {
    if (!DocumentToolbar.class.desiredAssertionStatus()) {}
    for (boolean bool = true;; bool = false)
    {
      $assertionsDisabled = bool;
      return;
    }
  }
  
  public DocumentToolbar(Context paramContext)
  {
    super(paramContext);
    init();
  }
  
  public DocumentToolbar(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    init();
  }
  
  private void init()
  {
    this.mSlideInTop = AnimationUtils.loadAnimation(getContext(), 2130968590);
    this.mSlideInBottom = AnimationUtils.loadAnimation(getContext(), 2130968589);
    this.mSlideOutTop = AnimationUtils.loadAnimation(getContext(), 2130968592);
    this.mSlideOutBottom = AnimationUtils.loadAnimation(getContext(), 2130968591);
    this.mOrientationListener = new OrientationEventListener(getContext())
    {
      public void onOrientationChanged(int paramAnonymousInt)
      {
        ARViewer localARViewer = (ARViewer)DocumentToolbar.this.getContext();
        if ((DocumentToolbar.this.mPopupMenu != null) && (DocumentToolbar.this.mRotation != localARViewer.getScreenRotation())) {
          DocumentToolbar.this.mPopupMenu.dismiss();
        }
      }
    };
  }
  
  private void setupMenu(View paramView)
  {
    ARViewer localARViewer = (ARViewer)paramView.getContext();
    if (localARViewer.isRunningOnTablet())
    {
      this.mPressedDrawable = ((ToolbarButtonDrawable)paramView.getBackground());
      this.mPressedDrawable.setPressed(true);
      this.mRotation = localARViewer.getScreenRotation();
      this.mOrientationListener.enable();
      localARViewer.lockToolbar();
      this.mPopupMenu.setOnDismissListener(new PopupWindow.OnDismissListener()
      {
        public void onDismiss()
        {
          ((ARViewer)DocumentToolbar.this.getContext()).unlockToolbar();
          DocumentToolbar.this.mPressedDrawable.setPressed(false);
          DocumentToolbar.this.mOrientationListener.disable();
        }
      });
      this.mPopupMenu.showAsToolbarMenu(paramView);
      return;
    }
    this.mPopupMenu.showAsContextMenu(paramView);
  }
  
  protected void enableButton(int paramInt, boolean paramBoolean)
  {
    ((ToolbarButtonDrawable)findViewById(paramInt).getBackground()).setEnabled(paramBoolean);
  }
  
  public void onClick(View paramView)
  {
    int i = paramView.getId();
    ARViewer localARViewer = (ARViewer)paramView.getContext();
    ARDocViewManager localARDocViewManager = localARViewer.getPageView().getDocViewManager();
    if (localARDocViewManager != null) {
      localARDocViewManager.exitActiveHandlers();
    }
    if (i == 2131492889)
    {
      assert (!localARViewer.mDocOpenedFromCloud);
      if (!CloudNetworkManager.isSignedIn()) {
        localARViewer.showCloudLoginPopup();
      }
    }
    else
    {
      if (i != 2131492890) {
        break label100;
      }
      this.mPopupMenu = new ViewModeMenu(paramView);
      setupMenu(paramView);
    }
    label100:
    label156:
    label236:
    do
    {
      do
      {
        return;
        localARViewer.initiateMoveDocToCloud();
        break;
        if (i != 2131492891) {
          break label236;
        }
        paramView = localARViewer.getPageView().getDocViewManager();
        if ((paramView == null) || (!paramView.isOperationPermitted(1, 0))) {
          break label156;
        }
      } while (localARViewer.isToolbarTopView((CommentingToolbar)localARViewer.getToolbar().findViewById(2131493133)));
      localARViewer.getToolbar().pushView(2130903086);
      return;
      if (localARViewer.isAttachmentDoc(localARViewer.getCurrentDocPath()))
      {
        Toast.makeText(localARViewer, 2131361844, 1500).show();
        return;
      }
      if (localARViewer.isCachedFile(localARViewer.getCurrentDocPath()))
      {
        Toast.makeText(localARViewer, 2131361845, 1500).show();
        return;
      }
      if (!localARViewer.isFileWritable(localARViewer.getCurrentDocPath()))
      {
        Toast.makeText(localARViewer, 2131361846, 1500).show();
        return;
      }
      paramView.getSecurityManager().showSecurityView();
      return;
    } while (i != 2131492892);
    this.mPopupMenu = new ShareMenu(paramView);
    setupMenu(paramView);
  }
  
  protected void onFinishInflate()
  {
    View localView = findViewById(2131492889);
    localView.setOnClickListener(this);
    localView.setBackgroundDrawable(new ToolbarButtonDrawable(localView, 2130837801, 2130837801));
    localView = findViewById(2131492890);
    localView.setOnClickListener(this);
    localView.setBackgroundDrawable(new ToolbarButtonDrawable(localView, 2130837841, 2130837842));
    localView = findViewById(2131492892);
    localView.setOnClickListener(this);
    localView.setBackgroundDrawable(new ToolbarButtonDrawable(localView, 2130837814, 2130837815));
    localView = findViewById(2131492891);
    localView.setOnClickListener(this);
    localView.setBackgroundDrawable(new ToolbarButtonDrawable(localView, 2130837571, 2130837572, 2130837568));
  }
  
  protected void onVisibilityChanged(View paramView, int paramInt)
  {
    if (paramInt == 0) {
      redrawToolbar();
    }
  }
  
  public void popView()
  {
    int i = getChildCount();
    if (i > 1)
    {
      setInAnimation(this.mSlideInBottom);
      setOutAnimation(this.mSlideOutTop);
      showPrevious();
      removeView(getChildAt(i - 1));
    }
  }
  
  public void pushView(int paramInt)
  {
    Object localObject = (ARViewer)getContext();
    ((ARViewer)localObject).lockToolbar();
    localObject = ((LayoutInflater)((ARViewer)localObject).getSystemService("layout_inflater")).inflate(paramInt, null);
    addView((View)localObject);
    setInAnimation(this.mSlideInTop);
    setOutAnimation(this.mSlideOutBottom);
    ((View)localObject).post(new Runnable()
    {
      public void run()
      {
        DocumentToolbar.this.showNext();
      }
    });
  }
  
  protected void redrawToolbar()
  {
    int i1 = 8;
    ARViewer localARViewer = (ARViewer)getContext();
    Object localObject = localARViewer.getPageView();
    if (localARViewer.mDocOpenedFromCloud) {}
    for (int n = 8;; n = 0)
    {
      int i;
      if (((PageView)localObject).inReflowMode()) {
        i = 8;
      }
      for (int j = 8;; j = 0)
      {
        int k;
        int m;
        if (localARViewer.isPortfolioListViewVisible()) {
          if (localARViewer.isAttachmentsViewVisible())
          {
            j = 8;
            i = 8;
            k = 8;
            m = 8;
          }
        }
        for (;;)
        {
          try
          {
            boolean bool = localARViewer.getCurrentDocPath().startsWith(localARViewer.getCacheDir().getCanonicalPath());
            if (!bool) {
              continue;
            }
            i = i1;
          }
          catch (Exception localException)
          {
            continue;
            enableButton(2131492891, true);
            continue;
          }
          if (k == 0)
          {
            localObject = ((PageView)localObject).getDocViewManager();
            if ((localObject != null) && (!((ARDocViewManager)localObject).isOperationPermitted(1, 0))) {
              enableButton(2131492891, false);
            }
          }
          else
          {
            findViewById(2131492889).setVisibility(n);
            findViewById(2131492890).setVisibility(m);
            findViewById(2131492891).setVisibility(k);
            findViewById(2131492892).setVisibility(i);
            findViewById(2131492893).setVisibility(j);
            ((Button)localARViewer.findViewById(2131492887)).setText(localARViewer.getBackButtonStringId());
            return;
          }
          j = 8;
          i = 0;
          k = 8;
          m = 8;
          continue;
          k = j;
          m = 0;
          j = i;
          i = 0;
        }
        i = 0;
      }
    }
  }
}
