package com.adobe.reader;

public class PARTextMarkupCommentUIHandlerAndroid
{
  private static PARTextMarkupCommentUIHandlerAndroid instance = new PARTextMarkupCommentUIHandlerAndroid();
  private static TextMarkupCommentMenu sTextMarkupCommentMenu;
  private ARViewer mARViewerContext;
  private long mComment;
  private long mCommentManager;
  private long mJNIObj;
  private PageView mPageView;
  
  public PARTextMarkupCommentUIHandlerAndroid() {}
  
  public PARTextMarkupCommentUIHandlerAndroid(long paramLong, ARViewer paramARViewer)
  {
    this.mJNIObj = create(paramLong);
    cacheObject(this.mJNIObj);
    this.mCommentManager = paramLong;
    this.mARViewerContext = paramARViewer;
    this.mPageView = this.mARViewerContext.getPageView();
  }
  
  private native void cacheObject(long paramLong);
  
  private native void continueCreation(long paramLong);
  
  private native long create(long paramLong);
  
  private native void deleteComment(long paramLong1, long paramLong2);
  
  public static PARTextMarkupCommentUIHandlerAndroid getInstance()
  {
    return instance;
  }
  
  private native void setNewColor(long paramLong1, long paramLong2, float paramFloat1, float paramFloat2, float paramFloat3);
  
  private native void setNewOpacity(long paramLong1, long paramLong2, float paramFloat);
  
  public void continueCreation()
  {
    continueCreation(this.mCommentManager);
  }
  
  public void deleteComment()
  {
    deleteComment(this.mCommentManager, this.mComment);
  }
  
  public void handleLongPressGesture(long paramLong, int paramInt1, int paramInt2)
  {
    if (sTextMarkupCommentMenu == null)
    {
      sTextMarkupCommentMenu = new TextMarkupCommentMenu(this, this.mPageView);
      sTextMarkupCommentMenu.setFocusable(true);
    }
    this.mComment = paramLong;
    sTextMarkupCommentMenu.showAtLocation(this.mPageView, 0, paramInt1, paramInt2);
    sTextMarkupCommentMenu.update(paramInt1, paramInt2, -1, -1);
  }
  
  public void handleTapGesture(long paramLong, int paramInt1, int paramInt2) {}
  
  public boolean isInTextMarkupDrawMode()
  {
    CommentingToolbar localCommentingToolbar = (CommentingToolbar)this.mARViewerContext.getToolbar().findViewById(2131493133);
    if ((localCommentingToolbar != null) && (this.mARViewerContext.isToolbarTopView(localCommentingToolbar)))
    {
      int i = localCommentingToolbar.getActiveTool();
      if ((i == 2131493136) || (i == 2131493137) || (i == 2131493138)) {
        return true;
      }
    }
    return false;
  }
  
  public void setNewColor(float paramFloat1, float paramFloat2, float paramFloat3)
  {
    setNewColor(this.mCommentManager, this.mComment, paramFloat1, paramFloat2, paramFloat3);
  }
  
  public void setNewOpacity(float paramFloat)
  {
    setNewOpacity(this.mCommentManager, this.mComment, paramFloat);
  }
  
  public void textMarkupDragBegin() {}
  
  public void textMarkupDragEnd() {}
  
  public void textMarkupDragMove(double paramDouble1, double paramDouble2) {}
}
