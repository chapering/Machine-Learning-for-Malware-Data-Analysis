package com.adobe.reader;

import android.content.Context;
import android.content.res.Resources;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.TextView;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ARBookmarkEntryAdapter
  extends BaseAdapter
{
  private int mBookmarkEvenRowBackground;
  private Map<Long, ARBookmarkMapEntry> mBookmarkMap;
  private int mBookmarkOddRowBackground;
  private View mBookmarkPanelLayout;
  private int mBookmarkParentRowBackground;
  private Context mContext;
  private long mCurrentParent;
  private LayoutInflater mInflater = null;
  private long mNativeBookmarkManagerObj;
  
  public ARBookmarkEntryAdapter(Context paramContext, long paramLong)
  {
    this.mContext = paramContext;
    this.mBookmarkMap = new HashMap();
    setCurrentParent(0L);
    this.mNativeBookmarkManagerObj = paramLong;
    paramContext = this.mContext.getResources();
    if (paramContext == null) {
      throw new IllegalStateException();
    }
    this.mBookmarkOddRowBackground = paramContext.getColor(2131230813);
    this.mBookmarkEvenRowBackground = paramContext.getColor(2131230814);
    this.mBookmarkParentRowBackground = paramContext.getColor(2131230815);
    this.mBookmarkPanelLayout = ((ARViewer)this.mContext).findViewById(2131492923);
  }
  
  private native void getChildBookmarksFromNthPosition(long paramLong1, long paramLong2, int paramInt);
  
  private native String getTitle(long paramLong1, long paramLong2);
  
  private native boolean hasChildren(long paramLong1, long paramLong2);
  
  private native void navigateToBookmark(long paramLong1, long paramLong2);
  
  public void addBookmark(long paramLong1, long paramLong2, int paramInt)
  {
    if ((this.mBookmarkMap == null) || (!this.mBookmarkMap.containsKey(Long.valueOf(paramLong2)))) {}
    do
    {
      return;
      ((ARBookmarkMapEntry)this.mBookmarkMap.get(Long.valueOf(paramLong2))).addBookmark(Long.valueOf(paramLong1), paramInt);
    } while (paramLong2 != this.mCurrentParent);
    notifyDataSetChanged();
  }
  
  public void getChildBookmarks()
  {
    int i = 0;
    if (!this.mBookmarkMap.containsKey(Long.valueOf(this.mCurrentParent))) {
      throw new IllegalStateException();
    }
    List localList = ((ARBookmarkMapEntry)this.mBookmarkMap.get(Long.valueOf(this.mCurrentParent))).getBookmarkList();
    if (localList != null) {
      if (this.mBookmarkMap.size() <= 1) {
        break label96;
      }
    }
    label96:
    for (i = localList.size() - 1;; i = localList.size())
    {
      getChildBookmarksFromNthPosition(this.mNativeBookmarkManagerObj, this.mCurrentParent, i);
      notifyDataSetChanged();
      return;
    }
  }
  
  public int getCount()
  {
    if ((this.mBookmarkMap != null) && (this.mBookmarkMap.containsKey(Long.valueOf(this.mCurrentParent))))
    {
      List localList = ((ARBookmarkMapEntry)this.mBookmarkMap.get(Long.valueOf(this.mCurrentParent))).getBookmarkList();
      if (localList != null) {
        return localList.size();
      }
    }
    return 0;
  }
  
  public Long getItem(int paramInt)
  {
    if ((this.mBookmarkMap != null) && (this.mBookmarkMap.containsKey(Long.valueOf(this.mCurrentParent))))
    {
      List localList = ((ARBookmarkMapEntry)this.mBookmarkMap.get(Long.valueOf(this.mCurrentParent))).getBookmarkList();
      if ((localList != null) && (paramInt <= localList.size() - 1)) {
        return (Long)localList.get(paramInt);
      }
    }
    return Long.valueOf(0L);
  }
  
  public long getItemId(int paramInt)
  {
    return 0L;
  }
  
  public void getNextLevelBookmarks(int paramInt)
  {
    this.mBookmarkPanelLayout.invalidate();
    Long localLong = getItem(paramInt);
    setCurrentParent(localLong.longValue());
    addBookmark(localLong.longValue(), this.mCurrentParent, -1);
    getChildBookmarks();
  }
  
  public void getPrevLevelBookmarks()
  {
    this.mBookmarkPanelLayout.invalidate();
    if (!this.mBookmarkMap.containsKey(Long.valueOf(this.mCurrentParent))) {
      throw new IllegalStateException();
    }
    long l = ((ARBookmarkMapEntry)this.mBookmarkMap.get(Long.valueOf(this.mCurrentParent))).getParent();
    List localList = ((ARBookmarkMapEntry)this.mBookmarkMap.get(Long.valueOf(this.mCurrentParent))).getBookmarkList();
    if (localList != null) {
      localList.clear();
    }
    this.mBookmarkMap.remove(Long.valueOf(this.mCurrentParent));
    setCurrentParent(l);
    getChildBookmarks();
  }
  
  public View getView(int paramInt, View paramView, ViewGroup paramViewGroup)
  {
    if (this.mInflater == null) {
      this.mInflater = ((LayoutInflater)this.mContext.getSystemService("layout_inflater"));
    }
    Long localLong;
    if (paramView == null)
    {
      paramView = this.mInflater.inflate(2130903044, null);
      paramViewGroup = new ARBookmarkEntryWrapper(paramView);
      paramView.setTag(paramViewGroup);
      localLong = getItem(paramInt);
      if (paramInt % 2 != 0) {
        break label157;
      }
      paramView.setBackgroundColor(this.mBookmarkEvenRowBackground);
    }
    for (;;)
    {
      paramViewGroup.mBookmarkTitleView.setText(getTitle(this.mNativeBookmarkManagerObj, localLong.longValue()));
      paramViewGroup.mBookmarkTitleView.setTag(localLong);
      if ((paramInt != 0) || (this.mBookmarkMap.size() <= 1)) {
        break label168;
      }
      paramViewGroup.mPrevLevelButtonView.setVisibility(0);
      paramViewGroup.mNextLevelButtonView.setVisibility(4);
      paramView.setBackgroundColor(this.mBookmarkParentRowBackground);
      return paramView;
      paramViewGroup = (ARBookmarkEntryWrapper)paramView.getTag();
      break;
      label157:
      paramView.setBackgroundColor(this.mBookmarkOddRowBackground);
    }
    label168:
    paramViewGroup.mPrevLevelButtonView.setVisibility(4);
    if (hasChildren(this.mNativeBookmarkManagerObj, localLong.longValue()))
    {
      paramViewGroup.mNextLevelButtonView.setVisibility(0);
      paramViewGroup.mNextLevelButtonView.setTag(Integer.valueOf(paramInt));
      return paramView;
    }
    paramViewGroup.mNextLevelButtonView.setVisibility(4);
    return paramView;
  }
  
  public void release()
  {
    this.mBookmarkMap = null;
    this.mContext = null;
    this.mNativeBookmarkManagerObj = 0L;
  }
  
  public void setCurrentParent(long paramLong)
  {
    if (this.mBookmarkMap == null) {
      return;
    }
    if (!this.mBookmarkMap.containsKey(Long.valueOf(paramLong)))
    {
      ARBookmarkMapEntry localARBookmarkMapEntry = new ARBookmarkMapEntry(this.mCurrentParent);
      this.mBookmarkMap.put(Long.valueOf(paramLong), localARBookmarkMapEntry);
    }
    this.mCurrentParent = paramLong;
  }
  
  private class ARBookmarkEntryWrapper
  {
    public TextView mBookmarkTitleView;
    public View mNextLevelButtonView;
    public View mPrevLevelButtonView;
    
    public ARBookmarkEntryWrapper(View paramView)
    {
      if (paramView == null) {
        return;
      }
      this.mBookmarkTitleView = ((TextView)paramView.findViewById(2131492920));
      this.mBookmarkTitleView.setOnClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          long l = paramAnonymousView.getTag().hashCode();
          ((ARViewer)ARBookmarkEntryAdapter.this.mContext).showPreviousPosButton();
          paramAnonymousView = ((ARViewer)ARBookmarkEntryAdapter.this.mContext).getPageView().getDocViewManager();
          if (paramAnonymousView != null) {
            paramAnonymousView.setAnalyticsFlagStatus(3, true);
          }
          ARBookmarkEntryAdapter.this.navigateToBookmark(ARBookmarkEntryAdapter.this.mNativeBookmarkManagerObj, l);
          ((ARViewer)ARBookmarkEntryAdapter.this.mContext).hideBookmarks();
        }
      });
      this.mPrevLevelButtonView = paramView.findViewById(2131492921);
      this.mPrevLevelButtonView.setOnClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          ARBookmarkEntryAdapter.this.getPrevLevelBookmarks();
        }
      });
      this.mNextLevelButtonView = paramView.findViewById(2131492922);
      this.mNextLevelButtonView.setOnClickListener(new View.OnClickListener()
      {
        public void onClick(View paramAnonymousView)
        {
          int i = paramAnonymousView.getTag().hashCode();
          ARBookmarkEntryAdapter.this.getNextLevelBookmarks(i);
        }
      });
    }
  }
  
  private class ARBookmarkMapEntry
  {
    List<Long> mBookmarkList = null;
    long mParent;
    
    public ARBookmarkMapEntry(long paramLong)
    {
      this.mParent = paramLong;
    }
    
    public void addBookmark(Long paramLong, int paramInt)
    {
      if (this.mBookmarkList == null) {
        this.mBookmarkList = new ArrayList();
      }
      if (ARBookmarkEntryAdapter.this.mCurrentParent == 0L) {
        if (this.mBookmarkList.size() == paramInt) {
          this.mBookmarkList.add(paramLong);
        }
      }
      while (this.mBookmarkList.size() != paramInt + 1) {
        return;
      }
      this.mBookmarkList.add(paramLong);
    }
    
    public List<Long> getBookmarkList()
    {
      return this.mBookmarkList;
    }
    
    public long getParent()
    {
      return this.mParent;
    }
  }
}
