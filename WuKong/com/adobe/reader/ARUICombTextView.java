package com.adobe.reader;

import android.text.Editable;
import android.text.TextWatcher;
import android.view.ContextMenu;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnCreateContextMenuListener;
import android.view.View.OnFocusChangeListener;
import android.view.View.OnKeyListener;
import android.view.View.OnTouchListener;
import android.view.Window;
import android.widget.LinearLayout.LayoutParams;

public class ARUICombTextView
  extends AREditText
  implements View.OnFocusChangeListener, View.OnCreateContextMenuListener, View.OnClickListener, View.OnTouchListener, View.OnKeyListener, TextWatcher
{
  public static final int CURSOR_POSITION_AFTER = 2;
  public static final int CURSOR_POSITION_BEFORE = 1;
  public static final int CURSOR_POSITION_NONE = 0;
  private static boolean sCanEnterTextWatcher = true;
  String mBeforeValue = null;
  private boolean mEnoughSpace = true;
  
  public ARUICombTextView(ARViewer paramARViewer, int paramInt1, int paramInt2, int paramInt3, int paramInt4, long paramLong)
  {
    super(paramARViewer);
    setSingleLine(true);
    setLayoutParams(new LinearLayout.LayoutParams(-1, -1, 1.0F));
    setGravity(17);
    setInputType(524464);
    setOnFocusChangeListener(this);
    setOnCreateContextMenuListener(this);
    setOnClickListener(this);
    setOnTouchListener(this);
    addTextChangedListener(this);
    setOnKeyListener(this);
    setFocusable(true);
    setFocusableInTouchMode(true);
    setBackgroundResource(0);
  }
  
  private boolean contentExceedsCapacity()
  {
    return getText().length() > 1;
  }
  
  private ARUICombTextView getCurrentFocusedBox()
  {
    View localView = ((ARViewer)getContext()).getWindow().getCurrentFocus();
    if ((localView instanceof ARUICombTextView)) {
      return (ARUICombTextView)localView;
    }
    return null;
  }
  
  private int getCursorPosition(boolean paramBoolean)
  {
    int j = getSelectionEnd();
    int i = j;
    if (paramBoolean) {
      i = j - 1;
    }
    if (i == 0) {
      return 1;
    }
    if (i == 1) {
      return 2;
    }
    return 0;
  }
  
  public void afterTextChanged(Editable paramEditable)
  {
    int i = paramEditable.length();
    if (i > 1) {
      paramEditable.delete(1, i);
    }
  }
  
  public void beforeTextChanged(CharSequence paramCharSequence, int paramInt1, int paramInt2, int paramInt3)
  {
    ARUICombTextView localARUICombTextView = getCurrentFocusedBox();
    if (localARUICombTextView != null)
    {
      if (paramInt3 > ((ARUICombView)localARUICombTextView.getParent()).getNumberOfEmptyBoxes()) {
        this.mEnoughSpace = false;
      }
      if (paramCharSequence != null) {
        this.mBeforeValue = paramCharSequence.toString();
      }
    }
    this.mEnoughSpace = true;
  }
  
  public void onClick(View paramView)
  {
    onClickTouch(paramView);
  }
  
  protected boolean onClickTouch(View paramView)
  {
    paramView = (ARUICombTextView)paramView;
    if ((paramView != null) && (paramView.getText().length() > 0))
    {
      if (paramView.hasFocus()) {
        ARUtils.showKeyboard(paramView);
      }
      for (;;)
      {
        localObject = (ARUICombView)paramView.getParent();
        if (paramView.getId() == ((ARUICombView)localObject).getChildCount() - 1) {
          break;
        }
        paramView.setSelection(0);
        return true;
        paramView.requestFocus();
      }
    }
    paramView = (ARUICombView)paramView.getParent();
    Object localObject = (ARUICombTextView)paramView.getChildAt(paramView.getChildCount() - paramView.getNumberOfEmptyBoxes() - 1);
    if (localObject != null)
    {
      if (((ARUICombTextView)localObject).hasFocus()) {
        ARUtils.showKeyboard((View)localObject);
      }
      for (;;)
      {
        ((ARUICombTextView)localObject).setSelection(1);
        return true;
        ((ARUICombTextView)localObject).requestFocus();
      }
    }
    paramView = (ARUICombTextView)paramView.getChildAt(0);
    if (paramView.hasFocus()) {
      ARUtils.showKeyboard(paramView);
    }
    for (;;)
    {
      paramView.setSelection(0);
      break;
      paramView.requestFocus();
    }
    return false;
  }
  
  public void onCreateContextMenu(ContextMenu paramContextMenu, View paramView, ContextMenu.ContextMenuInfo paramContextMenuInfo)
  {
    paramContextMenu.removeItem(16908322);
  }
  
  protected void onDetachedFromWindow()
  {
    onFocusChange(this, false);
    super.onDetachedFromWindow();
  }
  
  public void onFocusChange(View paramView, boolean paramBoolean)
  {
    if (paramBoolean)
    {
      ARUtils.showKeyboard(this);
      paramView = getParent();
      if ((paramView instanceof ARUICombView)) {
        ((ARUICombView)paramView).setFocusedChildView(this);
      }
    }
  }
  
  public boolean onKey(View paramView, int paramInt, KeyEvent paramKeyEvent)
  {
    boolean bool2 = false;
    boolean bool1 = ARWidgetToolbars.onKey(paramView, paramInt, paramKeyEvent, false);
    int i;
    if ((!bool1) && (paramKeyEvent.getAction() == 0))
    {
      paramView = (ARUICombTextView)paramView;
      paramKeyEvent = (ARUICombView)paramView.getParent();
      if (paramInt == 67)
      {
        paramInt = paramView.getId();
        i = paramView.getCursorPosition(false);
        if (i == 1) {
          bool1 = paramKeyEvent.deleteBoxValue(paramInt - 1);
        }
      }
    }
    for (;;)
    {
      if (!bool1)
      {
        bool1 = bool2;
        if (i == 1) {
          bool1 = true;
        }
        paramKeyEvent.setFocus(paramInt - 1, bool1);
      }
      do
      {
        return true;
        if (i != 2) {
          break label124;
        }
        bool1 = paramKeyEvent.deleteBoxValue(paramInt);
        break;
      } while (paramInt == 66);
      return bool1;
      label124:
      bool1 = false;
    }
  }
  
  public void onTextChanged(CharSequence paramCharSequence, int paramInt1, int paramInt2, int paramInt3)
  {
    if (!sCanEnterTextWatcher) {
      return;
    }
    sCanEnterTextWatcher = false;
    ARUICombTextView localARUICombTextView;
    ARUICombView localARUICombView;
    if (paramInt3 > 0)
    {
      localARUICombTextView = getCurrentFocusedBox();
      if (localARUICombTextView != null)
      {
        localARUICombView = (ARUICombView)localARUICombTextView.getParent();
        if (this.mEnoughSpace) {
          break label94;
        }
        if (localARUICombTextView.getCursorPosition(true) == 1)
        {
          paramInt1 = Math.min(paramInt3, Math.max(localARUICombTextView.getText().length() - 1, 0));
          localARUICombTextView.getText().delete(0, paramInt1);
        }
      }
    }
    for (;;)
    {
      sCanEnterTextWatcher = true;
      return;
      label94:
      if (localARUICombTextView.contentExceedsCapacity())
      {
        paramInt2 = -1;
        int j = localARUICombTextView.getCursorPosition(true);
        label124:
        boolean bool;
        int i;
        if (j == 1)
        {
          paramInt2 = localARUICombTextView.getId();
          if (paramInt2 < 0) {
            break label177;
          }
          bool = false;
          i = 0;
        }
        for (;;)
        {
          if (i >= paramInt3)
          {
            if (bool) {
              break;
            }
            if (j != 1) {
              break label245;
            }
            localARUICombView.setFocus(paramInt2, true);
            break;
            if (j != 2) {
              break label124;
            }
            paramInt2 = localARUICombTextView.getId() + 1;
            break label124;
            label177:
            break;
          }
          CharSequence localCharSequence = paramCharSequence.subSequence(paramInt1 + i, paramInt1 + i + 1);
          localARUICombTextView.getText().replace(paramInt1 + i, paramInt1 + i + 1, this.mBeforeValue);
          bool = localARUICombView.setBoxValue(paramInt2, localCharSequence);
          i += 1;
          paramInt2 += 1;
        }
        label245:
        if (j == 2) {
          localARUICombView.setFocus(paramInt2 - 1, false);
        }
      }
      else if ((localARUICombTextView.getId() == 0) && (localARUICombView.getValue().length() == 1))
      {
        paramCharSequence = localARUICombTextView.getText().toString();
        if (paramCharSequence.length() > 0)
        {
          localARUICombTextView.getText().delete(0, 1);
          if (!localARUICombView.setBoxValue(0, paramCharSequence)) {
            localARUICombView.setFocus(0, false);
          }
        }
      }
    }
  }
  
  public boolean onTouch(View paramView, MotionEvent paramMotionEvent)
  {
    return onClickTouch(paramView);
  }
  
  public void setFormatProperty(int paramInt)
  {
    super.setFormatProperty(paramInt);
  }
}
