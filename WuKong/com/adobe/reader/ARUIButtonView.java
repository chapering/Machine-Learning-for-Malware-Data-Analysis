package com.adobe.reader;

import android.graphics.Canvas;
import android.graphics.DashPathEffect;
import android.graphics.Paint;
import android.graphics.Paint.Join;
import android.graphics.Paint.Style;
import android.graphics.Rect;
import android.os.Handler;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnKeyListener;
import android.view.View.OnTouchListener;
import android.widget.RelativeLayout.LayoutParams;

public class ARUIButtonView
  extends View
  implements ARButtonView, View.OnClickListener, View.OnTouchListener, IPlatformView, View.OnKeyListener
{
  private static final float BUTTON_HIGHLIGHT_SIZE_RATIO = 1.1F;
  private static final long PUSH_BUTTON_HIGHLIGHT_TIME = 200L;
  private long mField;
  private int mHeight;
  private int mHightlight;
  private boolean mPushButton;
  private Runnable mRunnable;
  private int mWidth;
  
  public ARUIButtonView(ARViewer paramARViewer, int paramInt1, int paramInt2, int paramInt3, int paramInt4, long paramLong, boolean paramBoolean)
  {
    super(paramARViewer);
    this.mField = paramLong;
    this.mPushButton = false;
    this.mHightlight = 1;
    this.mRunnable = null;
    paramARViewer = makeHighlightRect(paramInt3, paramInt4, paramInt1, paramInt2);
    this.mWidth = Math.abs(paramARViewer.right - paramARViewer.left);
    this.mHeight = Math.abs(paramARViewer.bottom - paramARViewer.top);
    RelativeLayout.LayoutParams localLayoutParams = new RelativeLayout.LayoutParams(this.mWidth, this.mHeight);
    localLayoutParams.setMargins(paramARViewer.left, paramARViewer.top, 0, 0);
    setLayoutParams(localLayoutParams);
    setOnClickListener(this);
    setFocusable(true);
    setFocusableInTouchMode(true);
    setBackgroundResource(0);
    setOnKeyListener(this);
  }
  
  private native void commit(long paramLong);
  
  private static Rect makeHighlightRect(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    Rect localRect = new Rect();
    localRect.left = Math.round(paramInt1 - (paramInt3 * 1.1F - paramInt3) / 2.0F);
    localRect.top = Math.round(paramInt2 - (paramInt4 * 1.1F - paramInt4) / 2.0F);
    localRect.right = Math.round(paramInt1 + paramInt3 + (paramInt3 * 1.1F - paramInt3) / 2.0F);
    localRect.bottom = Math.round(paramInt2 + paramInt4 + (paramInt4 * 1.1F - paramInt4) / 2.0F);
    return localRect;
  }
  
  private void resetTimer()
  {
    if (this.mRunnable != null)
    {
      new Handler().removeCallbacks(this.mRunnable);
      this.mRunnable = null;
    }
  }
  
  private native void update(long paramLong);
  
  public void adjustToTheNewScroll() {}
  
  public void adjustToTheNewZoom()
  {
    if (this.mField != 0L)
    {
      Rect localRect = ARUIView.getViewBounds(this.mField);
      if (localRect != null)
      {
        int i = Math.abs(localRect.right - localRect.left);
        int j = Math.abs(localRect.bottom - localRect.top);
        localRect = makeHighlightRect(localRect.left, localRect.top, i, j);
        this.mWidth = Math.abs(localRect.right - localRect.left);
        this.mHeight = Math.abs(localRect.bottom - localRect.top);
        RelativeLayout.LayoutParams localLayoutParams = new RelativeLayout.LayoutParams(this.mWidth, this.mHeight);
        localLayoutParams.setMargins(localRect.left, localRect.top, 0, 0);
        setLayoutParams(localLayoutParams);
      }
    }
  }
  
  public void beginHighlight()
  {
    if (this.mHightlight != 0)
    {
      resetTimer();
      setBackgroundResource(2131230828);
    }
  }
  
  public void blinkHighlight()
  {
    if (this.mHightlight != 0)
    {
      beginHighlight();
      Handler localHandler = new Handler();
      this.mRunnable = new Runnable()
      {
        public void run()
        {
          ARUIButtonView.this.clearHighlight();
        }
      };
      localHandler.postDelayed(this.mRunnable, 200L);
    }
  }
  
  public void clearHighlight()
  {
    setBackgroundColor(0);
    resetTimer();
  }
  
  public void finalZoomLevel(double paramDouble) {}
  
  public void initialZoomLevel(double paramDouble) {}
  
  protected void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    post(new Runnable()
    {
      public void run()
      {
        ARUIButtonView.this.requestFocus();
      }
    });
  }
  
  public void onClick(View paramView)
  {
    if (this.mPushButton) {
      blinkHighlight();
    }
    update(this.mField);
  }
  
  protected void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    commit(this.mField);
    resetTimer();
  }
  
  protected void onDraw(Canvas paramCanvas)
  {
    super.onDraw(paramCanvas);
    Paint localPaint = new Paint();
    localPaint.setColor(-16777216);
    localPaint.setStyle(Paint.Style.STROKE);
    localPaint.setStrokeWidth(2.0F);
    localPaint.setStrokeJoin(Paint.Join.MITER);
    localPaint.setPathEffect(new DashPathEffect(new float[] { 1.0F, 2.0F }, 0.0F));
    paramCanvas.drawRect(0.0F, 0.0F, getWidth(), getHeight(), localPaint);
  }
  
  public boolean onKey(View paramView, int paramInt, KeyEvent paramKeyEvent)
  {
    if ((paramKeyEvent.getAction() == 0) && (paramInt == 62)) {
      onClick(paramView);
    }
    for (boolean bool = true;; bool = false)
    {
      if (ARWidgetToolbars.onKey(paramView, paramInt, paramKeyEvent, false)) {
        return true;
      }
      return bool;
    }
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    setMeasuredDimension(this.mWidth, this.mHeight);
  }
  
  public boolean onTouch(View paramView, MotionEvent paramMotionEvent)
  {
    int i = paramMotionEvent.getAction();
    switch (i)
    {
    }
    for (;;)
    {
      if (i == 1)
      {
        i = (int)paramMotionEvent.getX();
        int j = (int)paramMotionEvent.getY();
        if ((i >= 0) && (i <= getWidth()) && (j >= 0) && (j <= getHeight())) {
          update(this.mField);
        }
      }
      return true;
      beginHighlight();
      continue;
      clearHighlight();
    }
  }
  
  public void panEnded() {}
  
  public void panStarted() {}
  
  public void setHighlightProperty(int paramInt)
  {
    this.mHightlight = paramInt;
  }
  
  public void setPushButtonProperty(boolean paramBoolean)
  {
    this.mPushButton = paramBoolean;
    if (this.mPushButton) {
      setOnTouchListener(this);
    }
  }
  
  public void setRotationProperty(int paramInt) {}
}
