package com.adobe.reader;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public class AESCryptor
{
  private static final int AES_BLOCK_SIZE = 16;
  private static final String CIPHER_ALGORITHM = "AES";
  private static final String DECRYPTOR_TRANSFORMATION = "AES/ECB/NoPadding";
  private static final String ENCRYPTOR_TRANSFORMATION = "AES/CBC/NoPadding";
  private static final String ENCRYPTOR_TRANSFORMATION_PADDING = "AES/CBC/PKCS5Padding";
  private Cipher mDecryptor;
  private Cipher mEncryptor;
  
  public AESCryptor() {}
  
  public void Decrypt(byte[] paramArrayOfByte1, int paramInt, byte[] paramArrayOfByte2)
  {
    try
    {
      paramInt = this.mDecryptor.update(paramArrayOfByte1, 0, paramInt, paramArrayOfByte2);
      if (16 != paramInt) {
        paramArrayOfByte1 = (byte[])null;
      }
      return;
    }
    catch (Exception paramArrayOfByte1)
    {
      for (;;)
      {
        paramArrayOfByte1 = (byte[])null;
        paramInt = 0;
      }
    }
  }
  
  public int Encrypt(byte[] paramArrayOfByte1, int paramInt1, byte[] paramArrayOfByte2, int paramInt2)
  {
    if (paramInt2 < this.mEncryptor.getOutputSize(paramInt1)) {
      return -1;
    }
    try
    {
      paramInt1 = this.mEncryptor.doFinal(paramArrayOfByte1, 0, paramInt1, paramArrayOfByte2);
      return paramInt1;
    }
    catch (Exception paramArrayOfByte1)
    {
      paramArrayOfByte1 = (byte[])null;
    }
    return -1;
  }
  
  public boolean Init_Decryptor(byte[] paramArrayOfByte)
  {
    try
    {
      paramArrayOfByte = new SecretKeySpec(paramArrayOfByte, "AES");
      this.mDecryptor = Cipher.getInstance("AES/ECB/NoPadding");
      this.mDecryptor.init(2, paramArrayOfByte);
      return 16 == this.mDecryptor.getBlockSize();
    }
    catch (Exception paramArrayOfByte) {}
    return false;
  }
  
  public boolean Init_Encryptor(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, boolean paramBoolean)
  {
    try
    {
      paramArrayOfByte1 = new SecretKeySpec(paramArrayOfByte1, "AES");
      if (paramBoolean) {}
      for (this.mEncryptor = Cipher.getInstance("AES/CBC/PKCS5Padding");; this.mEncryptor = Cipher.getInstance("AES/CBC/NoPadding"))
      {
        paramArrayOfByte2 = new IvParameterSpec(paramArrayOfByte2);
        this.mEncryptor.init(1, paramArrayOfByte1, paramArrayOfByte2);
        if (16 == this.mEncryptor.getBlockSize()) {
          break;
        }
        return false;
      }
      return true;
    }
    catch (Exception paramArrayOfByte1)
    {
      return false;
    }
  }
}
