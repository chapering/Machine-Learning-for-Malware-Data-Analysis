package com.adobe.reader;

import android.graphics.Point;

public class DocContextMenuHandler
{
  private ARViewer mContext = null;
  private DocContextMenu mContextMenuInstance = null;
  private boolean mIsModeActive = false;
  private int mPageNum = -1;
  private PageView mPageView = null;
  private int mPointX;
  private int mPointY;
  private double mZoomLevel;
  
  public DocContextMenuHandler(ARViewer paramARViewer, PageView paramPageView)
  {
    this.mContext = paramARViewer;
    this.mPageView = paramPageView;
  }
  
  private void disableAllUIElements()
  {
    hideActiveUIElements();
    this.mContextMenuInstance = null;
  }
  
  private void hideActiveUIElements()
  {
    if (this.mContextMenuInstance != null) {
      this.mContextMenuInstance.dismiss();
    }
  }
  
  private void launchContextMenu()
  {
    disableAllUIElements();
    this.mContextMenuInstance = new DocContextMenu(this.mContext, this);
    this.mContextMenuInstance.setFocusable(false);
    this.mContextMenuInstance.setAnimationStyle(2131099661);
    showActiveUIElements();
  }
  
  private void showActiveUIElements()
  {
    Point localPoint = this.mPageView.convertScrollToDeviceSpace(new Point(this.mPointX, this.mPointY), this.mZoomLevel);
    int i = localPoint.x;
    int j = localPoint.y;
    if ((i < 0) || (i > this.mPageView.getScreenWidth()) || (j < 0) || (j > this.mPageView.getScreenHeight())) {
      hideActiveUIElements();
    }
    while (this.mContextMenuInstance == null) {
      return;
    }
    this.mContextMenuInstance.showAtLocation(this.mPageView, 0, i, j);
    this.mContextMenuInstance.update(i, j, -1, -1);
  }
  
  public void createNewComment(int paramInt)
  {
    exitDocContextMenuMode();
    Object localObject = this.mPageView.getDocViewManager().getCommentManager();
    int i;
    switch (paramInt)
    {
    case 3: 
    case 5: 
    case 6: 
    case 7: 
    default: 
      return;
    case 1: 
      localPoint = this.mPageView.convertScrollToDeviceSpace(new Point(this.mPointX, this.mPointY), this.mZoomLevel);
      paramInt = this.mPageView.getScrollX();
      i = this.mPageView.getScrollY();
      ((ARCommentManager)localObject).getStickyNoteHandler().addStickyNoteFromContextMenu(paramInt + localPoint.x, localPoint.y + i, this.mPageNum);
      return;
    case 2: 
      localPoint = this.mPageView.convertScrollToDeviceSpace(new Point(this.mPointX, this.mPointY), this.mZoomLevel);
      paramInt = this.mPageView.getScrollX();
      i = this.mPageView.getScrollY();
      ((ARCommentManager)localObject).getFreeTextCommentHandler().addFreeTextFromContextMenu(paramInt + localPoint.x, localPoint.y + i, this.mPageNum);
      return;
    case 4: 
      this.mContext.showUIElems();
      ((ARCommentManager)localObject).getInkCommentHandler().createInkCommentFromContextMenu();
      return;
    }
    localObject = ((ARCommentManager)localObject).getInkCommentHandler();
    Point localPoint = this.mPageView.convertScrollToDeviceSpace(new Point(this.mPointX, this.mPointY), this.mZoomLevel);
    ((PARInkCommentUIHandlerAndroid)localObject).createInkSignatureFromContextMenu(localPoint.x + this.mPageView.getScrollX(), localPoint.y + this.mPageView.getScrollY(), this.mPageNum);
  }
  
  public boolean enterDocContextMenuMode(int paramInt1, int paramInt2)
  {
    ARDocViewManager localARDocViewManager = this.mPageView.getDocViewManager();
    if (!localARDocViewManager.isPointWithinPage(paramInt1, paramInt2)) {}
    while (!localARDocViewManager.isOperationPermitted(1, 0)) {
      return false;
    }
    this.mIsModeActive = true;
    this.mPointX = paramInt1;
    this.mPointY = paramInt2;
    this.mZoomLevel = this.mPageView.getCurrentZoomLevel();
    this.mPageNum = localARDocViewManager.getPageAtOffset(this.mPointY);
    paramInt1 = localARDocViewManager.getHorizontalGutter();
    paramInt2 = localARDocViewManager.getVerticalGutter();
    this.mPointX -= paramInt1;
    this.mPointY -= paramInt2;
    launchContextMenu();
    return true;
  }
  
  public void exitDocContextMenuMode()
  {
    this.mIsModeActive = false;
    disableAllUIElements();
  }
  
  public boolean isActive()
  {
    return this.mIsModeActive;
  }
  
  public void panEnded()
  {
    showActiveUIElements();
  }
}
