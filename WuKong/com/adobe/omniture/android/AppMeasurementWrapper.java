package com.adobe.omniture.android;

import android.app.Activity;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.provider.Settings.System;
import com.omniture.AppMeasurement;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.UUID;

public class AppMeasurementWrapper
{
  private static final String APP_MEASUREMENT_PREFS_FILE = "com.adobe.tracking";
  public static final String EVENT_ASSET_DOWNLOAD = "Asset Download";
  public static final String EVENT_ASSET_SHARE_EMAIL = "Asset Shared: Email";
  public static final String EVENT_ASSET_SHARE_SERVICE = "Asset Shared";
  public static final String EVENT_ASSET_UPLOAD = "Asset Upload";
  public static final String EVENT_ASSET_VIEWED = "Asset Viewed";
  public static final String EVENT_BACKGROUND = "Enter Background";
  public static final String EVENT_EXIT = "Exit";
  private static final String EVENT_FIRST_LAUNCH_INSTALL = "First Launch: New";
  private static final String EVENT_FIRST_LAUNCH_UPDATE = "First Launch: Update";
  public static final String EVENT_FOREGROUND = "Enter Foreground";
  public static final String EVENT_LAUNCH = "Launch";
  private static final String OMTR_ANONYMOUS_QA_RSID = "amanonqa";
  private static final String OMTR_ANONYMOUS_RSID = "amamanon";
  private static final String OMTR_GLOBAL_QA_RSID = "amglobalqa";
  private static final String OMTR_GLOBAL_RSID = "amglobal";
  private static final String OMTR_TRACKING_SERVER = "adobemobile.112.2o7.net";
  public static final String OPT_IN_CHANGE = "opt-in-change";
  public static final String OPT_IN_PAGE = "opt-in";
  private static final String OPT_IN_PREFS_KEY = "com.adobe.tracking.optin";
  public static final String OPT_OUT_CHANGE = "opt-out-change";
  public static final String OPT_OUT_PAGE = "opt-out";
  private static final String PLATFORM = "Android";
  private static final boolean SPECIAL_BUILD = true;
  private static final String STARTUP_VERSIONS_PREFS_KEY = "com.adobe.tracking.versions";
  private static final String libVersion = "android-special-lib-1.1.3";
  private final Activity activity;
  private AppMeasurement appMeasurement;
  private final String appName;
  private final String appRSID;
  private final String currentVersion;
  private boolean debugTracking;
  private final String mode;
  public int optIn = -1;
  private OptInDialogCallback optInDialogCallback = null;
  private final String visitorID;
  
  public AppMeasurementWrapper(Activity paramActivity, String paramString1, String paramString2, OptInDialogCallback paramOptInDialogCallback)
  {
    this(paramActivity, paramString1, paramString2, paramOptInDialogCallback, false, "prod");
  }
  
  public AppMeasurementWrapper(Activity paramActivity, String paramString1, String paramString2, OptInDialogCallback paramOptInDialogCallback, boolean paramBoolean)
  {
    this(paramActivity, paramString1, paramString2, paramOptInDialogCallback, paramBoolean, "prod");
  }
  
  public AppMeasurementWrapper(Activity paramActivity, String paramString1, String paramString2, OptInDialogCallback paramOptInDialogCallback, boolean paramBoolean, String paramString3)
  {
    this.appName = paramString1;
    this.appRSID = paramString2;
    this.activity = paramActivity;
    this.visitorID = getUDID();
    this.debugTracking = paramBoolean;
    this.currentVersion = getApplicationVersion();
    this.mode = paramString3;
    this.optInDialogCallback = paramOptInDialogCallback;
  }
  
  private void addSuccessEvent(Hashtable<String, String> paramHashtable, String paramString)
  {
    if (!paramHashtable.contains("events"))
    {
      paramHashtable.put("events", paramString);
      return;
    }
    Object localObject = Arrays.asList(((String)paramHashtable.get("events")).split(","));
    if (!((List)localObject).contains(paramString)) {
      ((List)localObject).add(paramString);
    }
    paramString = new StringBuffer();
    localObject = ((List)localObject).iterator();
    if (((Iterator)localObject).hasNext())
    {
      paramString.append((String)((Iterator)localObject).next());
      while (((Iterator)localObject).hasNext())
      {
        paramString.append(",");
        paramString.append((String)((Iterator)localObject).next());
      }
    }
    paramHashtable.put("events", paramString.toString());
  }
  
  private String buildPageName(String paramString)
  {
    return String.format("%s:%s:%s", new Object[] { this.appName, "Android", paramString });
  }
  
  private String getApplicationVersion()
  {
    try
    {
      String str = this.activity.getApplicationContext().getPackageManager().getPackageInfo(this.activity.getApplicationContext().getPackageName(), 0).versionName;
      return str;
    }
    catch (Exception localException)
    {
      Tracer.log("YourActivity", "Error getting version");
    }
    return "";
  }
  
  private String getUDID()
  {
    String str2 = Settings.System.getString(this.activity.getContentResolver(), "android_id");
    String str1 = str2;
    if (str2 == null) {
      str1 = UUID.randomUUID().toString();
    }
    try
    {
      str1 = hash(str1);
      return str1;
    }
    catch (Exception localException)
    {
      localException.printStackTrace();
    }
    return "";
  }
  
  private String hash(String paramString)
    throws NoSuchAlgorithmException
  {
    Object localObject = MessageDigest.getInstance("SHA-256");
    ((MessageDigest)localObject).update(paramString.getBytes(), 0, 0);
    paramString = ((MessageDigest)localObject).digest();
    localObject = new StringBuffer();
    int i = 0;
    while (i < paramString.length)
    {
      ((StringBuffer)localObject).append(Integer.toHexString(paramString[i] & 0xFF));
      i += 1;
    }
    return ((StringBuffer)localObject).toString();
  }
  
  private void mangleLaunch(Hashtable<String, String> paramHashtable)
  {
    int i = 0;
    Object localObject = this.activity.getSharedPreferences("com.adobe.tracking", 0);
    String str = ((SharedPreferences)localObject).getString("com.adobe.tracking.versions", null);
    localObject = ((SharedPreferences)localObject).edit();
    if (str == null)
    {
      i = 1;
      ((SharedPreferences.Editor)localObject).putString("com.adobe.tracking.versions", this.currentVersion);
    }
    for (;;)
    {
      ((SharedPreferences.Editor)localObject).commit();
      switch (i)
      {
      default: 
        return;
        List localList = Arrays.asList(str.split(","));
        if (!localList.contains(this.currentVersion))
        {
          i = 2;
          localList.add(this.currentVersion);
          ((SharedPreferences.Editor)localObject).putString("com.adobe.tracking.versions", str + "," + this.currentVersion);
        }
        break;
      }
    }
    paramHashtable.put("pageName", buildPageName("Launch"));
    addSuccessEvent(paramHashtable, "event23");
    return;
    paramHashtable.put("pageName", buildPageName("First Launch: New"));
    addSuccessEvent(paramHashtable, "event21");
    return;
    paramHashtable.put("pageName", buildPageName("First Launch: Update"));
    addSuccessEvent(paramHashtable, "event22");
  }
  
  private void optInWorkflowStart()
  {
    Tracer.log("AppMeasurementWrapper", "Start optIn workflow");
    int i = readOptInLocal();
    if (i == -1)
    {
      showOptInDialog();
      return;
    }
    this.optIn = i;
  }
  
  private void setCommonParams(Hashtable<String, String> paramHashtable)
  {
    paramHashtable.put("prop21", this.appName);
    paramHashtable.put("prop22", "Android");
    paramHashtable.put("prop23", this.currentVersion);
    paramHashtable.put("prop27", "android-special-lib-1.1.3");
    paramHashtable.put("eVar21", this.appName);
    paramHashtable.put("eVar22", "Android");
    paramHashtable.put("eVar23", this.currentVersion);
    paramHashtable.put("eVar27", "android-special-lib-1.1.3");
    paramHashtable.put("visitorID", this.visitorID);
  }
  
  private void setupOmniture()
  {
    Tracer.log("AppMeasurementWrapper", "Setup omniture connection");
    this.appMeasurement = new AppMeasurement();
    this.appMeasurement.visitorID = this.visitorID;
    this.appMeasurement.visitorNamespace = "adobemobile";
    this.appMeasurement.trackingServer = "adobemobile.112.2o7.net";
    this.appMeasurement.trackingServerSecure = "adobemobile.112.2o7.net";
    this.appMeasurement.debugTracking = this.debugTracking;
    this.appMeasurement.currencyCode = "USD";
    this.appMeasurement.ssl = true;
    this.appMeasurement.usePlugins = true;
    this.appMeasurement.trackOffline = true;
    this.appMeasurement.offlineLimit = 100;
    this.appMeasurement.offlineThrottleDelay = 1000;
  }
  
  private void showOptInDialog()
  {
    if (this.optInDialogCallback == null)
    {
      Tracer.log("AppMeasurementWrapper", "You haven't set an optInDialogCallbck");
      return;
    }
    this.optInDialogCallback.showOptInDialog();
  }
  
  private void trackOptInInformation(int paramInt, boolean paramBoolean)
  {
    this.appMeasurement.clearVars();
    this.appMeasurement.account = this.appRSID;
    Hashtable localHashtable = new Hashtable();
    localHashtable.put("channel", this.appName);
    localHashtable.put("prop21", this.appName);
    localHashtable.put("prop22", "Android");
    localHashtable.put("prop23", this.currentVersion);
    localHashtable.put("prop27", "android-special-lib-1.1.3");
    localHashtable.put("eVar21", this.appName);
    localHashtable.put("eVar22", "Android");
    localHashtable.put("eVar23", this.currentVersion);
    localHashtable.put("eVar27", "android-special-lib-1.1.3");
    int j = 1;
    int i = 1;
    if (paramBoolean)
    {
      if (this.optIn == 1) {
        i = 0;
      }
      if (paramInt == 1) {}
      for (str = "opt-out-change";; str = "opt-in-change")
      {
        localHashtable.put("pageName", str);
        if (i != 0) {
          this.appMeasurement.track(localHashtable);
        }
        return;
      }
    }
    if (paramInt == 1) {}
    for (String str = "opt-in";; str = "opt-out")
    {
      localHashtable.put("pageName", str);
      i = j;
      break;
    }
  }
  
  public int readOptInLocal()
  {
    return this.activity.getSharedPreferences("com.adobe.tracking", 0).getInt("com.adobe.tracking.optin", -1);
  }
  
  public void restartOptInWorkflowWithValue(int paramInt)
  {
    restartOptInWorkflowWithValue(paramInt, false);
  }
  
  public void restartOptInWorkflowWithValue(int paramInt, boolean paramBoolean)
  {
    this.optIn = paramInt;
    writeOptInLocal(paramInt);
    trackOptInInformation(paramInt, paramBoolean);
  }
  
  public void setup()
  {
    setupOmniture();
    optInWorkflowStart();
  }
  
  public void track(String paramString)
  {
    Tracer.log("AppMeasurementWrapper", "The track method is not available in the special build");
  }
  
  public void track(String paramString, Hashtable<String, String> paramHashtable)
  {
    Tracer.log("AppMeasurementWrapper", "The track method is not available in the special build");
  }
  
  public void trackApp(Hashtable<String, String> paramHashtable)
  {
    if (this.optIn != 1)
    {
      Tracer.log("AppMeasurementWrapper", "User selected to opt-out or the status is unknown for the moment, this event will be ignored");
      return;
    }
    this.appMeasurement.clearVars();
    this.appMeasurement.account = this.appRSID;
    this.appMeasurement.track(paramHashtable);
  }
  
  public void writeOptInLocal(int paramInt)
  {
    SharedPreferences.Editor localEditor = this.activity.getSharedPreferences("com.adobe.tracking", 0).edit();
    localEditor.putInt("com.adobe.tracking.optin", paramInt);
    localEditor.commit();
  }
}
