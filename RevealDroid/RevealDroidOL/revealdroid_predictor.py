__author__ = 'Vince'
#!/usr/bin/env python
from pprint import pprint
from sklearn.externals import joblib
from RevealDroid import *
import sys
import common_utils

class Predictor(object):
    pickle_model = common_utils.revealdroid_pickle_model
    pickle_vocab = common_utils.revealdroid_pickle_vocab
    def __init__(self, malware_dir, benign_dir):
        self.malware_dir = malware_dir
        self.benign_dir = benign_dir


    def gen_model(self):
        main(self.malware_dir, self.benign_dir,int(common_utils.num_processes),common_utils.feature_combination)
        #Classification(self.malware_dir, self.benign_dir, 0.3)


    def get_model(self):
        if (os.path.exists(self.pickle_model) and os.path.exists(self.pickle_vocab)):
            logger.warning('loading from pickle file {}'.format(self.pickle_model))
            model = joblib.load(self.pickle_model)
            vocab = joblib.load(self.pickle_vocab)
        else:
            logger.warning('pickle file does not exist, generating')
            self.gen_model()
            model = joblib.load(self.pickle_model)
            vocab = joblib.load(self.pickle_vocab)
            logger.warning('finished modeling generating')
        return model

    def feature_generator(self, apk_file):
        if not os.path.exists('Metadata'+os.path.sep+'Predict'):  os.makedirs('Metadata'+os.path.sep+'Predict')
        if not os.path.exists('Data'+os.path.sep+'Predict'):  os.makedirs('Data'+os.path.sep+'Predict')
        FeatureExtraction(apk_file,'Predict',common_utils.feature_combination)
        PredictSample = [os.path.join('Data'+os.path.sep+'Predict',f) for f in os.listdir('Data'+os.path.sep+'Predict') if f.endswith(os.path.basename(apk_file)[:-4]+'.Features')]
        Vocab=joblib.load(self.pickle_vocab)
        NewLineCVetorizer = CountVectorizer(input=u'filename',lowercase=False,token_pattern=None,tokenizer=NewLineTokenizer,binary=False,dtype=np.float64,vocabulary=Vocab)

        PredictDocsTermsFVs= NewLineCVetorizer.fit_transform(PredictSample)
        X=PredictDocsTermsFVs.toarray()
        #print X
        #print PredictDocsTermsFVs
        return PredictDocsTermsFVs


    def predict(self, apk_path):
        model = self.get_model()
        print("********" + common_utils.revealdroid_pickle_model)
        features = self.feature_generator(apk_path)
        PredictedLabel = model.predict(features)
        #FV= features.toarray()[0]
        #Res=FV * common_utils.feauture_importances
        #TopRes=Res.argsort()[-10:][::-1]
        #for Sindex in TopRes:
            #if not FV[Sindex]==0: feature_list.append(Vocab[Sindex])

        return PredictedLabel#,feature_list




if __name__ == '__main__':
    predictor = Predictor(common_utils.malware_dir, common_utils.benign_dir)
    predictor.gen_model()
    # predictor.features_info()
    if len(sys.argv) < 2:
        print('usage: {} apk_file'.format(sys.argv[0]))
        sys.exit(1)
    apkfile = os.path.abspath(sys.argv[1])
    predictor.predict(apkfile)
