__author__ = 'Vince'
#!/usr/bin/python
# -*- coding: utf-8 -*-

import os

import sys
reload(sys)
sys.setdefaultencoding('utf-8')

from xml.dom import minidom
import shutil
from GlobalData import *
import multiprocessing as mp
from Classification import Classification
from getFlow import getFlow
from RevealDroidUtils import *


logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger('sys.stdout')


def decompile(app):
    '''
    Decompiling Android applications, getting bytecode.

    :param String app: Absolute path of an Android application
    '''

    f = open('Metadata'+os.path.sep+'ApktoolReport.txt','w')
    origin = sys.stdout
    sys.stdout = f
    try:
        ApktoolCommand = "java -jar apktool.jar d -f "+app
        os.system(ApktoolCommand)
    except Exception as e:
        print e
        logger.error(e)
        logger.error("Decompiling "+app+" to get bytecode Failed.")
        return


def getAPI(SmalifileLinelist):
    '''
    Getting APIs of an app from bytecode.

    :param Linelist SmalifileLinelist: Contents of one smali file
    :return APIList
    :rtype List([String])
    '''

    APIList = []
    for word in SmalifileLinelist:
        word = word.replace(' ', '')
        if word.startswith('invoke-'):
            parts = word.split(',')
            for part in parts:
                if ';->' in part:
                    part = part.strip()
                    for APIPrefix in AndroidAPIs:
                        if part.startswith(APIPrefix):
                            apiParts = part.split(';->')
                            apiclass = apiParts[0].strip()
                            apiName = apiParts[1].split('(')[0].strip()
                            APIList.append(apiclass+' '+apiName)
    return APIList


def getAPISusiCat(ApiList, SrcMap, SnkMap):
    '''
    Getting APIs' Susi categories from API list.

    :param List([String]) ApiList: APIs list, generating from func 'getAPI'
    :param SusiAPISrcMap SrcMap: Obtaining from 'SusiAPISrcDict.json'
    :param SusiAPISinkMap SnkMap: Obtaining from 'SusiAPISrcDict.json'
    :return APISusiCat
    :rtype List([String])
    '''

    APISusiCat = []
    for api in ApiList:
        if api.startswith('L'): api = api[1:]
        api = api.replace('/', '.')
        if api in SrcMap.keys():
            SrcSnk = SrcMap[api]
            APISusiCat.append('API-<SRC'+SrcSnk+'>')
        elif api in SnkMap.keys():
            if ' 'in SnkMap[api]:
                SrcSnk = SnkMap[api].replace('(', 'API-<SNK(').replace(')', ')>').split(' ')
                APISusiCat = APISusiCat + SrcSnk
            else:
                SrcSnk = SnkMap[api]
                APISusiCat.append('API-<SNK'+SrcSnk+'>')
    return APISusiCat


def getIAfromXML(DecompilationDir):
    '''
    Getting Intent Actions from 'AndroidManifest.xml' of an app.

    :param String DecompilationDir: Bytecode directory of an application
    :return IAfromXML
    :rtype List([String])
    '''

    IAfromXML = []
    file = DecompilationDir+os.path.sep+'AndroidManifest.xml'
    doc = minidom.parse(file)
    root = doc.documentElement
    nodes = root.getElementsByTagName('intent-filter')
    for node in nodes:
        for subnode in node.getElementsByTagName('action'):
            if subnode.getAttribute('android:name') in AndroidIAs:
                IAfromXML.append('IA-<'+subnode.getAttribute('android:name').split('.')[-1]+'>')
    return IAfromXML


def getIAfromSmali(SmalifileLinelist):
    '''
    Getting Intent Actions from smali files of an app.

    :param Linelist SmalifileLinelist: Contents of one smali file
    :return IAfromSmali
    :rtype List([String])
    '''

    IAfromSmali = []
    for word in SmalifileLinelist:
        word = word.strip()
        parts = word.split(' ')
        for part in parts:
            for ia in AndroidIAs:
                if ia in part:
                    IAfromSmali.append('IA-<'+ia.split('.')[-1]+'>')
    return IAfromSmali


def getPkgAPI(APIList):
    '''
    Getting APIs' Package from API list.

    :param List([String]) APIList: APIs list, generating from func 'getAPI'
    :return PAPIDict
    :rtype Dict{String:[List]}
    '''

    PAPIDict = {}
    for api in APIList:
        api_class = os.path.dirname(api[1:].replace('/', os.path.sep))
        PAPIDict['PAPI-<'+api_class.replace(os.path.sep,'.')+'>'] = []
    for api in APIList:
        api_class = os.path.dirname(api[1:].replace('/', os.path.sep))
        if api.startswith('L'): api = api[1:]
        api = api.replace('/', '.')
        PAPIDict['PAPI-<'+api_class.replace(os.path.sep,'.')+'>'].append(api)
    return PAPIDict

def FeatureExtraction(app, dir, FeatureCombination):
    '''
    Generating CAPI, IA, PAPI Features from an Android application.
    Dumping features into files.

    :param String app: Absolute path of an Android application
    :param String dir: Output directory, 'Malware'/'Benign'
    :param String FeatureCombination: Combination options of CAPI, IA and PAPI, 3 chars of '0'/'1'(ex/include)
    '''

    APIList = []
    APIFrqDict = {}
    IAList = []
    IAFrqDict = {}
    PAPIDict= {}
    IAfromSmali = []

    if not (FeatureCombination[0] == '0' and FeatureCombination[2] == '0' and FeatureCombination[3] == '0'):
        DecompilationDir = os.path.basename(app)[:-4]
        if not (os.path.exists('Metadata'+os.path.sep+dir+os.path.sep+DecompilationDir+'API.txt') and
                os.path.exists('Metadata'+os.path.sep+dir+os.path.sep+DecompilationDir+'IA.txt')):
            decompile(app)

        for root, dirs, smalifiles in os.walk(DecompilationDir):
            for smali in smalifiles:
                if smali.endswith('.smali'):
                    if 'smali'+os.path.sep in os.path.dirname(os.path.join(root,smali)):
                        smalifile = os.path.join(root,smali)
                        with open(smalifile,'r') as f_read:
                            LineList = f_read.readlines()
                            APIList = APIList+getAPI(LineList)
                            IAfromSmali = IAfromSmali + getIAfromSmali(LineList)
        if not os.path.exists('Metadata'+os.path.sep+dir+os.path.sep+DecompilationDir+'API.txt'):
            with open('Metadata'+os.path.sep+dir+os.path.sep+DecompilationDir+'API.txt', 'w') as f_w0:
                for word in APIList:
                    print >> f_w0, word

        with open('Data'+os.path.sep+dir+os.path.sep+DecompilationDir+'.Features', 'w') as f_write0:
            if FeatureCombination[0] == '1':
                APISusiList = getAPISusiCat(APIList, SusiApiSrcMap, SusiApiSinkMap)
                if not os.path.exists('Data'+os.path.sep+dir+os.path.sep+DecompilationDir+'APIFeature.json'):
                    with open('Data'+os.path.sep+dir+os.path.sep+DecompilationDir+'APIFeature.json', 'w') as f_write1:
                        for word in APISusiList:
                            print >> f_write1, word
                for Elem in APISusiList:
                    if APIFrqDict.has_key(Elem):  APIFrqDict[Elem] += 1
                    else:  APIFrqDict[Elem] = 1
                for key in APIFrqDict:
                    for i in range(int(APIFrqDict.get(key))):
                        print >> f_write0, key

            if FeatureCombination[2] == '1':
                IAList = getIAfromXML(DecompilationDir) + IAfromSmali
                if not os.path.exists('Metadata'+os.path.sep+dir+os.path.sep+DecompilationDir+'IA.txt'):
                    with open('Metadata'+os.path.sep+dir+os.path.sep+DecompilationDir+'IA.txt', 'w') as f_w1:
                        for word in IAList:
                            print >> f_w1, word[4:-1]
                if not os.path.exists('Data'+os.path.sep+dir+os.path.sep+DecompilationDir+'IAFeature.json'):
                    with open('Data'+os.path.sep+dir+os.path.sep+DecompilationDir+'IAFeature.json', 'w') as f_write3:
                        for word in IAList:
                            print >> f_write3, word
                for Elem in IAList:
                    if IAFrqDict.has_key(Elem):  IAFrqDict[Elem] += 1
                    else:  IAFrqDict[Elem] = 1
                for key in IAFrqDict:
                    for i in range(int(IAFrqDict.get(key))):
                        print >> f_write0, key

            if FeatureCombination[3] == '1':
                PAPIDict = getPkgAPI(APIList)
                if not os.path.exists('Data'+os.path.sep+dir+os.path.sep+DecompilationDir+'PAPIFeature.json'):
                    with open('Data'+os.path.sep+dir+os.path.sep+DecompilationDir+'PAPIFeature.json', 'w') as f_write4:
                        f_write4.write(json.dumps(PAPIDict, indent=4))
                for key in PAPIDict:
                    for i in range(len(PAPIDict.get(key))):
                        print >> f_write0, key

        if os.path.exists(DecompilationDir):
            logger.info('Deleting decompilation files '+DecompilationDir+' ...')
            os.system('chmod -R 777 '+DecompilationDir)
            shutil.rmtree(DecompilationDir)
            logger.info('Deletion Finished')





def ExtractFlowFeatures(AppName, outputpath):
    '''
    Extracting flow features.
    Dumping features to files.

    :param String AppName: Absolute path of an Android application
    :param String outputpath: Output dir, default is 'Malware'/'Benign'
    '''

    FlowFrqDict = {}
    DecompilationDir = os.path.basename(AppName)[:-4]
    FlowSusiCat = getFlow(AppName, outputpath)
    if not FlowSusiCat == ['incomplete']:
        with open('Data'+os.path.sep+outputpath+os.path.sep+DecompilationDir+'FlowFeature.json', 'w') as f:
            for word in FlowSusiCat:
                if FlowFrqDict.has_key(word): FlowFrqDict[word] += 1
                else: FlowFrqDict[word] = 1
            for key in FlowFrqDict:
                for i in range(int(FlowFrqDict.get(key))):
                    print >> f, key


def main(Maldir,
         Gooddir,
         NumofProcesses,
         FeatureCombination='1111'):
    '''

    :param String Maldir:
    :param String Gooddir:
    :param String NumofProcesses:
    :param String FeatureOption: Combination options of CAPI, IA, PAPI and FLOW, 4 chars of '0'/'1'(ex/include)
                                 Default option is '1111'
    '''

    # 1. get features of API, IA, PAPI using Apktool.
    createdir('Metadata'+os.path.sep+'Malware')
    createdir('Metadata'+os.path.sep+'Benign')
    createdir('Data'+os.path.sep+'Malware')
    createdir('Data'+os.path.sep+'Benign')

    pool = mp.Pool(int(NumofProcesses))
    for file in walk(Maldir, '.apk'):
        pool.apply_async(FeatureExtraction, args=(file, 'Malware', FeatureCombination))
    for file in walk(Gooddir, '.apk'):
        pool.apply_async(FeatureExtraction, args=(file, 'Benign', FeatureCombination))
    pool.close()
    pool.join()

    # 2. get features of FLOW, using FlowDroid
    if FeatureCombination[1] == '1':
        pool = mp.Pool(int(NumFlowProcesses))
        for file in walk(Maldir, '.apk'):
            pool.apply_async(ExtractFlowFeatures, args=(file, 'Malware'))
        for file in walk(Gooddir, '.apk'):
            pool.apply_async(ExtractFlowFeatures, args=(file, 'Benign'))
        pool.close()
        pool.join()

        for file in walk('Data', '.Features'):
            with open(file, 'a') as f_a:
                if os.path.exists(file.replace('.Features', 'FlowFeature.json')):
                    with open(file.replace('.Features', 'FlowFeature.json'), 'r') as f:
                        FlowdroidLog = f.readlines()
                        for line in FlowdroidLog:
                            print >> f_a, line
                        f.close()
                    f_a.close()
                else:
                    os.system('rm -rf '+file)

    # 3. classification
    Classification('Data'+os.path.sep+'Malware', 'Data'+os.path.sep+'Benign', 0.3)

    # 4. remove feature files
    for file in walk('Data', '.Features'):
        os.system('rm -rf '+file)


if __name__ == '__main__':
    
    main(Maldir=sys.argv[1],  # absolute path of Malware apps
         Gooddir=sys.argv[2],  # absolute path of Benign apps
         NumofProcesses=sys.argv[3],  # num of multi-processes
         FeatureCombination=sys.argv[4])  # feature combination (Default is '1111')
