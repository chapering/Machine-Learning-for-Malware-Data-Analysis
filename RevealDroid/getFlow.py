__author__ = 'Vince'

from RevealDroidUtils import *

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger('sys.stdout')


def getCompletion(flowdroidLog):
    '''
    Get completion of a FlowDroid log file.
    Only dealing with completed output.

    :param Linelist flowdroidLog: Contents of a FlowDroid log file
    :return Whether the FlowDroid output is completed
    :rtype Boolean
    '''

    if len(flowdroidLog) > 1 and flowdroidLog[-1].startswith('Analysis has run'):
        return True
    else:
        return False


def getFlow(app,output):
    '''
    Get flow features of Susi Categories.
    Using FlowDroid to generate features.

    :param String app: Absolute path of an Android application
    :param String output: Output directory
    :return FlowSusiSrc2Snk: Flow features of an Android application, Susi category level
    :rtype List([String])
    '''


    FlowSusiSrc2Snk = []

    if not os.path.exists('Metadata'+os.path.sep+output+os.path.sep+os.path.basename(app)[:-4]+'FlowDroidLog.txt'):
        FlowDroidCommand = 'timeout '+timeout+' java -Xmx'+ram+' -cp soot-trunk.jar:soot-infoflow.jar:soot-infoflow-android.jar:slf4j-api-1.7.5.jar:slf4j-simple-1.7.5.jar:axml-2.0.jar soot.jimple.infoflow.android.TestApps.Test '
        os.system(FlowDroidCommand+app+' '+platform+' --nostatic --aplength 3 --aliasflowins --nopaths --noarraysize --layoutmode none -> '+'Metadata'+os.path.sep+output+os.path.sep+os.path.basename(app)[:-4]+'FlowDroidLog.txt')
    with open('Metadata'+os.path.sep+output+os.path.sep+os.path.basename(app)[:-4]+'FlowDroidLog.txt', 'r') as f:
        logger.info('Extracting Flow features from '+os.path.basename(app))
        lines = f.readlines()
        if getCompletion(lines):  # Only dealing with completed output
            for linenum, line in enumerate(lines):
                if line.startswith('Found a flow to sink '):
                    line = line.replace('Found a flow to sink ', '')
                    if line.startswith('$'):
                        snkclass = line.split(' ')[3].replace(':', '').split('<')[-1]
                        snkname = line.split(' ')[5].split('(')[0]
                        snk = snkclass+' '+snkname
                    else:
                        snkclass = line.split(' ')[1].replace(':', '').split('<')[-1]
                        snkname = line.split(' ')[3].split('(')[0]
                        snk = snkclass+' '+snkname
                    if not ') ' in SusiApiSinkMap.get(snk, '(UNKNOWN)'):
                        snkcat = 'SNK' + SusiApiSinkMap.get(snk, '(UNKNOWN)')
                        for l in lines[linenum+1:]:
                            if l.startswith('	-') and ('parameter' not in l.split('<')[0]):
                                if 'specialinvoke' in l.split('<')[0]:
                                    if '=' in l.split('<')[0]:
                                        #if not rmAd(l.split(' ')[7]):
                                            srcclass = l.split(' ')[4].replace(':', '').split('<')[-1]
                                            srcname = l.split(' ')[6].split('(')[0]
                                            src = srcclass+' '+srcname
                                    elif l.startswith('	- specialinvoke '):
                                        #if not rmAd(l.split(' ')[5]):
                                            srcclass = l.split(' ')[2].replace(':', '').split('<')[-1]
                                            srcname = l.split(' ')[4].split('(')[0]
                                            src = srcclass+' '+srcname
                                    # else: return ['ERROR'], ['ERROR'], ['ERROR']
                                elif 'virtualinvoke' in l.split('<')[0]:
                                    if '=' in l.split('<')[0]:
                                        #if not rmAd(l.split(' ')[7]):
                                            srcclass = l.split(' ')[4].replace(':', '').split('<')[-1]
                                            srcname = l.split(' ')[6].split('(')[0]
                                            src = srcclass+' '+srcname
                                    elif l.startswith('	- virtualinvoke '):
                                        #if not rmAd(l.split(' ')[5]):
                                            srcclass = l.split(' ')[2].replace(':', '').split('<')[-1]
                                            srcname = l.split(' ')[4].split('(')[0]
                                            src = srcclass+' '+srcname
                                    # else: return ['ERROR'], ['ERROR'], ['ERROR']
                                elif 'interfaceinvoke' or 'staticinvoke' in l.split('<')[0]:
                                    if '=' in l.split('<')[0]:
                                        #if not rmAd(l.split(' ')[7]):
                                            srcclass = l.split(' ')[4].replace(':', '').split('<')[-1]
                                            srcname = l.split(' ')[6].split('(')[0]
                                            src = srcclass+' '+srcname
                                    elif l.startswith('	- interfaceinvoke '):
                                        #if not rmAd(l.split(' ')[5]):
                                            srcclass = l.split(' ')[2].replace(':', '').split('<')[-1]
                                            srcname = l.split(' ')[4].split('(')[0]
                                            src = srcclass+' '+srcname
                                # else: return ['ERROR'], ['ERROR'], ['ERROR']
                                srccat = 'SRC' + SusiApiSrcMap.get(src,'(UNKNOWN)')
                                if not ((snkcat == 'SNK(UNKNOWN)') and (srccat == 'SRC(UNKNOWN)')):
                                    FlowSusiSrc2Snk.append('FLOW-<'+srccat+' -> '+snkcat+'>')
                            elif l.startswith('Found a flow to sink'):
                                break
                    elif ') ' in SusiApiSinkMap.get(snk):
                        logger.info('-'*10+'One API belongs to 2 Categories'+'-'*10)
                        snkcat1 = 'SNK' + SusiApiSinkMap.get(snk).split(' ')[0]
                        snkcat2 = 'SNK' + SusiApiSinkMap.get(snk).split(' ')[1]
                        for l in lines[linenum+1:]:
                            if l.startswith('	-') and ('parameter' not in l.split('<')[0]):
                                if 'specialinvoke' in l.split('<')[0]:
                                    if '=' in l.split('<')[0]:
                                        #if not rmAd(l.split(' ')[7]):
                                            srcclass = l.split(' ')[4].replace(':', '').split('<')[-1]
                                            srcname = l.split(' ')[6].split('(')[0]
                                            src = srcclass+' '+srcname
                                    elif l.startswith('- specialinvoke '):
                                        #if not rmAd(l.split(' ')[5]):
                                            srcclass = l.split(' ')[2].replace(':', '').split('<')[-1]
                                            srcname = l.split(' ')[4].split('(')[0]
                                            src = srcclass+' '+srcname
                                elif 'virtualinvoke' in l.split('<')[0]:
                                    if '=' in l.split('<')[0]:
                                        #if not rmAd(l.split(' ')[7]):
                                            srcclass = l.split(' ')[4].replace(':', '').split('<')[-1]
                                            srcname = l.split(' ')[6].split('(')[0]
                                            src = srcclass+' '+srcname
                                    elif l.startswith('	- virtualinvoke '):
                                        #if not rmAd(l.split(' ')[5]):
                                            srcclass=l.split(' ')[2].replace(':', '').split('<')[-1]
                                            srcname = l.split(' ')[4].split('(')[0]
                                            src = srcclass+' '+srcname
                                elif 'interfaceinvoke' or 'staticinvoke' in l.split('<')[0]:
                                    if '=' in l.split('<')[0]:
                                        #if not rmAd(l.split(' ')[7]):
                                            srcclass = l.split(' ')[4].replace(':', '').split('<')[-1]
                                            srcname = l.split(' ')[6].split('(')[0]
                                            src = srcclass+' '+srcname
                                    elif l.startswith('	- interfaceinvoke '):
                                        #if not rmAd(l.split(' ')[5]):
                                            srcclass=l.split(' ')[2].replace(':', '').split('<')[-1]
                                            srcname = l.split(' ')[4].split('(')[0]
                                            src = srcclass+' '+srcname
                                # else : return ['ERROR'], ['ERROR'], ['ERROR']
                                srccat = 'SRC' + SusiApiSrcMap.get(src, '(UNKNOWN)')
                                if not ((snkcat1 == 'SNK(UNKNOWN)') and (srccat == 'SRC(UNKNOWN)')):
                                    FlowSusiSrc2Snk.append('FLOW-<'+srccat+' -> '+snkcat1+'>')
                                if not ((snkcat2 == 'SNK(UNKNOWN)') and (srccat == 'SRC(UNKNOWN)')):
                                    FlowSusiSrc2Snk.append('FLOW-<'+srccat+' -> '+snkcat2+'>')
                            elif l.startswith('Found a flow'):
                                break
            return FlowSusiSrc2Snk
        else:
            logger.error('Flow of '+app+', incomplete')
            return ['incomplete']