__author__ = 'Vince'
import sys
import os
import logging
from itertools import cycle
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.svm import LinearSVC
from scipy.sparse import *
from scipy import *
import scipy.sparse as ssp
from sklearn.feature_selection import SelectKBest, chi2, f_classif
from collections import OrderedDict
from sklearn.cross_validation import train_test_split
from random import randint
from random import shuffle
from sklearn.externals import joblib


logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger('sys.stdout')

def GetFilesWithExtn (RootDir, Extn):
    '''
    lllr to "find" command. List all the files from the RootDir with a given Extn
    :param RootDir: root to find files from
    :param Extn: extension to look for
    :return: sorted list of files with a given extension from the root dir and its child dirs
    '''

    FilesToProcess = []
    for Root, Folders, Files in os.walk(RootDir):
        for F in Files:
            if F.endswith(Extn):
                FilesToProcess.append(os.path.join(Root,F))

    FilesToProcess = list(set(FilesToProcess))
    FilesToProcess.sort()
    return FilesToProcess


def NewLineTokenizer (Str):
    return Str.split('\n')


def GetNonZeroDims (NonZeroDims, TrainFVs):
    ColSums = TrainFVs.sum(axis = 0)
    # print type(ColSums)
    ColSums = ColSums.tolist()[0]
    for CIndex, Val in enumerate(ColSums):
        if Val:
            NonZeroDims.add (CIndex)
    # print NonZeroDims
    return NonZeroDims


def ReadVocab (VocabFName):
    try:
        print 'trying to load vocab from', VocabFName
        Vocab = [l.strip() for l in open(VocabFName,'r').xreadlines()]
        return Vocab
    except:
        print 'could not load vocab from {} exiting... '.format(VocabFName)
        exit(0)

def Classification(MalwareCorpus,
                   GoodwareCorpus,
                   Extn):

    # step 1: split all samples to training set and test set (3:1)
    logger.debug ("Loading positive and negative samples file basename")

    TrainMalSamples = GetFilesWithExtn(MalwareCorpus,Extn)
    TrainGoodSamples = GetFilesWithExtn(GoodwareCorpus,Extn)

    logger.info ("All Trainsing Samples loaded")
    print '# mal samples:', len(TrainMalSamples)
    print '# good samples:', len(TrainGoodSamples)



    logger.info("Training and test sets split randomly")

    TrainMalLabels = np.ones(len(TrainMalSamples)).tolist()
    TrainGoodLabels = np.empty(len(TrainGoodSamples));TrainGoodLabels.fill(-1); TrainGoodLabels = TrainGoodLabels.tolist()
    logger.info ("All labels created")

    TrainSamples = TrainMalSamples + TrainGoodSamples
    TrainLabels = TrainMalLabels + TrainGoodLabels

    print "# Train Samples", len(TrainSamples)
    print "# Train Labels", len(TrainLabels)


    #step 2 - feature extracting
    TFIDFTransformer = TfidfTransformer()

    NewLineCVetorizer = CountVectorizer(input=u'filename',
                                        lowercase=True,
                                        token_pattern=None,
                                        binary=True,
                                        tokenizer=NewLineTokenizer,
                                        dtype=np.float64)

    print 'performing count vectorizing'
    TrainDocsTermsFVs = NewLineCVetorizer.fit_transform(TrainSamples)
    print 'performing tf-idf vectorizing'
    TrainFVs = TFIDFTransformer.fit_transform(TrainDocsTermsFVs)


    print 'train term-doc matrix: ', TrainFVs.shape #rowsx cols, rows = docs, cols = features/terms

    #step 3- training classifier
    Clf = LinearSVC()
    BestModel = Clf.fit(TrainDocsTermsFVs, TrainLabels)
    joblib.dump(BestModel, 'Model.pkl')
    Vocab = NewLineCVetorizer.get_feature_names()
    joblib.dump(Vocab, 'Vocab.txt')


def main(MalwareDirName,
         GoodwareDirName,
         Extn):

    Classification(MalwareDirName,
                   GoodwareDirName,
                   Extn)

if __name__ == "__main__":
    main(MalwareDirName=sys.argv[1],
         GoodwareDirName=sys.argv[2],
         Extn=float(sys.argv[3]))
